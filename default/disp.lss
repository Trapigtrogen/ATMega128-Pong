
disp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800100  000035a6  0000363a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000080c  0080028c  0080028c  000037c6  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  000037c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000712  00000000  00000000  00003946  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ba8  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000118f  00000000  00000000  00006c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a47  00000000  00000000  00007d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  000097d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000742  00000000  00000000  00009ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  0000a20a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__ctors_end>
       4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      10:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      14:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      18:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      1c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      20:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      24:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      28:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      2c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      30:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      34:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      38:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      3c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      40:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      44:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      4c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      50:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      54:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      58:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      5c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      60:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      64:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      68:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      6c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      70:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      74:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      78:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      7c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      80:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      84:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      88:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>

0000008c <__c.1790>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.1788>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	12 e0       	ldi	r17, 0x02	; 2
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	e6 ea       	ldi	r30, 0xA6	; 166
     1a2:	f5 e3       	ldi	r31, 0x35	; 53
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	ac 38       	cpi	r26, 0x8C	; 140
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>

000001b4 <__do_clear_bss>:
     1b4:	1a e0       	ldi	r17, 0x0A	; 10
     1b6:	ac e8       	ldi	r26, 0x8C	; 140
     1b8:	b2 e0       	ldi	r27, 0x02	; 2
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a8 39       	cpi	r26, 0x98	; 152
     1c0:	b1 07       	cpc	r27, r17
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
     1c8:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <_exit>

000001cc <__bad_interrupt>:
     1cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d0 <main>:
// Globaalit muuttujaiset
int playerYla = 21, playerAla = 41, aiYla = 21, aiAla = 41, palloVasen = 60, palloYla = 28, palloOikea = 65, palloAla = 32, suuntaX = 0, suuntaY = 0, randomi;
char scorePlayer = '0', scoreAi = '0';


int main(void){
     1d0:	df 93       	push	r29
     1d2:	cf 93       	push	r28
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	2c 97       	sbiw	r28, 0x0c	; 12
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
	char Buffer[6];
	DDRD &= ~((1<<SWAla)|(1<<SWYla)|(1<<SWReset)); // Kytkimet tuloja
     1e4:	a1 e3       	ldi	r26, 0x31	; 49
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e1 e3       	ldi	r30, 0x31	; 49
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	81 7f       	andi	r24, 0xF1	; 241
     1f0:	8c 93       	st	X, r24
	int i,j;
	
	// Käynnistysviive
	for(i=0;i<100;i++)
     1f2:	1c 82       	std	Y+4, r1	; 0x04
     1f4:	1b 82       	std	Y+3, r1	; 0x03
     1f6:	12 c0       	rjmp	.+36     	; 0x21c <main+0x4c>
		for(j=0;j<100;j++);
     1f8:	1a 82       	std	Y+2, r1	; 0x02
     1fa:	19 82       	std	Y+1, r1	; 0x01
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <main+0x38>
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	9a 83       	std	Y+2, r25	; 0x02
     206:	89 83       	std	Y+1, r24	; 0x01
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	9a 81       	ldd	r25, Y+2	; 0x02
     20c:	84 36       	cpi	r24, 0x64	; 100
     20e:	91 05       	cpc	r25, r1
     210:	b4 f3       	brlt	.-20     	; 0x1fe <main+0x2e>
	char Buffer[6];
	DDRD &= ~((1<<SWAla)|(1<<SWYla)|(1<<SWReset)); // Kytkimet tuloja
	int i,j;
	
	// Käynnistysviive
	for(i=0;i<100;i++)
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	9c 81       	ldd	r25, Y+4	; 0x04
     216:	01 96       	adiw	r24, 0x01	; 1
     218:	9c 83       	std	Y+4, r25	; 0x04
     21a:	8b 83       	std	Y+3, r24	; 0x03
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	9c 81       	ldd	r25, Y+4	; 0x04
     220:	84 36       	cpi	r24, 0x64	; 100
     222:	91 05       	cpc	r25, r1
     224:	4c f3       	brlt	.-46     	; 0x1f8 <main+0x28>
		for(j=0;j<100;j++);

	LCD_Init_With_Flags(FLAG_LANDSCAPE | FLAG_IGNORE_WHITESPACE);
     226:	85 e0       	ldi	r24, 0x05	; 5
     228:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_Init_With_Flags>
	
	// PELI
	for(;;){
		//ALUSTUS
		LCD_Clear();
     22c:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_Clear>
		LCD_FillRect(0, 0, 127, 2);
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	4f e7       	ldi	r20, 0x7F	; 127
     236:	22 e0       	ldi	r18, 0x02	; 2
     238:	0e 94 83 08 	call	0x1106	; 0x1106 <LCD_FillRect>
		// pelaajat
		LCD_FillRect(0, playerYla, 4, playerAla); // vasen (ihmispelaaja)
     23c:	80 91 00 01 	lds	r24, 0x0100
     240:	90 91 01 01 	lds	r25, 0x0101
     244:	28 2f       	mov	r18, r24
     246:	80 91 02 01 	lds	r24, 0x0102
     24a:	90 91 03 01 	lds	r25, 0x0103
     24e:	98 2f       	mov	r25, r24
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	62 2f       	mov	r22, r18
     254:	44 e0       	ldi	r20, 0x04	; 4
     256:	29 2f       	mov	r18, r25
     258:	0e 94 83 08 	call	0x1106	; 0x1106 <LCD_FillRect>
		LCD_FillRect(123, aiYla, 127, aiAla); // oikea (AI)
     25c:	80 91 04 01 	lds	r24, 0x0104
     260:	90 91 05 01 	lds	r25, 0x0105
     264:	28 2f       	mov	r18, r24
     266:	80 91 06 01 	lds	r24, 0x0106
     26a:	90 91 07 01 	lds	r25, 0x0107
     26e:	98 2f       	mov	r25, r24
     270:	8b e7       	ldi	r24, 0x7B	; 123
     272:	62 2f       	mov	r22, r18
     274:	4f e7       	ldi	r20, 0x7F	; 127
     276:	29 2f       	mov	r18, r25
     278:	0e 94 83 08 	call	0x1106	; 0x1106 <LCD_FillRect>
		// pallo
		LCD_FillRect(palloVasen, palloYla, palloOikea, palloAla);
     27c:	80 91 08 01 	lds	r24, 0x0108
     280:	90 91 09 01 	lds	r25, 0x0109
     284:	38 2f       	mov	r19, r24
     286:	80 91 0a 01 	lds	r24, 0x010A
     28a:	90 91 0b 01 	lds	r25, 0x010B
     28e:	48 2f       	mov	r20, r24
     290:	80 91 0c 01 	lds	r24, 0x010C
     294:	90 91 0d 01 	lds	r25, 0x010D
     298:	28 2f       	mov	r18, r24
     29a:	80 91 0e 01 	lds	r24, 0x010E
     29e:	90 91 0f 01 	lds	r25, 0x010F
     2a2:	98 2f       	mov	r25, r24
     2a4:	83 2f       	mov	r24, r19
     2a6:	64 2f       	mov	r22, r20
     2a8:	42 2f       	mov	r20, r18
     2aa:	29 2f       	mov	r18, r25
     2ac:	0e 94 83 08 	call	0x1106	; 0x1106 <LCD_FillRect>

		// PALLON LIIKUTTAMINEN
		//vaakaliike
		if(suuntaX == 1){ // oikealle
     2b0:	80 91 8c 02 	lds	r24, 0x028C
     2b4:	90 91 8d 02 	lds	r25, 0x028D
     2b8:	81 30       	cpi	r24, 0x01	; 1
     2ba:	91 05       	cpc	r25, r1
     2bc:	91 f4       	brne	.+36     	; 0x2e2 <main+0x112>
			palloOikea += 3;
     2be:	80 91 0c 01 	lds	r24, 0x010C
     2c2:	90 91 0d 01 	lds	r25, 0x010D
     2c6:	03 96       	adiw	r24, 0x03	; 3
     2c8:	90 93 0d 01 	sts	0x010D, r25
     2cc:	80 93 0c 01 	sts	0x010C, r24
			palloVasen += 3;
     2d0:	80 91 08 01 	lds	r24, 0x0108
     2d4:	90 91 09 01 	lds	r25, 0x0109
     2d8:	03 96       	adiw	r24, 0x03	; 3
     2da:	90 93 09 01 	sts	0x0109, r25
     2de:	80 93 08 01 	sts	0x0108, r24
		}
		if(suuntaX == 0){ // vasemmalle
     2e2:	80 91 8c 02 	lds	r24, 0x028C
     2e6:	90 91 8d 02 	lds	r25, 0x028D
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	91 f4       	brne	.+36     	; 0x312 <main+0x142>
			palloOikea -= 3;
     2ee:	80 91 0c 01 	lds	r24, 0x010C
     2f2:	90 91 0d 01 	lds	r25, 0x010D
     2f6:	03 97       	sbiw	r24, 0x03	; 3
     2f8:	90 93 0d 01 	sts	0x010D, r25
     2fc:	80 93 0c 01 	sts	0x010C, r24
			palloVasen -= 3;
     300:	80 91 08 01 	lds	r24, 0x0108
     304:	90 91 09 01 	lds	r25, 0x0109
     308:	03 97       	sbiw	r24, 0x03	; 3
     30a:	90 93 09 01 	sts	0x0109, r25
     30e:	80 93 08 01 	sts	0x0108, r24
		}
		//pystyliike
		if(suuntaY == 1 && palloYla > 2){ // ylös
     312:	80 91 8e 02 	lds	r24, 0x028E
     316:	90 91 8f 02 	lds	r25, 0x028F
     31a:	81 30       	cpi	r24, 0x01	; 1
     31c:	91 05       	cpc	r25, r1
     31e:	c9 f4       	brne	.+50     	; 0x352 <main+0x182>
     320:	80 91 0a 01 	lds	r24, 0x010A
     324:	90 91 0b 01 	lds	r25, 0x010B
     328:	83 30       	cpi	r24, 0x03	; 3
     32a:	91 05       	cpc	r25, r1
     32c:	94 f0       	brlt	.+36     	; 0x352 <main+0x182>
			palloYla -= 2;
     32e:	80 91 0a 01 	lds	r24, 0x010A
     332:	90 91 0b 01 	lds	r25, 0x010B
     336:	02 97       	sbiw	r24, 0x02	; 2
     338:	90 93 0b 01 	sts	0x010B, r25
     33c:	80 93 0a 01 	sts	0x010A, r24
			palloAla -= 2;
     340:	80 91 0e 01 	lds	r24, 0x010E
     344:	90 91 0f 01 	lds	r25, 0x010F
     348:	02 97       	sbiw	r24, 0x02	; 2
     34a:	90 93 0f 01 	sts	0x010F, r25
     34e:	80 93 0e 01 	sts	0x010E, r24
		}
		if(suuntaY == 0){ // alas
     352:	80 91 8e 02 	lds	r24, 0x028E
     356:	90 91 8f 02 	lds	r25, 0x028F
     35a:	00 97       	sbiw	r24, 0x00	; 0
     35c:	81 f4       	brne	.+32     	; 0x37e <main+0x1ae>
			palloYla += 0;
     35e:	80 91 0a 01 	lds	r24, 0x010A
     362:	90 91 0b 01 	lds	r25, 0x010B
     366:	90 93 0b 01 	sts	0x010B, r25
     36a:	80 93 0a 01 	sts	0x010A, r24
			palloAla += 0;
     36e:	80 91 0e 01 	lds	r24, 0x010E
     372:	90 91 0f 01 	lds	r25, 0x010F
     376:	90 93 0f 01 	sts	0x010F, r25
     37a:	80 93 0e 01 	sts	0x010E, r24
		}
		if(suuntaY == -1 && palloAla < 63){ // alas
     37e:	80 91 8e 02 	lds	r24, 0x028E
     382:	90 91 8f 02 	lds	r25, 0x028F
     386:	2f ef       	ldi	r18, 0xFF	; 255
     388:	8f 3f       	cpi	r24, 0xFF	; 255
     38a:	92 07       	cpc	r25, r18
     38c:	c9 f4       	brne	.+50     	; 0x3c0 <main+0x1f0>
     38e:	80 91 0e 01 	lds	r24, 0x010E
     392:	90 91 0f 01 	lds	r25, 0x010F
     396:	8f 33       	cpi	r24, 0x3F	; 63
     398:	91 05       	cpc	r25, r1
     39a:	94 f4       	brge	.+36     	; 0x3c0 <main+0x1f0>
			palloYla += 2;
     39c:	80 91 0a 01 	lds	r24, 0x010A
     3a0:	90 91 0b 01 	lds	r25, 0x010B
     3a4:	02 96       	adiw	r24, 0x02	; 2
     3a6:	90 93 0b 01 	sts	0x010B, r25
     3aa:	80 93 0a 01 	sts	0x010A, r24
			palloAla += 2;
     3ae:	80 91 0e 01 	lds	r24, 0x010E
     3b2:	90 91 0f 01 	lds	r25, 0x010F
     3b6:	02 96       	adiw	r24, 0x02	; 2
     3b8:	90 93 0f 01 	sts	0x010F, r25
     3bc:	80 93 0e 01 	sts	0x010E, r24
		}

		// Kun pallo menee ohi levystä
		if(palloOikea > 127){
     3c0:	80 91 0c 01 	lds	r24, 0x010C
     3c4:	90 91 0d 01 	lds	r25, 0x010D
     3c8:	80 38       	cpi	r24, 0x80	; 128
     3ca:	91 05       	cpc	r25, r1
     3cc:	2c f1       	brlt	.+74     	; 0x418 <main+0x248>
			palloVasen = 60;
     3ce:	8c e3       	ldi	r24, 0x3C	; 60
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	90 93 09 01 	sts	0x0109, r25
     3d6:	80 93 08 01 	sts	0x0108, r24
			palloYla = 28;
     3da:	8c e1       	ldi	r24, 0x1C	; 28
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	90 93 0b 01 	sts	0x010B, r25
     3e2:	80 93 0a 01 	sts	0x010A, r24
			palloOikea = 65;
     3e6:	81 e4       	ldi	r24, 0x41	; 65
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	90 93 0d 01 	sts	0x010D, r25
     3ee:	80 93 0c 01 	sts	0x010C, r24
			palloAla = 32;
     3f2:	80 e2       	ldi	r24, 0x20	; 32
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	90 93 0f 01 	sts	0x010F, r25
     3fa:	80 93 0e 01 	sts	0x010E, r24
			suuntaX = 0;
     3fe:	10 92 8d 02 	sts	0x028D, r1
     402:	10 92 8c 02 	sts	0x028C, r1
			suuntaY = 0;
     406:	10 92 8f 02 	sts	0x028F, r1
     40a:	10 92 8e 02 	sts	0x028E, r1
			scorePlayer++;
     40e:	80 91 10 01 	lds	r24, 0x0110
     412:	8f 5f       	subi	r24, 0xFF	; 255
     414:	80 93 10 01 	sts	0x0110, r24
		}
		if(palloVasen < 0){
     418:	80 91 08 01 	lds	r24, 0x0108
     41c:	90 91 09 01 	lds	r25, 0x0109
     420:	99 23       	and	r25, r25
     422:	2c f5       	brge	.+74     	; 0x46e <main+0x29e>
			palloVasen = 60;
     424:	8c e3       	ldi	r24, 0x3C	; 60
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	90 93 09 01 	sts	0x0109, r25
     42c:	80 93 08 01 	sts	0x0108, r24
			palloYla = 28;
     430:	8c e1       	ldi	r24, 0x1C	; 28
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	90 93 0b 01 	sts	0x010B, r25
     438:	80 93 0a 01 	sts	0x010A, r24
			palloOikea = 65;
     43c:	81 e4       	ldi	r24, 0x41	; 65
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	90 93 0d 01 	sts	0x010D, r25
     444:	80 93 0c 01 	sts	0x010C, r24
			palloAla = 32;
     448:	80 e2       	ldi	r24, 0x20	; 32
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	90 93 0f 01 	sts	0x010F, r25
     450:	80 93 0e 01 	sts	0x010E, r24
			suuntaX = 0;
     454:	10 92 8d 02 	sts	0x028D, r1
     458:	10 92 8c 02 	sts	0x028C, r1
			suuntaY = 0;
     45c:	10 92 8f 02 	sts	0x028F, r1
     460:	10 92 8e 02 	sts	0x028E, r1
			scoreAi++;
     464:	80 91 11 01 	lds	r24, 0x0111
     468:	8f 5f       	subi	r24, 0xFF	; 255
     46a:	80 93 11 01 	sts	0x0111, r24
		}

		// Levyjen hitboxit ja pallon suunnan kääntäminen
		if(palloOikea > 121 && palloYla < aiAla && palloYla > aiYla - 5){
     46e:	80 91 0c 01 	lds	r24, 0x010C
     472:	90 91 0d 01 	lds	r25, 0x010D
     476:	8a 37       	cpi	r24, 0x7A	; 122
     478:	91 05       	cpc	r25, r1
     47a:	ec f0       	brlt	.+58     	; 0x4b6 <main+0x2e6>
     47c:	20 91 0a 01 	lds	r18, 0x010A
     480:	30 91 0b 01 	lds	r19, 0x010B
     484:	80 91 06 01 	lds	r24, 0x0106
     488:	90 91 07 01 	lds	r25, 0x0107
     48c:	28 17       	cp	r18, r24
     48e:	39 07       	cpc	r19, r25
     490:	94 f4       	brge	.+36     	; 0x4b6 <main+0x2e6>
     492:	80 91 04 01 	lds	r24, 0x0104
     496:	90 91 05 01 	lds	r25, 0x0105
     49a:	9c 01       	movw	r18, r24
     49c:	25 50       	subi	r18, 0x05	; 5
     49e:	30 40       	sbci	r19, 0x00	; 0
     4a0:	80 91 0a 01 	lds	r24, 0x010A
     4a4:	90 91 0b 01 	lds	r25, 0x010B
     4a8:	28 17       	cp	r18, r24
     4aa:	39 07       	cpc	r19, r25
     4ac:	24 f4       	brge	.+8      	; 0x4b6 <main+0x2e6>
			suuntaX = 0;
     4ae:	10 92 8d 02 	sts	0x028D, r1
     4b2:	10 92 8c 02 	sts	0x028C, r1
		}
		if(palloVasen < 6 && palloYla < playerAla && palloYla > playerYla - 5){
     4b6:	80 91 08 01 	lds	r24, 0x0108
     4ba:	90 91 09 01 	lds	r25, 0x0109
     4be:	86 30       	cpi	r24, 0x06	; 6
     4c0:	91 05       	cpc	r25, r1
     4c2:	fc f4       	brge	.+62     	; 0x502 <main+0x332>
     4c4:	20 91 0a 01 	lds	r18, 0x010A
     4c8:	30 91 0b 01 	lds	r19, 0x010B
     4cc:	80 91 02 01 	lds	r24, 0x0102
     4d0:	90 91 03 01 	lds	r25, 0x0103
     4d4:	28 17       	cp	r18, r24
     4d6:	39 07       	cpc	r19, r25
     4d8:	a4 f4       	brge	.+40     	; 0x502 <main+0x332>
     4da:	80 91 00 01 	lds	r24, 0x0100
     4de:	90 91 01 01 	lds	r25, 0x0101
     4e2:	9c 01       	movw	r18, r24
     4e4:	25 50       	subi	r18, 0x05	; 5
     4e6:	30 40       	sbci	r19, 0x00	; 0
     4e8:	80 91 0a 01 	lds	r24, 0x010A
     4ec:	90 91 0b 01 	lds	r25, 0x010B
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	34 f4       	brge	.+12     	; 0x502 <main+0x332>
			suuntaX = 1;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	90 93 8d 02 	sts	0x028D, r25
     4fe:	80 93 8c 02 	sts	0x028C, r24
		}

		// PALLON SUUNNANVAIHDOT
		// jos pallo osuu keskelle levyä, se jatkaa suoraan (4px korkea alue)
		if((palloOikea > 121 && palloYla < aiAla - 9 && palloYla > aiYla + 7) || (palloVasen < 6 && palloYla < playerAla - 9 && palloYla > playerYla + 7)){
     502:	80 91 0c 01 	lds	r24, 0x010C
     506:	90 91 0d 01 	lds	r25, 0x010D
     50a:	8a 37       	cpi	r24, 0x7A	; 122
     50c:	91 05       	cpc	r25, r1
     50e:	e4 f0       	brlt	.+56     	; 0x548 <main+0x378>
     510:	80 91 06 01 	lds	r24, 0x0106
     514:	90 91 07 01 	lds	r25, 0x0107
     518:	9c 01       	movw	r18, r24
     51a:	29 50       	subi	r18, 0x09	; 9
     51c:	30 40       	sbci	r19, 0x00	; 0
     51e:	80 91 0a 01 	lds	r24, 0x010A
     522:	90 91 0b 01 	lds	r25, 0x010B
     526:	82 17       	cp	r24, r18
     528:	93 07       	cpc	r25, r19
     52a:	74 f4       	brge	.+28     	; 0x548 <main+0x378>
     52c:	80 91 04 01 	lds	r24, 0x0104
     530:	90 91 05 01 	lds	r25, 0x0105
     534:	9c 01       	movw	r18, r24
     536:	29 5f       	subi	r18, 0xF9	; 249
     538:	3f 4f       	sbci	r19, 0xFF	; 255
     53a:	80 91 0a 01 	lds	r24, 0x010A
     53e:	90 91 0b 01 	lds	r25, 0x010B
     542:	28 17       	cp	r18, r24
     544:	39 07       	cpc	r19, r25
     546:	1c f1       	brlt	.+70     	; 0x58e <main+0x3be>
     548:	80 91 08 01 	lds	r24, 0x0108
     54c:	90 91 09 01 	lds	r25, 0x0109
     550:	86 30       	cpi	r24, 0x06	; 6
     552:	91 05       	cpc	r25, r1
     554:	04 f5       	brge	.+64     	; 0x596 <main+0x3c6>
     556:	80 91 02 01 	lds	r24, 0x0102
     55a:	90 91 03 01 	lds	r25, 0x0103
     55e:	9c 01       	movw	r18, r24
     560:	29 50       	subi	r18, 0x09	; 9
     562:	30 40       	sbci	r19, 0x00	; 0
     564:	80 91 0a 01 	lds	r24, 0x010A
     568:	90 91 0b 01 	lds	r25, 0x010B
     56c:	82 17       	cp	r24, r18
     56e:	93 07       	cpc	r25, r19
     570:	94 f4       	brge	.+36     	; 0x596 <main+0x3c6>
     572:	80 91 00 01 	lds	r24, 0x0100
     576:	90 91 01 01 	lds	r25, 0x0101
     57a:	9c 01       	movw	r18, r24
     57c:	29 5f       	subi	r18, 0xF9	; 249
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	80 91 0a 01 	lds	r24, 0x010A
     584:	90 91 0b 01 	lds	r25, 0x010B
     588:	28 17       	cp	r18, r24
     58a:	39 07       	cpc	r19, r25
     58c:	24 f4       	brge	.+8      	; 0x596 <main+0x3c6>
			suuntaY = 0;
     58e:	10 92 8f 02 	sts	0x028F, r1
     592:	10 92 8e 02 	sts	0x028E, r1
		}
		// jos pallo osuu levyn yläosaan tai näytön alaosaan, se jatkaa ylös päin (8px korkea alue)
		if((palloOikea > 121 && palloYla < aiAla - 12 && palloYla > aiYla - 5) || (palloVasen < 6 && palloYla < playerAla - 12 && palloYla > playerYla - 5) || palloAla > 62){
     596:	80 91 0c 01 	lds	r24, 0x010C
     59a:	90 91 0d 01 	lds	r25, 0x010D
     59e:	8a 37       	cpi	r24, 0x7A	; 122
     5a0:	91 05       	cpc	r25, r1
     5a2:	e4 f0       	brlt	.+56     	; 0x5dc <main+0x40c>
     5a4:	80 91 06 01 	lds	r24, 0x0106
     5a8:	90 91 07 01 	lds	r25, 0x0107
     5ac:	9c 01       	movw	r18, r24
     5ae:	2c 50       	subi	r18, 0x0C	; 12
     5b0:	30 40       	sbci	r19, 0x00	; 0
     5b2:	80 91 0a 01 	lds	r24, 0x010A
     5b6:	90 91 0b 01 	lds	r25, 0x010B
     5ba:	82 17       	cp	r24, r18
     5bc:	93 07       	cpc	r25, r19
     5be:	74 f4       	brge	.+28     	; 0x5dc <main+0x40c>
     5c0:	80 91 04 01 	lds	r24, 0x0104
     5c4:	90 91 05 01 	lds	r25, 0x0105
     5c8:	9c 01       	movw	r18, r24
     5ca:	25 50       	subi	r18, 0x05	; 5
     5cc:	30 40       	sbci	r19, 0x00	; 0
     5ce:	80 91 0a 01 	lds	r24, 0x010A
     5d2:	90 91 0b 01 	lds	r25, 0x010B
     5d6:	28 17       	cp	r18, r24
     5d8:	39 07       	cpc	r19, r25
     5da:	54 f1       	brlt	.+84     	; 0x630 <main+0x460>
     5dc:	80 91 08 01 	lds	r24, 0x0108
     5e0:	90 91 09 01 	lds	r25, 0x0109
     5e4:	86 30       	cpi	r24, 0x06	; 6
     5e6:	91 05       	cpc	r25, r1
     5e8:	e4 f4       	brge	.+56     	; 0x622 <main+0x452>
     5ea:	80 91 02 01 	lds	r24, 0x0102
     5ee:	90 91 03 01 	lds	r25, 0x0103
     5f2:	9c 01       	movw	r18, r24
     5f4:	2c 50       	subi	r18, 0x0C	; 12
     5f6:	30 40       	sbci	r19, 0x00	; 0
     5f8:	80 91 0a 01 	lds	r24, 0x010A
     5fc:	90 91 0b 01 	lds	r25, 0x010B
     600:	82 17       	cp	r24, r18
     602:	93 07       	cpc	r25, r19
     604:	74 f4       	brge	.+28     	; 0x622 <main+0x452>
     606:	80 91 00 01 	lds	r24, 0x0100
     60a:	90 91 01 01 	lds	r25, 0x0101
     60e:	9c 01       	movw	r18, r24
     610:	25 50       	subi	r18, 0x05	; 5
     612:	30 40       	sbci	r19, 0x00	; 0
     614:	80 91 0a 01 	lds	r24, 0x010A
     618:	90 91 0b 01 	lds	r25, 0x010B
     61c:	28 17       	cp	r18, r24
     61e:	39 07       	cpc	r19, r25
     620:	3c f0       	brlt	.+14     	; 0x630 <main+0x460>
     622:	80 91 0e 01 	lds	r24, 0x010E
     626:	90 91 0f 01 	lds	r25, 0x010F
     62a:	8f 33       	cpi	r24, 0x3F	; 63
     62c:	91 05       	cpc	r25, r1
     62e:	34 f0       	brlt	.+12     	; 0x63c <main+0x46c>
			suuntaY = 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	90 93 8f 02 	sts	0x028F, r25
     638:	80 93 8e 02 	sts	0x028E, r24
		}
		// jos pallo osuu levyn alaosaan tai näytön yläosaan, se jatkaa ylös päin (8px korkea alue)
		if((palloOikea > 121 && palloYla < aiAla && palloYla > aiYla + 12) || (palloVasen < 6 && palloYla < playerAla && palloYla > playerYla + 12) || palloYla < 3){
     63c:	80 91 0c 01 	lds	r24, 0x010C
     640:	90 91 0d 01 	lds	r25, 0x010D
     644:	8a 37       	cpi	r24, 0x7A	; 122
     646:	91 05       	cpc	r25, r1
     648:	cc f0       	brlt	.+50     	; 0x67c <main+0x4ac>
     64a:	20 91 0a 01 	lds	r18, 0x010A
     64e:	30 91 0b 01 	lds	r19, 0x010B
     652:	80 91 06 01 	lds	r24, 0x0106
     656:	90 91 07 01 	lds	r25, 0x0107
     65a:	28 17       	cp	r18, r24
     65c:	39 07       	cpc	r19, r25
     65e:	74 f4       	brge	.+28     	; 0x67c <main+0x4ac>
     660:	80 91 04 01 	lds	r24, 0x0104
     664:	90 91 05 01 	lds	r25, 0x0105
     668:	9c 01       	movw	r18, r24
     66a:	24 5f       	subi	r18, 0xF4	; 244
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	80 91 0a 01 	lds	r24, 0x010A
     672:	90 91 0b 01 	lds	r25, 0x010B
     676:	28 17       	cp	r18, r24
     678:	39 07       	cpc	r19, r25
     67a:	3c f1       	brlt	.+78     	; 0x6ca <main+0x4fa>
     67c:	80 91 08 01 	lds	r24, 0x0108
     680:	90 91 09 01 	lds	r25, 0x0109
     684:	86 30       	cpi	r24, 0x06	; 6
     686:	91 05       	cpc	r25, r1
     688:	cc f4       	brge	.+50     	; 0x6bc <main+0x4ec>
     68a:	20 91 0a 01 	lds	r18, 0x010A
     68e:	30 91 0b 01 	lds	r19, 0x010B
     692:	80 91 02 01 	lds	r24, 0x0102
     696:	90 91 03 01 	lds	r25, 0x0103
     69a:	28 17       	cp	r18, r24
     69c:	39 07       	cpc	r19, r25
     69e:	74 f4       	brge	.+28     	; 0x6bc <main+0x4ec>
     6a0:	80 91 00 01 	lds	r24, 0x0100
     6a4:	90 91 01 01 	lds	r25, 0x0101
     6a8:	9c 01       	movw	r18, r24
     6aa:	24 5f       	subi	r18, 0xF4	; 244
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
     6ae:	80 91 0a 01 	lds	r24, 0x010A
     6b2:	90 91 0b 01 	lds	r25, 0x010B
     6b6:	28 17       	cp	r18, r24
     6b8:	39 07       	cpc	r19, r25
     6ba:	3c f0       	brlt	.+14     	; 0x6ca <main+0x4fa>
     6bc:	80 91 0a 01 	lds	r24, 0x010A
     6c0:	90 91 0b 01 	lds	r25, 0x010B
     6c4:	83 30       	cpi	r24, 0x03	; 3
     6c6:	91 05       	cpc	r25, r1
     6c8:	34 f4       	brge	.+12     	; 0x6d6 <main+0x506>
			suuntaY = -1;
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
     6cc:	9f ef       	ldi	r25, 0xFF	; 255
     6ce:	90 93 8f 02 	sts	0x028F, r25
     6d2:	80 93 8e 02 	sts	0x028E, r24
		}
	
		// pisteet
		LCD_PrintChar(scorePlayer,20,4); // vasen
     6d6:	80 91 10 01 	lds	r24, 0x0110
     6da:	64 e1       	ldi	r22, 0x14	; 20
     6dc:	44 e0       	ldi	r20, 0x04	; 4
     6de:	0e 94 a0 09 	call	0x1340	; 0x1340 <LCD_PrintChar>
		LCD_PrintChar(scoreAi,108,4); // oikea
     6e2:	80 91 11 01 	lds	r24, 0x0111
     6e6:	6c e6       	ldi	r22, 0x6C	; 108
     6e8:	44 e0       	ldi	r20, 0x04	; 4
     6ea:	0e 94 a0 09 	call	0x1340	; 0x1340 <LCD_PrintChar>
		
		// PELAAJAN LIIKUTTAMINEN
		// Ylös päin liikuttaminen
		if(~Switch & (1<<SWYla) && playerYla > 1){ // Onko painettu kytkintä 4
     6ee:	e0 e3       	ldi	r30, 0x30	; 48
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	88 2f       	mov	r24, r24
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	88 70       	andi	r24, 0x08	; 8
     6fa:	90 70       	andi	r25, 0x00	; 0
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	c9 f4       	brne	.+50     	; 0x732 <main+0x562>
     700:	80 91 00 01 	lds	r24, 0x0100
     704:	90 91 01 01 	lds	r25, 0x0101
     708:	82 30       	cpi	r24, 0x02	; 2
     70a:	91 05       	cpc	r25, r1
     70c:	94 f0       	brlt	.+36     	; 0x732 <main+0x562>
			playerAla-=2;
     70e:	80 91 02 01 	lds	r24, 0x0102
     712:	90 91 03 01 	lds	r25, 0x0103
     716:	02 97       	sbiw	r24, 0x02	; 2
     718:	90 93 03 01 	sts	0x0103, r25
     71c:	80 93 02 01 	sts	0x0102, r24
			playerYla-=2;
     720:	80 91 00 01 	lds	r24, 0x0100
     724:	90 91 01 01 	lds	r25, 0x0101
     728:	02 97       	sbiw	r24, 0x02	; 2
     72a:	90 93 01 01 	sts	0x0101, r25
     72e:	80 93 00 01 	sts	0x0100, r24
	
		}
		// Alas päin liikuttaminen
		if(~Switch & (1<<SWAla) && playerAla < 63){ // Onko painettu kytkintä 2
     732:	e0 e3       	ldi	r30, 0x30	; 48
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	82 70       	andi	r24, 0x02	; 2
     73e:	90 70       	andi	r25, 0x00	; 0
     740:	00 97       	sbiw	r24, 0x00	; 0
     742:	c9 f4       	brne	.+50     	; 0x776 <main+0x5a6>
     744:	80 91 02 01 	lds	r24, 0x0102
     748:	90 91 03 01 	lds	r25, 0x0103
     74c:	8f 33       	cpi	r24, 0x3F	; 63
     74e:	91 05       	cpc	r25, r1
     750:	94 f4       	brge	.+36     	; 0x776 <main+0x5a6>
			playerAla+=2;
     752:	80 91 02 01 	lds	r24, 0x0102
     756:	90 91 03 01 	lds	r25, 0x0103
     75a:	02 96       	adiw	r24, 0x02	; 2
     75c:	90 93 03 01 	sts	0x0103, r25
     760:	80 93 02 01 	sts	0x0102, r24
			playerYla+=2;
     764:	80 91 00 01 	lds	r24, 0x0100
     768:	90 91 01 01 	lds	r25, 0x0101
     76c:	02 96       	adiw	r24, 0x02	; 2
     76e:	90 93 01 01 	sts	0x0101, r25
     772:	80 93 00 01 	sts	0x0100, r24
		}


				
		//VASTAPELAAJAN LIIKUTTAMINEN
		if (rand() % 11 > 3){
     776:	0e 94 dd 18 	call	0x31ba	; 0x31ba <rand>
     77a:	2b e0       	ldi	r18, 0x0B	; 11
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	b9 01       	movw	r22, r18
     780:	0e 94 24 18 	call	0x3048	; 0x3048 <__divmodhi4>
     784:	84 30       	cpi	r24, 0x04	; 4
     786:	91 05       	cpc	r25, r1
     788:	0c f4       	brge	.+2      	; 0x78c <main+0x5bc>
     78a:	4e c0       	rjmp	.+156    	; 0x828 <main+0x658>
			if(palloAla < aiYla + 10 && aiYla > 1){ //ylöspäin
     78c:	80 91 04 01 	lds	r24, 0x0104
     790:	90 91 05 01 	lds	r25, 0x0105
     794:	9c 01       	movw	r18, r24
     796:	26 5f       	subi	r18, 0xF6	; 246
     798:	3f 4f       	sbci	r19, 0xFF	; 255
     79a:	80 91 0e 01 	lds	r24, 0x010E
     79e:	90 91 0f 01 	lds	r25, 0x010F
     7a2:	82 17       	cp	r24, r18
     7a4:	93 07       	cpc	r25, r19
     7a6:	cc f4       	brge	.+50     	; 0x7da <main+0x60a>
     7a8:	80 91 04 01 	lds	r24, 0x0104
     7ac:	90 91 05 01 	lds	r25, 0x0105
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	91 05       	cpc	r25, r1
     7b4:	94 f0       	brlt	.+36     	; 0x7da <main+0x60a>
				aiAla-=2;
     7b6:	80 91 06 01 	lds	r24, 0x0106
     7ba:	90 91 07 01 	lds	r25, 0x0107
     7be:	02 97       	sbiw	r24, 0x02	; 2
     7c0:	90 93 07 01 	sts	0x0107, r25
     7c4:	80 93 06 01 	sts	0x0106, r24
				aiYla-=2;
     7c8:	80 91 04 01 	lds	r24, 0x0104
     7cc:	90 91 05 01 	lds	r25, 0x0105
     7d0:	02 97       	sbiw	r24, 0x02	; 2
     7d2:	90 93 05 01 	sts	0x0105, r25
     7d6:	80 93 04 01 	sts	0x0104, r24
			}
			if(palloAla > aiYla + 10 && aiAla < 63){ //alaspäin
     7da:	80 91 04 01 	lds	r24, 0x0104
     7de:	90 91 05 01 	lds	r25, 0x0105
     7e2:	9c 01       	movw	r18, r24
     7e4:	26 5f       	subi	r18, 0xF6	; 246
     7e6:	3f 4f       	sbci	r19, 0xFF	; 255
     7e8:	80 91 0e 01 	lds	r24, 0x010E
     7ec:	90 91 0f 01 	lds	r25, 0x010F
     7f0:	28 17       	cp	r18, r24
     7f2:	39 07       	cpc	r19, r25
     7f4:	cc f4       	brge	.+50     	; 0x828 <main+0x658>
     7f6:	80 91 06 01 	lds	r24, 0x0106
     7fa:	90 91 07 01 	lds	r25, 0x0107
     7fe:	8f 33       	cpi	r24, 0x3F	; 63
     800:	91 05       	cpc	r25, r1
     802:	94 f4       	brge	.+36     	; 0x828 <main+0x658>
				aiAla+=2;
     804:	80 91 06 01 	lds	r24, 0x0106
     808:	90 91 07 01 	lds	r25, 0x0107
     80c:	02 96       	adiw	r24, 0x02	; 2
     80e:	90 93 07 01 	sts	0x0107, r25
     812:	80 93 06 01 	sts	0x0106, r24
				aiYla+=2;
     816:	80 91 04 01 	lds	r24, 0x0104
     81a:	90 91 05 01 	lds	r25, 0x0105
     81e:	02 96       	adiw	r24, 0x02	; 2
     820:	90 93 05 01 	sts	0x0105, r25
     824:	80 93 04 01 	sts	0x0104, r24
			}
		}


		// tulostetaan näytölle
		LCD_Display();
     828:	0e 94 34 0b 	call	0x1668	; 0x1668 <LCD_Display>


		//voittoruudut
		if(scorePlayer >= '3'){
     82c:	80 91 10 01 	lds	r24, 0x0110
     830:	83 33       	cpi	r24, 0x33	; 51
     832:	a0 f0       	brcs	.+40     	; 0x85c <main+0x68c>
			sprintf(Buffer, "Voitit");
     834:	ce 01       	movw	r24, r28
     836:	05 96       	adiw	r24, 0x05	; 5
     838:	22 e1       	ldi	r18, 0x12	; 18
     83a:	31 e0       	ldi	r19, 0x01	; 1
     83c:	b9 01       	movw	r22, r18
     83e:	47 e0       	ldi	r20, 0x07	; 7
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <memcpy>
			LCD_PrintString(Buffer, 50, 30);
     846:	ce 01       	movw	r24, r28
     848:	05 96       	adiw	r24, 0x05	; 5
     84a:	62 e3       	ldi	r22, 0x32	; 50
     84c:	4e e1       	ldi	r20, 0x1E	; 30
     84e:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_PrintString>
			LCD_Display();
     852:	0e 94 34 0b 	call	0x1668	; 0x1668 <LCD_Display>
			return 0;
     856:	1c 86       	std	Y+12, r1	; 0x0c
     858:	1b 86       	std	Y+11, r1	; 0x0b
     85a:	18 c0       	rjmp	.+48     	; 0x88c <main+0x6bc>
		}
		if(scoreAi >= '3'){
     85c:	80 91 11 01 	lds	r24, 0x0111
     860:	83 33       	cpi	r24, 0x33	; 51
     862:	08 f4       	brcc	.+2      	; 0x866 <main+0x696>
     864:	e3 cc       	rjmp	.-1594   	; 0x22c <main+0x5c>
			sprintf(Buffer, "Havisit");
     866:	ce 01       	movw	r24, r28
     868:	05 96       	adiw	r24, 0x05	; 5
     86a:	29 e1       	ldi	r18, 0x19	; 25
     86c:	31 e0       	ldi	r19, 0x01	; 1
     86e:	b9 01       	movw	r22, r18
     870:	48 e0       	ldi	r20, 0x08	; 8
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <memcpy>
			LCD_PrintString(Buffer, 45, 30);
     878:	ce 01       	movw	r24, r28
     87a:	05 96       	adiw	r24, 0x05	; 5
     87c:	6d e2       	ldi	r22, 0x2D	; 45
     87e:	4e e1       	ldi	r20, 0x1E	; 30
     880:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_PrintString>
			LCD_Display();
     884:	0e 94 34 0b 	call	0x1668	; 0x1668 <LCD_Display>
			return 0;
     888:	1c 86       	std	Y+12, r1	; 0x0c
     88a:	1b 86       	std	Y+11, r1	; 0x0b
		}
	}
     88c:	8b 85       	ldd	r24, Y+11	; 0x0b
     88e:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     890:	2c 96       	adiw	r28, 0x0c	; 12
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	de bf       	out	0x3e, r29	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	cf 91       	pop	r28
     89e:	df 91       	pop	r29
     8a0:	08 95       	ret

000008a2 <LCD_SetFlags>:
	Flips the values of the two arguments
*/
void flip(unsigned char* c1, unsigned char* c2);

void LCD_SetFlags(char flags)
{
     8a2:	df 93       	push	r29
     8a4:	cf 93       	push	r28
     8a6:	0f 92       	push	r0
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	89 83       	std	Y+1, r24	; 0x01
	FLAGS = flags;
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	80 93 90 02 	sts	0x0290, r24
}
     8b4:	0f 90       	pop	r0
     8b6:	cf 91       	pop	r28
     8b8:	df 91       	pop	r29
     8ba:	08 95       	ret

000008bc <LCD_Init>:

void LCD_Init()
{
     8bc:	df 93       	push	r29
     8be:	cf 93       	push	r28
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	aa 97       	sbiw	r28, 0x2a	; 42
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
	LCD_DDR |= LCD_RESET_PIN | LCD_DATA_PIN | LCD_CD_PIN | LCD_CLK_PIN | LCD_SCE_PIN;
     8d0:	a4 e3       	ldi	r26, 0x34	; 52
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	e4 e3       	ldi	r30, 0x34	; 52
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	8f 61       	ori	r24, 0x1F	; 31
     8dc:	8c 93       	st	X, r24
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	a0 ef       	ldi	r26, 0xF0	; 240
     8e4:	b1 e4       	ldi	r27, 0x41	; 65
     8e6:	8f a3       	std	Y+39, r24	; 0x27
     8e8:	98 a7       	std	Y+40, r25	; 0x28
     8ea:	a9 a7       	std	Y+41, r26	; 0x29
     8ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8ee:	6f a1       	ldd	r22, Y+39	; 0x27
     8f0:	78 a5       	ldd	r23, Y+40	; 0x28
     8f2:	89 a5       	ldd	r24, Y+41	; 0x29
     8f4:	9a a5       	ldd	r25, Y+42	; 0x2a
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	4a ef       	ldi	r20, 0xFA	; 250
     8fc:	54 e4       	ldi	r21, 0x44	; 68
     8fe:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__mulsf3>
     902:	dc 01       	movw	r26, r24
     904:	cb 01       	movw	r24, r22
     906:	8b a3       	std	Y+35, r24	; 0x23
     908:	9c a3       	std	Y+36, r25	; 0x24
     90a:	ad a3       	std	Y+37, r26	; 0x25
     90c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     90e:	6b a1       	ldd	r22, Y+35	; 0x23
     910:	7c a1       	ldd	r23, Y+36	; 0x24
     912:	8d a1       	ldd	r24, Y+37	; 0x25
     914:	9e a1       	ldd	r25, Y+38	; 0x26
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e8       	ldi	r20, 0x80	; 128
     91c:	5f e3       	ldi	r21, 0x3F	; 63
     91e:	0e 94 4a 12 	call	0x2494	; 0x2494 <__ltsf2>
     922:	88 23       	and	r24, r24
     924:	2c f4       	brge	.+10     	; 0x930 <LCD_Init+0x74>
		__ticks = 1;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	9a a3       	std	Y+34, r25	; 0x22
     92c:	89 a3       	std	Y+33, r24	; 0x21
     92e:	3f c0       	rjmp	.+126    	; 0x9ae <LCD_Init+0xf2>
	else if (__tmp > 65535)
     930:	6b a1       	ldd	r22, Y+35	; 0x23
     932:	7c a1       	ldd	r23, Y+36	; 0x24
     934:	8d a1       	ldd	r24, Y+37	; 0x25
     936:	9e a1       	ldd	r25, Y+38	; 0x26
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	3f ef       	ldi	r19, 0xFF	; 255
     93c:	4f e7       	ldi	r20, 0x7F	; 127
     93e:	57 e4       	ldi	r21, 0x47	; 71
     940:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__gtsf2>
     944:	18 16       	cp	r1, r24
     946:	4c f5       	brge	.+82     	; 0x99a <LCD_Init+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     948:	6f a1       	ldd	r22, Y+39	; 0x27
     94a:	78 a5       	ldd	r23, Y+40	; 0x28
     94c:	89 a5       	ldd	r24, Y+41	; 0x29
     94e:	9a a5       	ldd	r25, Y+42	; 0x2a
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e2       	ldi	r20, 0x20	; 32
     956:	51 e4       	ldi	r21, 0x41	; 65
     958:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__mulsf3>
     95c:	dc 01       	movw	r26, r24
     95e:	cb 01       	movw	r24, r22
     960:	bc 01       	movw	r22, r24
     962:	cd 01       	movw	r24, r26
     964:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__fixunssfsi>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	9a a3       	std	Y+34, r25	; 0x22
     96e:	89 a3       	std	Y+33, r24	; 0x21
     970:	0f c0       	rjmp	.+30     	; 0x990 <LCD_Init+0xd4>
     972:	88 ec       	ldi	r24, 0xC8	; 200
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	98 a3       	std	Y+32, r25	; 0x20
     978:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     97a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     97c:	98 a1       	ldd	r25, Y+32	; 0x20
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	f1 f7       	brne	.-4      	; 0x97e <LCD_Init+0xc2>
     982:	98 a3       	std	Y+32, r25	; 0x20
     984:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     986:	89 a1       	ldd	r24, Y+33	; 0x21
     988:	9a a1       	ldd	r25, Y+34	; 0x22
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	9a a3       	std	Y+34, r25	; 0x22
     98e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     990:	89 a1       	ldd	r24, Y+33	; 0x21
     992:	9a a1       	ldd	r25, Y+34	; 0x22
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	69 f7       	brne	.-38     	; 0x972 <LCD_Init+0xb6>
     998:	14 c0       	rjmp	.+40     	; 0x9c2 <LCD_Init+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     99a:	6b a1       	ldd	r22, Y+35	; 0x23
     99c:	7c a1       	ldd	r23, Y+36	; 0x24
     99e:	8d a1       	ldd	r24, Y+37	; 0x25
     9a0:	9e a1       	ldd	r25, Y+38	; 0x26
     9a2:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__fixunssfsi>
     9a6:	dc 01       	movw	r26, r24
     9a8:	cb 01       	movw	r24, r22
     9aa:	9a a3       	std	Y+34, r25	; 0x22
     9ac:	89 a3       	std	Y+33, r24	; 0x21
     9ae:	89 a1       	ldd	r24, Y+33	; 0x21
     9b0:	9a a1       	ldd	r25, Y+34	; 0x22
     9b2:	9e 8f       	std	Y+30, r25	; 0x1e
     9b4:	8d 8f       	std	Y+29, r24	; 0x1d
     9b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <LCD_Init+0xfe>
     9be:	9e 8f       	std	Y+30, r25	; 0x1e
     9c0:	8d 8f       	std	Y+29, r24	; 0x1d

	/*
		RESET THE DISPLAY
	*/
	_delay_ms(30);
	LCD_PORT &= ~LCD_RESET_PIN; //Reset
     9c2:	a5 e3       	ldi	r26, 0x35	; 53
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e5 e3       	ldi	r30, 0x35	; 53
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	8e 7f       	andi	r24, 0xFE	; 254
     9ce:	8c 93       	st	X, r24
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a0 ef       	ldi	r26, 0xF0	; 240
     9d6:	b1 e4       	ldi	r27, 0x41	; 65
     9d8:	89 8f       	std	Y+25, r24	; 0x19
     9da:	9a 8f       	std	Y+26, r25	; 0x1a
     9dc:	ab 8f       	std	Y+27, r26	; 0x1b
     9de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9e0:	69 8d       	ldd	r22, Y+25	; 0x19
     9e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	4a ef       	ldi	r20, 0xFA	; 250
     9ee:	54 e4       	ldi	r21, 0x44	; 68
     9f0:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__mulsf3>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	8d 8b       	std	Y+21, r24	; 0x15
     9fa:	9e 8b       	std	Y+22, r25	; 0x16
     9fc:	af 8b       	std	Y+23, r26	; 0x17
     9fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a00:	6d 89       	ldd	r22, Y+21	; 0x15
     a02:	7e 89       	ldd	r23, Y+22	; 0x16
     a04:	8f 89       	ldd	r24, Y+23	; 0x17
     a06:	98 8d       	ldd	r25, Y+24	; 0x18
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e8       	ldi	r20, 0x80	; 128
     a0e:	5f e3       	ldi	r21, 0x3F	; 63
     a10:	0e 94 4a 12 	call	0x2494	; 0x2494 <__ltsf2>
     a14:	88 23       	and	r24, r24
     a16:	2c f4       	brge	.+10     	; 0xa22 <LCD_Init+0x166>
		__ticks = 1;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	9c 8b       	std	Y+20, r25	; 0x14
     a1e:	8b 8b       	std	Y+19, r24	; 0x13
     a20:	3f c0       	rjmp	.+126    	; 0xaa0 <LCD_Init+0x1e4>
	else if (__tmp > 65535)
     a22:	6d 89       	ldd	r22, Y+21	; 0x15
     a24:	7e 89       	ldd	r23, Y+22	; 0x16
     a26:	8f 89       	ldd	r24, Y+23	; 0x17
     a28:	98 8d       	ldd	r25, Y+24	; 0x18
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	3f ef       	ldi	r19, 0xFF	; 255
     a2e:	4f e7       	ldi	r20, 0x7F	; 127
     a30:	57 e4       	ldi	r21, 0x47	; 71
     a32:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__gtsf2>
     a36:	18 16       	cp	r1, r24
     a38:	4c f5       	brge	.+82     	; 0xa8c <LCD_Init+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a3a:	69 8d       	ldd	r22, Y+25	; 0x19
     a3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e2       	ldi	r20, 0x20	; 32
     a48:	51 e4       	ldi	r21, 0x41	; 65
     a4a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__mulsf3>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	bc 01       	movw	r22, r24
     a54:	cd 01       	movw	r24, r26
     a56:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__fixunssfsi>
     a5a:	dc 01       	movw	r26, r24
     a5c:	cb 01       	movw	r24, r22
     a5e:	9c 8b       	std	Y+20, r25	; 0x14
     a60:	8b 8b       	std	Y+19, r24	; 0x13
     a62:	0f c0       	rjmp	.+30     	; 0xa82 <LCD_Init+0x1c6>
     a64:	88 ec       	ldi	r24, 0xC8	; 200
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	9a 8b       	std	Y+18, r25	; 0x12
     a6a:	89 8b       	std	Y+17, r24	; 0x11
     a6c:	89 89       	ldd	r24, Y+17	; 0x11
     a6e:	9a 89       	ldd	r25, Y+18	; 0x12
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <LCD_Init+0x1b4>
     a74:	9a 8b       	std	Y+18, r25	; 0x12
     a76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a78:	8b 89       	ldd	r24, Y+19	; 0x13
     a7a:	9c 89       	ldd	r25, Y+20	; 0x14
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	9c 8b       	std	Y+20, r25	; 0x14
     a80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a82:	8b 89       	ldd	r24, Y+19	; 0x13
     a84:	9c 89       	ldd	r25, Y+20	; 0x14
     a86:	00 97       	sbiw	r24, 0x00	; 0
     a88:	69 f7       	brne	.-38     	; 0xa64 <LCD_Init+0x1a8>
     a8a:	14 c0       	rjmp	.+40     	; 0xab4 <LCD_Init+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a8c:	6d 89       	ldd	r22, Y+21	; 0x15
     a8e:	7e 89       	ldd	r23, Y+22	; 0x16
     a90:	8f 89       	ldd	r24, Y+23	; 0x17
     a92:	98 8d       	ldd	r25, Y+24	; 0x18
     a94:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__fixunssfsi>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	9c 8b       	std	Y+20, r25	; 0x14
     a9e:	8b 8b       	std	Y+19, r24	; 0x13
     aa0:	8b 89       	ldd	r24, Y+19	; 0x13
     aa2:	9c 89       	ldd	r25, Y+20	; 0x14
     aa4:	98 8b       	std	Y+16, r25	; 0x10
     aa6:	8f 87       	std	Y+15, r24	; 0x0f
     aa8:	8f 85       	ldd	r24, Y+15	; 0x0f
     aaa:	98 89       	ldd	r25, Y+16	; 0x10
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	f1 f7       	brne	.-4      	; 0xaac <LCD_Init+0x1f0>
     ab0:	98 8b       	std	Y+16, r25	; 0x10
     ab2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	LCD_PORT |= LCD_RESET_PIN;  //Disable Reset
     ab4:	a5 e3       	ldi	r26, 0x35	; 53
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e5 e3       	ldi	r30, 0x35	; 53
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	8c 93       	st	X, r24
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a0 ef       	ldi	r26, 0xF0	; 240
     ac8:	b1 e4       	ldi	r27, 0x41	; 65
     aca:	8b 87       	std	Y+11, r24	; 0x0b
     acc:	9c 87       	std	Y+12, r25	; 0x0c
     ace:	ad 87       	std	Y+13, r26	; 0x0d
     ad0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	4a ef       	ldi	r20, 0xFA	; 250
     ae0:	54 e4       	ldi	r21, 0x44	; 68
     ae2:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__mulsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	8f 83       	std	Y+7, r24	; 0x07
     aec:	98 87       	std	Y+8, r25	; 0x08
     aee:	a9 87       	std	Y+9, r26	; 0x09
     af0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     af2:	6f 81       	ldd	r22, Y+7	; 0x07
     af4:	78 85       	ldd	r23, Y+8	; 0x08
     af6:	89 85       	ldd	r24, Y+9	; 0x09
     af8:	9a 85       	ldd	r25, Y+10	; 0x0a
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e8       	ldi	r20, 0x80	; 128
     b00:	5f e3       	ldi	r21, 0x3F	; 63
     b02:	0e 94 4a 12 	call	0x2494	; 0x2494 <__ltsf2>
     b06:	88 23       	and	r24, r24
     b08:	2c f4       	brge	.+10     	; 0xb14 <LCD_Init+0x258>
		__ticks = 1;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	9e 83       	std	Y+6, r25	; 0x06
     b10:	8d 83       	std	Y+5, r24	; 0x05
     b12:	3f c0       	rjmp	.+126    	; 0xb92 <LCD_Init+0x2d6>
	else if (__tmp > 65535)
     b14:	6f 81       	ldd	r22, Y+7	; 0x07
     b16:	78 85       	ldd	r23, Y+8	; 0x08
     b18:	89 85       	ldd	r24, Y+9	; 0x09
     b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	3f ef       	ldi	r19, 0xFF	; 255
     b20:	4f e7       	ldi	r20, 0x7F	; 127
     b22:	57 e4       	ldi	r21, 0x47	; 71
     b24:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__gtsf2>
     b28:	18 16       	cp	r1, r24
     b2a:	4c f5       	brge	.+82     	; 0xb7e <LCD_Init+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b30:	8d 85       	ldd	r24, Y+13	; 0x0d
     b32:	9e 85       	ldd	r25, Y+14	; 0x0e
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e2       	ldi	r20, 0x20	; 32
     b3a:	51 e4       	ldi	r21, 0x41	; 65
     b3c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__mulsf3>
     b40:	dc 01       	movw	r26, r24
     b42:	cb 01       	movw	r24, r22
     b44:	bc 01       	movw	r22, r24
     b46:	cd 01       	movw	r24, r26
     b48:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__fixunssfsi>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	9e 83       	std	Y+6, r25	; 0x06
     b52:	8d 83       	std	Y+5, r24	; 0x05
     b54:	0f c0       	rjmp	.+30     	; 0xb74 <LCD_Init+0x2b8>
     b56:	88 ec       	ldi	r24, 0xC8	; 200
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	9c 83       	std	Y+4, r25	; 0x04
     b5c:	8b 83       	std	Y+3, r24	; 0x03
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <LCD_Init+0x2a6>
     b66:	9c 83       	std	Y+4, r25	; 0x04
     b68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	9e 81       	ldd	r25, Y+6	; 0x06
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	9e 83       	std	Y+6, r25	; 0x06
     b72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b74:	8d 81       	ldd	r24, Y+5	; 0x05
     b76:	9e 81       	ldd	r25, Y+6	; 0x06
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	69 f7       	brne	.-38     	; 0xb56 <LCD_Init+0x29a>
     b7c:	14 c0       	rjmp	.+40     	; 0xba6 <LCD_Init+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7e:	6f 81       	ldd	r22, Y+7	; 0x07
     b80:	78 85       	ldd	r23, Y+8	; 0x08
     b82:	89 85       	ldd	r24, Y+9	; 0x09
     b84:	9a 85       	ldd	r25, Y+10	; 0x0a
     b86:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__fixunssfsi>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	9e 83       	std	Y+6, r25	; 0x06
     b90:	8d 83       	std	Y+5, r24	; 0x05
     b92:	8d 81       	ldd	r24, Y+5	; 0x05
     b94:	9e 81       	ldd	r25, Y+6	; 0x06
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	9a 81       	ldd	r25, Y+2	; 0x02
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <LCD_Init+0x2e2>
     ba2:	9a 83       	std	Y+2, r25	; 0x02
     ba4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

	sendData(0xEB, CMD); // LCD-Bias
     ba6:	8b ee       	ldi	r24, 0xEB	; 235
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>
	sendData(0x23, CMD); // 64 rows
     bae:	83 e2       	ldi	r24, 0x23	; 35
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>
	sendData(0x81, CMD); // Potentiometer
     bb6:	81 e8       	ldi	r24, 0x81	; 129
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>
	sendData(0x64, CMD); // Contrast
     bbe:	84 e6       	ldi	r24, 0x64	; 100
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>
	sendData(0xAF, CMD); // Enable display
     bc6:	8f ea       	ldi	r24, 0xAF	; 175
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>
	sendData(0xCC, CMD); // RAM Mapping
     bce:	8c ec       	ldi	r24, 0xCC	; 204
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>

	if(FLAGS & FLAG_INVERTED) sendData(0xA7, CMD); // Inversion
     bd6:	80 91 90 02 	lds	r24, 0x0290
     bda:	88 2f       	mov	r24, r24
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	82 70       	andi	r24, 0x02	; 2
     be0:	90 70       	andi	r25, 0x00	; 0
     be2:	00 97       	sbiw	r24, 0x00	; 0
     be4:	21 f0       	breq	.+8      	; 0xbee <LCD_Init+0x332>
     be6:	87 ea       	ldi	r24, 0xA7	; 167
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>

	LCD_Clear(); // Clear the buffer
     bee:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_Clear>
	LCD_Display(); // Send the clear buffer to display
     bf2:	0e 94 34 0b 	call	0x1668	; 0x1668 <LCD_Display>
}
     bf6:	aa 96       	adiw	r28, 0x2a	; 42
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <LCD_Init_With_Flags>:

void LCD_Init_With_Flags(char flags)
{
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	0f 92       	push	r0
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	89 83       	std	Y+1, r24	; 0x01
	LCD_SetFlags(flags);
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCD_SetFlags>
	LCD_Init();
     c1a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_Init>
}
     c1e:	0f 90       	pop	r0
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	08 95       	ret

00000c26 <sendData>:
	sendData(uchar CD, uchar DATA)
	CD = Command/Data (0 = Command, 1 = Data)
	DATA = 8 bits of data
*/
void sendData(unsigned char data, unsigned char CD)
{
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <sendData+0x6>
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <sendData+0x8>
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <sendData+0xa>
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	8d 83       	std	Y+5, r24	; 0x05
     c36:	6e 83       	std	Y+6, r22	; 0x06
	int j;

	// Enable display controller (LOW active)
	LCD_PORT &= ~LCD_SCE_PIN;
     c38:	a5 e3       	ldi	r26, 0x35	; 53
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e5 e3       	ldi	r30, 0x35	; 53
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	8d 7f       	andi	r24, 0xFD	; 253
     c44:	8c 93       	st	X, r24

	if(CD == 1) LCD_PORT |=  LCD_CD_PIN; // Data
     c46:	8e 81       	ldd	r24, Y+6	; 0x06
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	41 f4       	brne	.+16     	; 0xc5c <sendData+0x36>
     c4c:	a5 e3       	ldi	r26, 0x35	; 53
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e5 e3       	ldi	r30, 0x35	; 53
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	84 60       	ori	r24, 0x04	; 4
     c58:	8c 93       	st	X, r24
     c5a:	07 c0       	rjmp	.+14     	; 0xc6a <sendData+0x44>
	else        LCD_PORT &= ~LCD_CD_PIN; // Command
     c5c:	a5 e3       	ldi	r26, 0x35	; 53
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e5 e3       	ldi	r30, 0x35	; 53
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	8b 7f       	andi	r24, 0xFB	; 251
     c68:	8c 93       	st	X, r24

	for(int i = 0;i < 8;i++) // Send all the bits to driver
     c6a:	1a 82       	std	Y+2, r1	; 0x02
     c6c:	19 82       	std	Y+1, r1	; 0x01
     c6e:	45 c0       	rjmp	.+138    	; 0xcfa <sendData+0xd4>
	{
		if((data >> (7 - i)) & 1)     LCD_PORT |=  LCD_DATA_PIN; // If the data is 1
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	48 2f       	mov	r20, r24
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	27 e0       	ldi	r18, 0x07	; 7
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	b9 01       	movw	r22, r18
     c80:	68 1b       	sub	r22, r24
     c82:	79 0b       	sbc	r23, r25
     c84:	cb 01       	movw	r24, r22
     c86:	9a 01       	movw	r18, r20
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <sendData+0x68>
     c8a:	35 95       	asr	r19
     c8c:	27 95       	ror	r18
     c8e:	8a 95       	dec	r24
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <sendData+0x64>
     c92:	c9 01       	movw	r24, r18
     c94:	81 70       	andi	r24, 0x01	; 1
     c96:	90 70       	andi	r25, 0x00	; 0
     c98:	88 23       	and	r24, r24
     c9a:	41 f0       	breq	.+16     	; 0xcac <sendData+0x86>
     c9c:	a5 e3       	ldi	r26, 0x35	; 53
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e5 e3       	ldi	r30, 0x35	; 53
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	88 60       	ori	r24, 0x08	; 8
     ca8:	8c 93       	st	X, r24
     caa:	07 c0       	rjmp	.+14     	; 0xcba <sendData+0x94>
		else                      LCD_PORT &= ~LCD_DATA_PIN; // If the data is 0
     cac:	a5 e3       	ldi	r26, 0x35	; 53
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e5 e3       	ldi	r30, 0x35	; 53
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	87 7f       	andi	r24, 0xF7	; 247
     cb8:	8c 93       	st	X, r24
		// Toggle clock pin
		LCD_PORT |= LCD_CLK_PIN; 
     cba:	a5 e3       	ldi	r26, 0x35	; 53
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e5 e3       	ldi	r30, 0x35	; 53
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	80 61       	ori	r24, 0x10	; 16
     cc6:	8c 93       	st	X, r24
		for(j = 0;j < 4;j++);
     cc8:	1c 82       	std	Y+4, r1	; 0x04
     cca:	1b 82       	std	Y+3, r1	; 0x03
     ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <sendData+0xb2>
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	9c 83       	std	Y+4, r25	; 0x04
     cd6:	8b 83       	std	Y+3, r24	; 0x03
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	84 30       	cpi	r24, 0x04	; 4
     cde:	91 05       	cpc	r25, r1
     ce0:	b4 f3       	brlt	.-20     	; 0xcce <sendData+0xa8>
		LCD_PORT &= ~LCD_CLK_PIN;
     ce2:	a5 e3       	ldi	r26, 0x35	; 53
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e3       	ldi	r30, 0x35	; 53
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8f 7e       	andi	r24, 0xEF	; 239
     cee:	8c 93       	st	X, r24
	LCD_PORT &= ~LCD_SCE_PIN;

	if(CD == 1) LCD_PORT |=  LCD_CD_PIN; // Data
	else        LCD_PORT &= ~LCD_CD_PIN; // Command

	for(int i = 0;i < 8;i++) // Send all the bits to driver
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	88 30       	cpi	r24, 0x08	; 8
     d00:	91 05       	cpc	r25, r1
     d02:	0c f4       	brge	.+2      	; 0xd06 <sendData+0xe0>
     d04:	b5 cf       	rjmp	.-150    	; 0xc70 <sendData+0x4a>
		for(j = 0;j < 4;j++);
		LCD_PORT &= ~LCD_CLK_PIN;
	}

	// Disable display controller (LOW active)
	LCD_PORT |= LCD_SCE_PIN;
     d06:	a5 e3       	ldi	r26, 0x35	; 53
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e5 e3       	ldi	r30, 0x35	; 53
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	82 60       	ori	r24, 0x02	; 2
     d12:	8c 93       	st	X, r24
}
     d14:	26 96       	adiw	r28, 0x06	; 6
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <LCD_Test>:

void LCD_Test()
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	sendData(0xA5, CMD);
     d2e:	85 ea       	ldi	r24, 0xA5	; 165
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <LCD_Invert>:

void LCD_Invert()
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
	if(FLAGS & FLAG_INVERTED) FLAGS &= ~(1 << FLAG_INVERTED);
     d46:	80 91 90 02 	lds	r24, 0x0290
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	82 70       	andi	r24, 0x02	; 2
     d50:	90 70       	andi	r25, 0x00	; 0
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	31 f0       	breq	.+12     	; 0xd62 <LCD_Invert+0x26>
     d56:	80 91 90 02 	lds	r24, 0x0290
     d5a:	8b 7f       	andi	r24, 0xFB	; 251
     d5c:	80 93 90 02 	sts	0x0290, r24
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <LCD_Invert+0x30>
	else FLAGS |= FLAG_INVERTED;
     d62:	80 91 90 02 	lds	r24, 0x0290
     d66:	82 60       	ori	r24, 0x02	; 2
     d68:	80 93 90 02 	sts	0x0290, r24
	sendData(0xA6 + ((FLAGS & FLAG_INVERTED) > 0 ? 1 : 0), CMD);
     d6c:	80 91 90 02 	lds	r24, 0x0290
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	82 70       	andi	r24, 0x02	; 2
     d76:	90 70       	andi	r25, 0x00	; 0
     d78:	18 16       	cp	r1, r24
     d7a:	19 06       	cpc	r1, r25
     d7c:	1c f4       	brge	.+6      	; 0xd84 <LCD_Invert+0x48>
     d7e:	87 ea       	ldi	r24, 0xA7	; 167
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <LCD_Invert+0x4c>
     d84:	86 ea       	ldi	r24, 0xA6	; 166
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>
}
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <LCD_DrawPixel>:

void LCD_DrawPixel(unsigned char x, unsigned char y)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <LCD_DrawPixel+0x6>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <LCD_DrawPixel+0x8>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	8b 83       	std	Y+3, r24	; 0x03
     da6:	6c 83       	std	Y+4, r22	; 0x04
	if((FLAGS & FLAG_LANDSCAPE) == 0)
     da8:	80 91 90 02 	lds	r24, 0x0290
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	81 70       	andi	r24, 0x01	; 1
     db2:	90 70       	andi	r25, 0x00	; 0
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	09 f0       	breq	.+2      	; 0xdba <LCD_DrawPixel+0x22>
     db8:	43 c0       	rjmp	.+134    	; 0xe40 <LCD_DrawPixel+0xa8>
	{
		if(x >= WIDTH || y >= HEIGHT) return;
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	80 34       	cpi	r24, 0x40	; 64
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <LCD_DrawPixel+0x2a>
     dc0:	85 c0       	rjmp	.+266    	; 0xecc <LCD_DrawPixel+0x134>
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	88 23       	and	r24, r24
     dc6:	0c f4       	brge	.+2      	; 0xdca <LCD_DrawPixel+0x32>
     dc8:	81 c0       	rjmp	.+258    	; 0xecc <LCD_DrawPixel+0x134>
		buffer[(x / 8) * 128 + y] |= (1 << (7 - x % 8));
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	48 2f       	mov	r20, r24
     dce:	46 95       	lsr	r20
     dd0:	46 95       	lsr	r20
     dd2:	46 95       	lsr	r20
     dd4:	84 2f       	mov	r24, r20
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9c 01       	movw	r18, r24
     dda:	36 95       	lsr	r19
     ddc:	32 2f       	mov	r19, r18
     dde:	22 27       	eor	r18, r18
     de0:	37 95       	ror	r19
     de2:	27 95       	ror	r18
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	b9 01       	movw	r22, r18
     dec:	68 0f       	add	r22, r24
     dee:	79 1f       	adc	r23, r25
     df0:	84 2f       	mov	r24, r20
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	9c 01       	movw	r18, r24
     df6:	36 95       	lsr	r19
     df8:	32 2f       	mov	r19, r18
     dfa:	22 27       	eor	r18, r18
     dfc:	37 95       	ror	r19
     dfe:	27 95       	ror	r18
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	fc 01       	movw	r30, r24
     e0c:	e8 56       	subi	r30, 0x68	; 104
     e0e:	f9 4f       	sbci	r31, 0xF9	; 249
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	80 95       	com	r24
     e1c:	90 95       	com	r25
     e1e:	9c 01       	movw	r18, r24
     e20:	27 70       	andi	r18, 0x07	; 7
     e22:	30 70       	andi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <LCD_DrawPixel+0x98>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <LCD_DrawPixel+0x94>
     e34:	84 2b       	or	r24, r20
     e36:	fb 01       	movw	r30, r22
     e38:	e8 56       	subi	r30, 0x68	; 104
     e3a:	f9 4f       	sbci	r31, 0xF9	; 249
     e3c:	80 83       	st	Z, r24
     e3e:	46 c0       	rjmp	.+140    	; 0xecc <LCD_DrawPixel+0x134>
	}
	else
	{
		unsigned char tempX = x;
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char tempY = y;
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	89 83       	std	Y+1, r24	; 0x01
		x = tempY;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	8b 83       	std	Y+3, r24	; 0x03
		y = (HEIGHT - 1) - tempX;
     e4c:	9f e7       	ldi	r25, 0x7F	; 127
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	29 2f       	mov	r18, r25
     e52:	28 1b       	sub	r18, r24
     e54:	82 2f       	mov	r24, r18
     e56:	8c 83       	std	Y+4, r24	; 0x04
		buffer[(x / 8) * 128 + y] |= (1 << (7 - x % 8));
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	48 2f       	mov	r20, r24
     e5c:	46 95       	lsr	r20
     e5e:	46 95       	lsr	r20
     e60:	46 95       	lsr	r20
     e62:	84 2f       	mov	r24, r20
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9c 01       	movw	r18, r24
     e68:	36 95       	lsr	r19
     e6a:	32 2f       	mov	r19, r18
     e6c:	22 27       	eor	r18, r18
     e6e:	37 95       	ror	r19
     e70:	27 95       	ror	r18
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	b9 01       	movw	r22, r18
     e7a:	68 0f       	add	r22, r24
     e7c:	79 1f       	adc	r23, r25
     e7e:	84 2f       	mov	r24, r20
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9c 01       	movw	r18, r24
     e84:	36 95       	lsr	r19
     e86:	32 2f       	mov	r19, r18
     e88:	22 27       	eor	r18, r18
     e8a:	37 95       	ror	r19
     e8c:	27 95       	ror	r18
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	82 0f       	add	r24, r18
     e96:	93 1f       	adc	r25, r19
     e98:	fc 01       	movw	r30, r24
     e9a:	e8 56       	subi	r30, 0x68	; 104
     e9c:	f9 4f       	sbci	r31, 0xF9	; 249
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	80 95       	com	r24
     eaa:	90 95       	com	r25
     eac:	9c 01       	movw	r18, r24
     eae:	27 70       	andi	r18, 0x07	; 7
     eb0:	30 70       	andi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <LCD_DrawPixel+0x126>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <LCD_DrawPixel+0x122>
     ec2:	84 2b       	or	r24, r20
     ec4:	fb 01       	movw	r30, r22
     ec6:	e8 56       	subi	r30, 0x68	; 104
     ec8:	f9 4f       	sbci	r31, 0xF9	; 249
     eca:	80 83       	st	Z, r24
	}
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <LCD_ClearPixel>:

void LCD_ClearPixel(unsigned char x, unsigned char y)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <LCD_ClearPixel+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <LCD_ClearPixel+0x8>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	8b 83       	std	Y+3, r24	; 0x03
     ee8:	6c 83       	std	Y+4, r22	; 0x04
	if((FLAGS & FLAG_LANDSCAPE) == 0)
     eea:	80 91 90 02 	lds	r24, 0x0290
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	81 70       	andi	r24, 0x01	; 1
     ef4:	90 70       	andi	r25, 0x00	; 0
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	09 f0       	breq	.+2      	; 0xefc <LCD_ClearPixel+0x22>
     efa:	44 c0       	rjmp	.+136    	; 0xf84 <LCD_ClearPixel+0xaa>
	{
		if(x >= WIDTH || y >= HEIGHT) return;
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	80 34       	cpi	r24, 0x40	; 64
     f00:	08 f0       	brcs	.+2      	; 0xf04 <LCD_ClearPixel+0x2a>
     f02:	87 c0       	rjmp	.+270    	; 0x1012 <LCD_ClearPixel+0x138>
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	88 23       	and	r24, r24
     f08:	0c f4       	brge	.+2      	; 0xf0c <LCD_ClearPixel+0x32>
     f0a:	83 c0       	rjmp	.+262    	; 0x1012 <LCD_ClearPixel+0x138>
		buffer[(x / 8) * 128 + y] &= ~(1 << (7 - x % 8));
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	48 2f       	mov	r20, r24
     f10:	46 95       	lsr	r20
     f12:	46 95       	lsr	r20
     f14:	46 95       	lsr	r20
     f16:	84 2f       	mov	r24, r20
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9c 01       	movw	r18, r24
     f1c:	36 95       	lsr	r19
     f1e:	32 2f       	mov	r19, r18
     f20:	22 27       	eor	r18, r18
     f22:	37 95       	ror	r19
     f24:	27 95       	ror	r18
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	b9 01       	movw	r22, r18
     f2e:	68 0f       	add	r22, r24
     f30:	79 1f       	adc	r23, r25
     f32:	84 2f       	mov	r24, r20
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9c 01       	movw	r18, r24
     f38:	36 95       	lsr	r19
     f3a:	32 2f       	mov	r19, r18
     f3c:	22 27       	eor	r18, r18
     f3e:	37 95       	ror	r19
     f40:	27 95       	ror	r18
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	82 0f       	add	r24, r18
     f4a:	93 1f       	adc	r25, r19
     f4c:	fc 01       	movw	r30, r24
     f4e:	e8 56       	subi	r30, 0x68	; 104
     f50:	f9 4f       	sbci	r31, 0xF9	; 249
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	80 95       	com	r24
     f5e:	90 95       	com	r25
     f60:	9c 01       	movw	r18, r24
     f62:	27 70       	andi	r18, 0x07	; 7
     f64:	30 70       	andi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <LCD_ClearPixel+0x98>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <LCD_ClearPixel+0x94>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	fb 01       	movw	r30, r22
     f7c:	e8 56       	subi	r30, 0x68	; 104
     f7e:	f9 4f       	sbci	r31, 0xF9	; 249
     f80:	80 83       	st	Z, r24
     f82:	47 c0       	rjmp	.+142    	; 0x1012 <LCD_ClearPixel+0x138>
	}
	else
	{
		unsigned char tempX = x;
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char tempY = y;
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	89 83       	std	Y+1, r24	; 0x01
		x = tempY;
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	8b 83       	std	Y+3, r24	; 0x03
		y = (HEIGHT - 1) - tempX;
     f90:	9f e7       	ldi	r25, 0x7F	; 127
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	29 2f       	mov	r18, r25
     f96:	28 1b       	sub	r18, r24
     f98:	82 2f       	mov	r24, r18
     f9a:	8c 83       	std	Y+4, r24	; 0x04
		buffer[(x / 8) * 128 + y] &= ~(1 << (7 - x % 8));
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	48 2f       	mov	r20, r24
     fa0:	46 95       	lsr	r20
     fa2:	46 95       	lsr	r20
     fa4:	46 95       	lsr	r20
     fa6:	84 2f       	mov	r24, r20
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	9c 01       	movw	r18, r24
     fac:	36 95       	lsr	r19
     fae:	32 2f       	mov	r19, r18
     fb0:	22 27       	eor	r18, r18
     fb2:	37 95       	ror	r19
     fb4:	27 95       	ror	r18
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	b9 01       	movw	r22, r18
     fbe:	68 0f       	add	r22, r24
     fc0:	79 1f       	adc	r23, r25
     fc2:	84 2f       	mov	r24, r20
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9c 01       	movw	r18, r24
     fc8:	36 95       	lsr	r19
     fca:	32 2f       	mov	r19, r18
     fcc:	22 27       	eor	r18, r18
     fce:	37 95       	ror	r19
     fd0:	27 95       	ror	r18
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	82 0f       	add	r24, r18
     fda:	93 1f       	adc	r25, r19
     fdc:	fc 01       	movw	r30, r24
     fde:	e8 56       	subi	r30, 0x68	; 104
     fe0:	f9 4f       	sbci	r31, 0xF9	; 249
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	80 95       	com	r24
     fee:	90 95       	com	r25
     ff0:	9c 01       	movw	r18, r24
     ff2:	27 70       	andi	r18, 0x07	; 7
     ff4:	30 70       	andi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <LCD_ClearPixel+0x128>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <LCD_ClearPixel+0x124>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	fb 01       	movw	r30, r22
    100c:	e8 56       	subi	r30, 0x68	; 104
    100e:	f9 4f       	sbci	r31, 0xF9	; 249
    1010:	80 83       	st	Z, r24
	}
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <LCD_Clear>:

void LCD_Clear()
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	memset(buffer, 0, sizeof(buffer));
    1028:	88 e9       	ldi	r24, 0x98	; 152
    102a:	96 e0       	ldi	r25, 0x06	; 6
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	54 e0       	ldi	r21, 0x04	; 4
    1034:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <memset>
}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <LCD_ClearArea>:

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <LCD_ClearArea+0x6>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <LCD_ClearArea+0x8>
    1046:	00 d0       	rcall	.+0      	; 0x1048 <LCD_ClearArea+0xa>
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	8b 83       	std	Y+3, r24	; 0x03
    104e:	6c 83       	std	Y+4, r22	; 0x04
    1050:	4d 83       	std	Y+5, r20	; 0x05
    1052:	2e 83       	std	Y+6, r18	; 0x06
	for(char y = y0;y < y1;y++)
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	8a 83       	std	Y+2, r24	; 0x02
    1058:	11 c0       	rjmp	.+34     	; 0x107c <LCD_ClearArea+0x3e>
	{
		for(char x = x0;x < x1;x++)
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	07 c0       	rjmp	.+14     	; 0x106e <LCD_ClearArea+0x30>
		{
			LCD_ClearPixel(x, y);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	6a 81       	ldd	r22, Y+2	; 0x02
    1064:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_ClearPixel>

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(char y = y0;y < y1;y++)
	{
		for(char x = x0;x < x1;x++)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	99 81       	ldd	r25, Y+1	; 0x01
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	98 17       	cp	r25, r24
    1074:	a8 f3       	brcs	.-22     	; 0x1060 <LCD_ClearArea+0x22>
	memset(buffer, 0, sizeof(buffer));
}

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(char y = y0;y < y1;y++)
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	8a 83       	std	Y+2, r24	; 0x02
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	8e 81       	ldd	r24, Y+6	; 0x06
    1080:	98 17       	cp	r25, r24
    1082:	58 f3       	brcs	.-42     	; 0x105a <LCD_ClearArea+0x1c>
		for(char x = x0;x < x1;x++)
		{
			LCD_ClearPixel(x, y);
		}
	}
}
    1084:	26 96       	adiw	r28, 0x06	; 6
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <LCD_DrawRect>:

void LCD_DrawRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	00 d0       	rcall	.+0      	; 0x109c <LCD_DrawRect+0x6>
    109c:	00 d0       	rcall	.+0      	; 0x109e <LCD_DrawRect+0x8>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <LCD_DrawRect+0xa>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	8b 83       	std	Y+3, r24	; 0x03
    10a6:	6c 83       	std	Y+4, r22	; 0x04
    10a8:	4d 83       	std	Y+5, r20	; 0x05
    10aa:	2e 83       	std	Y+6, r18	; 0x06
	for(unsigned char x = x0;x <= x1;x++)
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	0b c0       	rjmp	.+22     	; 0x10c8 <LCD_DrawRect+0x32>
	{
		LCD_DrawPixel(x, y0);
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	6c 81       	ldd	r22, Y+4	; 0x04
    10b6:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_DrawPixel>
		LCD_DrawPixel(x, y1);
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	6e 81       	ldd	r22, Y+6	; 0x06
    10be:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_DrawPixel>
	}
}

void LCD_DrawRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(unsigned char x = x0;x <= x1;x++)
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
    10c6:	8a 83       	std	Y+2, r24	; 0x02
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	89 17       	cp	r24, r25
    10ce:	88 f7       	brcc	.-30     	; 0x10b2 <LCD_DrawRect+0x1c>
	{
		LCD_DrawPixel(x, y0);
		LCD_DrawPixel(x, y1);
	}
	for(unsigned char y = y0;y <= y1;y++)
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	0b c0       	rjmp	.+22     	; 0x10ec <LCD_DrawRect+0x56>
	{
		LCD_DrawPixel(x0, y);
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	69 81       	ldd	r22, Y+1	; 0x01
    10da:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_DrawPixel>
		LCD_DrawPixel(x1, y);
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	69 81       	ldd	r22, Y+1	; 0x01
    10e2:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_DrawPixel>
	for(unsigned char x = x0;x <= x1;x++)
	{
		LCD_DrawPixel(x, y0);
		LCD_DrawPixel(x, y1);
	}
	for(unsigned char y = y0;y <= y1;y++)
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	8f 5f       	subi	r24, 0xFF	; 255
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	99 81       	ldd	r25, Y+1	; 0x01
    10ee:	8e 81       	ldd	r24, Y+6	; 0x06
    10f0:	89 17       	cp	r24, r25
    10f2:	88 f7       	brcc	.-30     	; 0x10d6 <LCD_DrawRect+0x40>
	{
		LCD_DrawPixel(x0, y);
		LCD_DrawPixel(x1, y);
	}
}
    10f4:	26 96       	adiw	r28, 0x06	; 6
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <LCD_FillRect>:

void LCD_FillRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	00 d0       	rcall	.+0      	; 0x110c <LCD_FillRect+0x6>
    110c:	00 d0       	rcall	.+0      	; 0x110e <LCD_FillRect+0x8>
    110e:	00 d0       	rcall	.+0      	; 0x1110 <LCD_FillRect+0xa>
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	6c 83       	std	Y+4, r22	; 0x04
    1118:	4d 83       	std	Y+5, r20	; 0x05
    111a:	2e 83       	std	Y+6, r18	; 0x06
	if(x0 > x1)flip(&x0, &x1);
    111c:	9b 81       	ldd	r25, Y+3	; 0x03
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
    1120:	89 17       	cp	r24, r25
    1122:	40 f4       	brcc	.+16     	; 0x1134 <LCD_FillRect+0x2e>
    1124:	ce 01       	movw	r24, r28
    1126:	03 96       	adiw	r24, 0x03	; 3
    1128:	9e 01       	movw	r18, r28
    112a:	2b 5f       	subi	r18, 0xFB	; 251
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	b9 01       	movw	r22, r18
    1130:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <flip>
	if(y0 > y1)flip(&y0, &y1);
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	8e 81       	ldd	r24, Y+6	; 0x06
    1138:	89 17       	cp	r24, r25
    113a:	40 f4       	brcc	.+16     	; 0x114c <LCD_FillRect+0x46>
    113c:	ce 01       	movw	r24, r28
    113e:	04 96       	adiw	r24, 0x04	; 4
    1140:	9e 01       	movw	r18, r28
    1142:	2a 5f       	subi	r18, 0xFA	; 250
    1144:	3f 4f       	sbci	r19, 0xFF	; 255
    1146:	b9 01       	movw	r22, r18
    1148:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <flip>
	for(unsigned char x = x0;x <= x1;x++)
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	8a 83       	std	Y+2, r24	; 0x02
    1150:	11 c0       	rjmp	.+34     	; 0x1174 <LCD_FillRect+0x6e>
	{
		for(unsigned char y = y0;y <= y1;y++)
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	07 c0       	rjmp	.+14     	; 0x1166 <LCD_FillRect+0x60>
		{
			LCD_DrawPixel(x, y);
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	69 81       	ldd	r22, Y+1	; 0x01
    115c:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_DrawPixel>
{
	if(x0 > x1)flip(&x0, &x1);
	if(y0 > y1)flip(&y0, &y1);
	for(unsigned char x = x0;x <= x1;x++)
	{
		for(unsigned char y = y0;y <= y1;y++)
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	8f 5f       	subi	r24, 0xFF	; 255
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	98 17       	cp	r25, r24
    116c:	a8 f7       	brcc	.-22     	; 0x1158 <LCD_FillRect+0x52>

void LCD_FillRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	if(x0 > x1)flip(&x0, &x1);
	if(y0 > y1)flip(&y0, &y1);
	for(unsigned char x = x0;x <= x1;x++)
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	8f 5f       	subi	r24, 0xFF	; 255
    1172:	8a 83       	std	Y+2, r24	; 0x02
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	98 17       	cp	r25, r24
    117a:	58 f7       	brcc	.-42     	; 0x1152 <LCD_FillRect+0x4c>
		for(unsigned char y = y0;y <= y1;y++)
		{
			LCD_DrawPixel(x, y);
		}
	}
}
    117c:	26 96       	adiw	r28, 0x06	; 6
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <LCD_DrawLine>:

void LCD_DrawLine(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	6a 97       	sbiw	r28, 0x1a	; 26
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	8d 87       	std	Y+13, r24	; 0x0d
    11a4:	6e 87       	std	Y+14, r22	; 0x0e
    11a6:	4f 87       	std	Y+15, r20	; 0x0f
    11a8:	28 8b       	std	Y+16, r18	; 0x10
	int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
    11aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a9 01       	movw	r20, r18
    11b8:	48 1b       	sub	r20, r24
    11ba:	59 0b       	sbc	r21, r25
    11bc:	ca 01       	movw	r24, r20
    11be:	9c 87       	std	Y+12, r25	; 0x0c
    11c0:	8b 87       	std	Y+11, r24	; 0x0b
    11c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    11c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    11c6:	99 23       	and	r25, r25
    11c8:	3c f4       	brge	.+14     	; 0x11d8 <LCD_DrawLine+0x4a>
    11ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    11cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ce:	90 95       	com	r25
    11d0:	81 95       	neg	r24
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	9c 87       	std	Y+12, r25	; 0x0c
    11d6:	8b 87       	std	Y+11, r24	; 0x0b
    11d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    11da:	8f 85       	ldd	r24, Y+15	; 0x0f
    11dc:	98 17       	cp	r25, r24
    11de:	28 f4       	brcc	.+10     	; 0x11ea <LCD_DrawLine+0x5c>
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9e 8b       	std	Y+22, r25	; 0x16
    11e6:	8d 8b       	std	Y+21, r24	; 0x15
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <LCD_DrawLine+0x64>
    11ea:	4f ef       	ldi	r20, 0xFF	; 255
    11ec:	5f ef       	ldi	r21, 0xFF	; 255
    11ee:	5e 8b       	std	Y+22, r21	; 0x16
    11f0:	4d 8b       	std	Y+21, r20	; 0x15
    11f2:	8d 89       	ldd	r24, Y+21	; 0x15
    11f4:	9e 89       	ldd	r25, Y+22	; 0x16
    11f6:	9a 87       	std	Y+10, r25	; 0x0a
    11f8:	89 87       	std	Y+9, r24	; 0x09
	int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1; 
    11fa:	88 89       	ldd	r24, Y+16	; 0x10
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8e 85       	ldd	r24, Y+14	; 0x0e
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	48 1b       	sub	r20, r24
    120a:	59 0b       	sbc	r21, r25
    120c:	ca 01       	movw	r24, r20
    120e:	98 87       	std	Y+8, r25	; 0x08
    1210:	8f 83       	std	Y+7, r24	; 0x07
    1212:	8f 81       	ldd	r24, Y+7	; 0x07
    1214:	98 85       	ldd	r25, Y+8	; 0x08
    1216:	99 23       	and	r25, r25
    1218:	3c f4       	brge	.+14     	; 0x1228 <LCD_DrawLine+0x9a>
    121a:	8f 81       	ldd	r24, Y+7	; 0x07
    121c:	98 85       	ldd	r25, Y+8	; 0x08
    121e:	90 95       	com	r25
    1220:	81 95       	neg	r24
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	98 87       	std	Y+8, r25	; 0x08
    1226:	8f 83       	std	Y+7, r24	; 0x07
    1228:	9e 85       	ldd	r25, Y+14	; 0x0e
    122a:	88 89       	ldd	r24, Y+16	; 0x10
    122c:	98 17       	cp	r25, r24
    122e:	28 f4       	brcc	.+10     	; 0x123a <LCD_DrawLine+0xac>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9c 8b       	std	Y+20, r25	; 0x14
    1236:	8b 8b       	std	Y+19, r24	; 0x13
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <LCD_DrawLine+0xb4>
    123a:	4f ef       	ldi	r20, 0xFF	; 255
    123c:	5f ef       	ldi	r21, 0xFF	; 255
    123e:	5c 8b       	std	Y+20, r21	; 0x14
    1240:	4b 8b       	std	Y+19, r20	; 0x13
    1242:	8b 89       	ldd	r24, Y+19	; 0x13
    1244:	9c 89       	ldd	r25, Y+20	; 0x14
    1246:	9e 83       	std	Y+6, r25	; 0x06
    1248:	8d 83       	std	Y+5, r24	; 0x05
	int err = (dx>dy ? dx : -dy)/2, e2;
    124a:	2b 85       	ldd	r18, Y+11	; 0x0b
    124c:	3c 85       	ldd	r19, Y+12	; 0x0c
    124e:	8f 81       	ldd	r24, Y+7	; 0x07
    1250:	98 85       	ldd	r25, Y+8	; 0x08
    1252:	82 17       	cp	r24, r18
    1254:	93 07       	cpc	r25, r19
    1256:	bc f0       	brlt	.+46     	; 0x1286 <LCD_DrawLine+0xf8>
    1258:	8f 81       	ldd	r24, Y+7	; 0x07
    125a:	98 85       	ldd	r25, Y+8	; 0x08
    125c:	90 95       	com	r25
    125e:	81 95       	neg	r24
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	98 8f       	std	Y+24, r25	; 0x18
    1264:	8f 8b       	std	Y+23, r24	; 0x17
    1266:	4f 89       	ldd	r20, Y+23	; 0x17
    1268:	58 8d       	ldd	r21, Y+24	; 0x18
    126a:	55 23       	and	r21, r21
    126c:	2c f4       	brge	.+10     	; 0x1278 <LCD_DrawLine+0xea>
    126e:	8f 89       	ldd	r24, Y+23	; 0x17
    1270:	98 8d       	ldd	r25, Y+24	; 0x18
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	98 8f       	std	Y+24, r25	; 0x18
    1276:	8f 8b       	std	Y+23, r24	; 0x17
    1278:	8f 89       	ldd	r24, Y+23	; 0x17
    127a:	98 8d       	ldd	r25, Y+24	; 0x18
    127c:	95 95       	asr	r25
    127e:	87 95       	ror	r24
    1280:	9a 8b       	std	Y+18, r25	; 0x12
    1282:	89 8b       	std	Y+17, r24	; 0x11
    1284:	13 c0       	rjmp	.+38     	; 0x12ac <LCD_DrawLine+0x11e>
    1286:	8b 85       	ldd	r24, Y+11	; 0x0b
    1288:	9c 85       	ldd	r25, Y+12	; 0x0c
    128a:	9a 8f       	std	Y+26, r25	; 0x1a
    128c:	89 8f       	std	Y+25, r24	; 0x19
    128e:	49 8d       	ldd	r20, Y+25	; 0x19
    1290:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1292:	55 23       	and	r21, r21
    1294:	2c f4       	brge	.+10     	; 0x12a0 <LCD_DrawLine+0x112>
    1296:	89 8d       	ldd	r24, Y+25	; 0x19
    1298:	9a 8d       	ldd	r25, Y+26	; 0x1a
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	9a 8f       	std	Y+26, r25	; 0x1a
    129e:	89 8f       	std	Y+25, r24	; 0x19
    12a0:	89 8d       	ldd	r24, Y+25	; 0x19
    12a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12a4:	95 95       	asr	r25
    12a6:	87 95       	ror	r24
    12a8:	9a 8b       	std	Y+18, r25	; 0x12
    12aa:	89 8b       	std	Y+17, r24	; 0x11
    12ac:	49 89       	ldd	r20, Y+17	; 0x11
    12ae:	5a 89       	ldd	r21, Y+18	; 0x12
    12b0:	5c 83       	std	Y+4, r21	; 0x04
    12b2:	4b 83       	std	Y+3, r20	; 0x03

  	for(;;)
	{
   		LCD_DrawPixel(x0,y0);
    12b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b6:	6e 85       	ldd	r22, Y+14	; 0x0e
    12b8:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_DrawPixel>
   		if (x0==x1 && y0==y1) break;
    12bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    12be:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c0:	98 17       	cp	r25, r24
    12c2:	21 f4       	brne	.+8      	; 0x12cc <LCD_DrawLine+0x13e>
    12c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c6:	88 89       	ldd	r24, Y+16	; 0x10
    12c8:	98 17       	cp	r25, r24
    12ca:	89 f1       	breq	.+98     	; 0x132e <LCD_DrawLine+0x1a0>
   		e2 = err;
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
   		if (e2 >-dx) { err -= dy; x0 += sx; }
    12d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    12d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d8:	22 27       	eor	r18, r18
    12da:	33 27       	eor	r19, r19
    12dc:	28 1b       	sub	r18, r24
    12de:	39 0b       	sbc	r19, r25
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	28 17       	cp	r18, r24
    12e6:	39 07       	cpc	r19, r25
    12e8:	74 f4       	brge	.+28     	; 0x1306 <LCD_DrawLine+0x178>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	8f 81       	ldd	r24, Y+7	; 0x07
    12f0:	98 85       	ldd	r25, Y+8	; 0x08
    12f2:	a9 01       	movw	r20, r18
    12f4:	48 1b       	sub	r20, r24
    12f6:	59 0b       	sbc	r21, r25
    12f8:	ca 01       	movw	r24, r20
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	99 85       	ldd	r25, Y+9	; 0x09
    1300:	8d 85       	ldd	r24, Y+13	; 0x0d
    1302:	89 0f       	add	r24, r25
    1304:	8d 87       	std	Y+13, r24	; 0x0d
   		if (e2 < dy) { err += dx; y0 += sy; }
    1306:	29 81       	ldd	r18, Y+1	; 0x01
    1308:	3a 81       	ldd	r19, Y+2	; 0x02
    130a:	8f 81       	ldd	r24, Y+7	; 0x07
    130c:	98 85       	ldd	r25, Y+8	; 0x08
    130e:	28 17       	cp	r18, r24
    1310:	39 07       	cpc	r19, r25
    1312:	84 f6       	brge	.-96     	; 0x12b4 <LCD_DrawLine+0x126>
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	8b 85       	ldd	r24, Y+11	; 0x0b
    131a:	9c 85       	ldd	r25, Y+12	; 0x0c
    131c:	82 0f       	add	r24, r18
    131e:	93 1f       	adc	r25, r19
    1320:	9c 83       	std	Y+4, r25	; 0x04
    1322:	8b 83       	std	Y+3, r24	; 0x03
    1324:	9d 81       	ldd	r25, Y+5	; 0x05
    1326:	8e 85       	ldd	r24, Y+14	; 0x0e
    1328:	89 0f       	add	r24, r25
    132a:	8e 87       	std	Y+14, r24	; 0x0e
    132c:	c3 cf       	rjmp	.-122    	; 0x12b4 <LCD_DrawLine+0x126>
  	}
}
    132e:	6a 96       	adiw	r28, 0x1a	; 26
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <LCD_PrintChar>:

int LCD_PrintChar(const char c, unsigned char x0, unsigned char y0)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	28 97       	sbiw	r28, 0x08	; 8
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	8e 83       	std	Y+6, r24	; 0x06
    1356:	6f 83       	std	Y+7, r22	; 0x07
    1358:	48 87       	std	Y+8, r20	; 0x08
	char whitespace = 0;
    135a:	1d 82       	std	Y+5, r1	; 0x05
	char * CHAR = getChar(c);
    135c:	8e 81       	ldd	r24, Y+6	; 0x06
    135e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <getChar>
    1362:	9c 83       	std	Y+4, r25	; 0x04
    1364:	8b 83       	std	Y+3, r24	; 0x03
	for(unsigned char x = 0;x < 5;x++)
    1366:	1a 82       	std	Y+2, r1	; 0x02
    1368:	50 c0       	rjmp	.+160    	; 0x140a <LCD_PrintChar+0xca>
	{
		if(FLAGS & FLAG_IGNORE_WHITESPACE && CHAR[x] == 0) whitespace++;
    136a:	80 91 90 02 	lds	r24, 0x0290
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	84 70       	andi	r24, 0x04	; 4
    1374:	90 70       	andi	r25, 0x00	; 0
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	71 f0       	breq	.+28     	; 0x1396 <LCD_PrintChar+0x56>
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	fc 01       	movw	r30, r24
    1386:	e2 0f       	add	r30, r18
    1388:	f3 1f       	adc	r31, r19
    138a:	80 81       	ld	r24, Z
    138c:	88 23       	and	r24, r24
    138e:	19 f4       	brne	.+6      	; 0x1396 <LCD_PrintChar+0x56>
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	8f 5f       	subi	r24, 0xFF	; 255
    1394:	8d 83       	std	Y+5, r24	; 0x05
		if(CHAR[x] == 0x00)continue;
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	fc 01       	movw	r30, r24
    13a2:	e2 0f       	add	r30, r18
    13a4:	f3 1f       	adc	r31, r19
    13a6:	80 81       	ld	r24, Z
    13a8:	88 23       	and	r24, r24
    13aa:	61 f1       	breq	.+88     	; 0x1404 <LCD_PrintChar+0xc4>
		for(unsigned char y = 0;y < 8;y++)
    13ac:	19 82       	std	Y+1, r1	; 0x01
    13ae:	27 c0       	rjmp	.+78     	; 0x13fe <LCD_PrintChar+0xbe>
		{
			if(CHAR[x] & 1 << y)
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	fc 01       	movw	r30, r24
    13bc:	e2 0f       	add	r30, r18
    13be:	f3 1f       	adc	r31, r19
    13c0:	80 81       	ld	r24, Z
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a9 01       	movw	r20, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <LCD_PrintChar+0x94>
    13d0:	55 95       	asr	r21
    13d2:	47 95       	ror	r20
    13d4:	8a 95       	dec	r24
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <LCD_PrintChar+0x90>
    13d8:	ca 01       	movw	r24, r20
    13da:	81 70       	andi	r24, 0x01	; 1
    13dc:	90 70       	andi	r25, 0x00	; 0
    13de:	88 23       	and	r24, r24
    13e0:	59 f0       	breq	.+22     	; 0x13f8 <LCD_PrintChar+0xb8>
				LCD_DrawPixel(x + x0, y + y0);
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	8f 81       	ldd	r24, Y+7	; 0x07
    13e6:	29 2f       	mov	r18, r25
    13e8:	28 0f       	add	r18, r24
    13ea:	99 81       	ldd	r25, Y+1	; 0x01
    13ec:	88 85       	ldd	r24, Y+8	; 0x08
    13ee:	98 0f       	add	r25, r24
    13f0:	82 2f       	mov	r24, r18
    13f2:	69 2f       	mov	r22, r25
    13f4:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_DrawPixel>
	char * CHAR = getChar(c);
	for(unsigned char x = 0;x < 5;x++)
	{
		if(FLAGS & FLAG_IGNORE_WHITESPACE && CHAR[x] == 0) whitespace++;
		if(CHAR[x] == 0x00)continue;
		for(unsigned char y = 0;y < 8;y++)
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	8f 5f       	subi	r24, 0xFF	; 255
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	88 30       	cpi	r24, 0x08	; 8
    1402:	b0 f2       	brcs	.-84     	; 0x13b0 <LCD_PrintChar+0x70>

int LCD_PrintChar(const char c, unsigned char x0, unsigned char y0)
{
	char whitespace = 0;
	char * CHAR = getChar(c);
	for(unsigned char x = 0;x < 5;x++)
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	8f 5f       	subi	r24, 0xFF	; 255
    1408:	8a 83       	std	Y+2, r24	; 0x02
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	85 30       	cpi	r24, 0x05	; 5
    140e:	08 f4       	brcc	.+2      	; 0x1412 <LCD_PrintChar+0xd2>
    1410:	ac cf       	rjmp	.-168    	; 0x136a <LCD_PrintChar+0x2a>
		{
			if(CHAR[x] & 1 << y)
				LCD_DrawPixel(x + x0, y + y0);
		}
	}
	return whitespace;
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
}
    1418:	28 96       	adiw	r28, 0x08	; 8
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <LCD_PrintString>:

void LCD_PrintString(const char * str, unsigned char x0, unsigned char y0)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <LCD_PrintString+0x6>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <LCD_PrintString+0x8>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <LCD_PrintString+0xa>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	9c 83       	std	Y+4, r25	; 0x04
    143a:	8b 83       	std	Y+3, r24	; 0x03
    143c:	6d 83       	std	Y+5, r22	; 0x05
    143e:	4e 83       	std	Y+6, r20	; 0x06
	unsigned char xOff = 0;
    1440:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char yOff = 0;
    1442:	19 82       	std	Y+1, r1	; 0x01
    1444:	2c c0       	rjmp	.+88     	; 0x149e <LCD_PrintString+0x74>
	while(*str != '\0')
	{
		if(*str == ' ') xOff += 3;
    1446:	eb 81       	ldd	r30, Y+3	; 0x03
    1448:	fc 81       	ldd	r31, Y+4	; 0x04
    144a:	80 81       	ld	r24, Z
    144c:	80 32       	cpi	r24, 0x20	; 32
    144e:	21 f4       	brne	.+8      	; 0x1458 <LCD_PrintString+0x2e>
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	8d 5f       	subi	r24, 0xFD	; 253
    1454:	8a 83       	std	Y+2, r24	; 0x02
    1456:	1e c0       	rjmp	.+60     	; 0x1494 <LCD_PrintString+0x6a>
		else if(*str == '\n') 
    1458:	eb 81       	ldd	r30, Y+3	; 0x03
    145a:	fc 81       	ldd	r31, Y+4	; 0x04
    145c:	80 81       	ld	r24, Z
    145e:	8a 30       	cpi	r24, 0x0A	; 10
    1460:	29 f4       	brne	.+10     	; 0x146c <LCD_PrintString+0x42>
		{
			xOff = 0;
    1462:	1a 82       	std	Y+2, r1	; 0x02
			yOff += 9;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	87 5f       	subi	r24, 0xF7	; 247
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	14 c0       	rjmp	.+40     	; 0x1494 <LCD_PrintString+0x6a>
		}
		else xOff += 6 - LCD_PrintChar(*str, x0 + xOff, y0 + yOff);
    146c:	eb 81       	ldd	r30, Y+3	; 0x03
    146e:	fc 81       	ldd	r31, Y+4	; 0x04
    1470:	30 81       	ld	r19, Z
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	29 2f       	mov	r18, r25
    1478:	28 0f       	add	r18, r24
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	98 0f       	add	r25, r24
    1480:	83 2f       	mov	r24, r19
    1482:	62 2f       	mov	r22, r18
    1484:	49 2f       	mov	r20, r25
    1486:	0e 94 a0 09 	call	0x1340	; 0x1340 <LCD_PrintChar>
    148a:	98 2f       	mov	r25, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	89 1b       	sub	r24, r25
    1490:	8a 5f       	subi	r24, 0xFA	; 250
    1492:	8a 83       	std	Y+2, r24	; 0x02
		str++;
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	9c 83       	std	Y+4, r25	; 0x04
    149c:	8b 83       	std	Y+3, r24	; 0x03

void LCD_PrintString(const char * str, unsigned char x0, unsigned char y0)
{
	unsigned char xOff = 0;
	unsigned char yOff = 0;
	while(*str != '\0')
    149e:	eb 81       	ldd	r30, Y+3	; 0x03
    14a0:	fc 81       	ldd	r31, Y+4	; 0x04
    14a2:	80 81       	ld	r24, Z
    14a4:	88 23       	and	r24, r24
    14a6:	79 f6       	brne	.-98     	; 0x1446 <LCD_PrintString+0x1c>
			yOff += 9;
		}
		else xOff += 6 - LCD_PrintChar(*str, x0 + xOff, y0 + yOff);
		str++;
	}
}
    14a8:	26 96       	adiw	r28, 0x06	; 6
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <LCD_StringWidth>:

int LCD_StringWidth(const char * str)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	2c 97       	sbiw	r28, 0x0c	; 12
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	9a 87       	std	Y+10, r25	; 0x0a
    14d0:	89 87       	std	Y+9, r24	; 0x09
	int length = 0;
    14d2:	18 86       	std	Y+8, r1	; 0x08
    14d4:	1f 82       	std	Y+7, r1	; 0x07
	const char * original = str;
    14d6:	89 85       	ldd	r24, Y+9	; 0x09
    14d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14da:	9e 83       	std	Y+6, r25	; 0x06
    14dc:	8d 83       	std	Y+5, r24	; 0x05
    14de:	0a c0       	rjmp	.+20     	; 0x14f4 <LCD_StringWidth+0x3a>
	while(*str != '\0')
	{
		length++;
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	98 87       	std	Y+8, r25	; 0x08
    14e8:	8f 83       	std	Y+7, r24	; 0x07
		str++;
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	9a 87       	std	Y+10, r25	; 0x0a
    14f2:	89 87       	std	Y+9, r24	; 0x09

int LCD_StringWidth(const char * str)
{
	int length = 0;
	const char * original = str;
	while(*str != '\0')
    14f4:	e9 85       	ldd	r30, Y+9	; 0x09
    14f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    14f8:	80 81       	ld	r24, Z
    14fa:	88 23       	and	r24, r24
    14fc:	89 f7       	brne	.-30     	; 0x14e0 <LCD_StringWidth+0x26>
	{
		length++;
		str++;
	}
	str = original;
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	9a 87       	std	Y+10, r25	; 0x0a
    1504:	89 87       	std	Y+9, r24	; 0x09
	if(FLAGS & FLAG_IGNORE_WHITESPACE)
    1506:	80 91 90 02 	lds	r24, 0x0290
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	84 70       	andi	r24, 0x04	; 4
    1510:	90 70       	andi	r25, 0x00	; 0
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	09 f4       	brne	.+2      	; 0x1518 <LCD_StringWidth+0x5e>
    1516:	40 c0       	rjmp	.+128    	; 0x1598 <LCD_StringWidth+0xde>
	{
		length = 0;
    1518:	18 86       	std	Y+8, r1	; 0x08
    151a:	1f 82       	std	Y+7, r1	; 0x07
    151c:	2f c0       	rjmp	.+94     	; 0x157c <LCD_StringWidth+0xc2>
		char * CHAR;
		int off;
		while(*str != '\0')
		{
			CHAR = getChar(*str);
    151e:	e9 85       	ldd	r30, Y+9	; 0x09
    1520:	fa 85       	ldd	r31, Y+10	; 0x0a
    1522:	80 81       	ld	r24, Z
    1524:	0e 94 c3 0b 	call	0x1786	; 0x1786 <getChar>
    1528:	9c 83       	std	Y+4, r25	; 0x04
    152a:	8b 83       	std	Y+3, r24	; 0x03
			for(off = 4;off >= 0;off--)
    152c:	84 e0       	ldi	r24, 0x04	; 4
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <LCD_StringWidth+0x9a>
			{
				if(CHAR[off] != 0x00) break;
    1536:	29 81       	ldd	r18, Y+1	; 0x01
    1538:	3a 81       	ldd	r19, Y+2	; 0x02
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	fc 01       	movw	r30, r24
    1540:	e2 0f       	add	r30, r18
    1542:	f3 1f       	adc	r31, r19
    1544:	80 81       	ld	r24, Z
    1546:	88 23       	and	r24, r24
    1548:	49 f4       	brne	.+18     	; 0x155c <LCD_StringWidth+0xa2>
		char * CHAR;
		int off;
		while(*str != '\0')
		{
			CHAR = getChar(*str);
			for(off = 4;off >= 0;off--)
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	99 23       	and	r25, r25
    155a:	6c f7       	brge	.-38     	; 0x1536 <LCD_StringWidth+0x7c>
			{
				if(CHAR[off] != 0x00) break;
			}
			length += off + 2;
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	9a 81       	ldd	r25, Y+2	; 0x02
    1560:	9c 01       	movw	r18, r24
    1562:	2e 5f       	subi	r18, 0xFE	; 254
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	8f 81       	ldd	r24, Y+7	; 0x07
    1568:	98 85       	ldd	r25, Y+8	; 0x08
    156a:	82 0f       	add	r24, r18
    156c:	93 1f       	adc	r25, r19
    156e:	98 87       	std	Y+8, r25	; 0x08
    1570:	8f 83       	std	Y+7, r24	; 0x07
			str++;
    1572:	89 85       	ldd	r24, Y+9	; 0x09
    1574:	9a 85       	ldd	r25, Y+10	; 0x0a
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	9a 87       	std	Y+10, r25	; 0x0a
    157a:	89 87       	std	Y+9, r24	; 0x09
	if(FLAGS & FLAG_IGNORE_WHITESPACE)
	{
		length = 0;
		char * CHAR;
		int off;
		while(*str != '\0')
    157c:	e9 85       	ldd	r30, Y+9	; 0x09
    157e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1580:	80 81       	ld	r24, Z
    1582:	88 23       	and	r24, r24
    1584:	61 f6       	brne	.-104    	; 0x151e <LCD_StringWidth+0x64>
				if(CHAR[off] != 0x00) break;
			}
			length += off + 2;
			str++;
		}
		str = original;
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	9a 87       	std	Y+10, r25	; 0x0a
    158c:	89 87       	std	Y+9, r24	; 0x09
		return length;
    158e:	4f 81       	ldd	r20, Y+7	; 0x07
    1590:	58 85       	ldd	r21, Y+8	; 0x08
    1592:	5c 87       	std	Y+12, r21	; 0x0c
    1594:	4b 87       	std	Y+11, r20	; 0x0b
    1596:	0c c0       	rjmp	.+24     	; 0x15b0 <LCD_StringWidth+0xf6>
	}
	else return 5 * length;
    1598:	8f 81       	ldd	r24, Y+7	; 0x07
    159a:	98 85       	ldd	r25, Y+8	; 0x08
    159c:	9c 01       	movw	r18, r24
    159e:	22 0f       	add	r18, r18
    15a0:	33 1f       	adc	r19, r19
    15a2:	22 0f       	add	r18, r18
    15a4:	33 1f       	adc	r19, r19
    15a6:	a9 01       	movw	r20, r18
    15a8:	48 0f       	add	r20, r24
    15aa:	59 1f       	adc	r21, r25
    15ac:	5c 87       	std	Y+12, r21	; 0x0c
    15ae:	4b 87       	std	Y+11, r20	; 0x0b
    15b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b2:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    15b4:	2c 96       	adiw	r28, 0x0c	; 12
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <LCD_PrintSpecial>:

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
    15c6:	0f 93       	push	r16
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	28 97       	sbiw	r28, 0x08	; 8
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	9c 83       	std	Y+4, r25	; 0x04
    15de:	8b 83       	std	Y+3, r24	; 0x03
    15e0:	6d 83       	std	Y+5, r22	; 0x05
    15e2:	4e 83       	std	Y+6, r20	; 0x06
    15e4:	2f 83       	std	Y+7, r18	; 0x07
    15e6:	08 87       	std	Y+8, r16	; 0x08
	for(unsigned char x = 0;x < width;x++)
    15e8:	1a 82       	std	Y+2, r1	; 0x02
    15ea:	30 c0       	rjmp	.+96     	; 0x164c <LCD_PrintSpecial+0x86>
	{
		for(unsigned char y = 0;y < height;y++)
    15ec:	19 82       	std	Y+1, r1	; 0x01
    15ee:	27 c0       	rjmp	.+78     	; 0x163e <LCD_PrintSpecial+0x78>
		{
			if(SPECIAL[x] & (1 << y))
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	fc 01       	movw	r30, r24
    15fc:	e2 0f       	add	r30, r18
    15fe:	f3 1f       	adc	r31, r19
    1600:	80 81       	ld	r24, Z
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <LCD_PrintSpecial+0x4e>
    1610:	55 95       	asr	r21
    1612:	47 95       	ror	r20
    1614:	8a 95       	dec	r24
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <LCD_PrintSpecial+0x4a>
    1618:	ca 01       	movw	r24, r20
    161a:	81 70       	andi	r24, 0x01	; 1
    161c:	90 70       	andi	r25, 0x00	; 0
    161e:	88 23       	and	r24, r24
    1620:	59 f0       	breq	.+22     	; 0x1638 <LCD_PrintSpecial+0x72>
			{
				LCD_DrawPixel(x + x0, y + y0);
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	29 2f       	mov	r18, r25
    1628:	28 0f       	add	r18, r24
    162a:	99 81       	ldd	r25, Y+1	; 0x01
    162c:	8e 81       	ldd	r24, Y+6	; 0x06
    162e:	98 0f       	add	r25, r24
    1630:	82 2f       	mov	r24, r18
    1632:	69 2f       	mov	r22, r25
    1634:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_DrawPixel>

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
	for(unsigned char x = 0;x < width;x++)
	{
		for(unsigned char y = 0;y < height;y++)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	99 81       	ldd	r25, Y+1	; 0x01
    1640:	88 85       	ldd	r24, Y+8	; 0x08
    1642:	98 17       	cp	r25, r24
    1644:	a8 f2       	brcs	.-86     	; 0x15f0 <LCD_PrintSpecial+0x2a>
	else return 5 * length;
}

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
	for(unsigned char x = 0;x < width;x++)
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	8f 81       	ldd	r24, Y+7	; 0x07
    1650:	98 17       	cp	r25, r24
    1652:	60 f2       	brcs	.-104    	; 0x15ec <LCD_PrintSpecial+0x26>
			{
				LCD_DrawPixel(x + x0, y + y0);
			}
		}
	}
}
    1654:	28 96       	adiw	r28, 0x08	; 8
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	0f 91       	pop	r16
    1666:	08 95       	ret

00001668 <LCD_Display>:

void LCD_Display()
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	00 d0       	rcall	.+0      	; 0x166e <LCD_Display+0x6>
    166e:	00 d0       	rcall	.+0      	; 0x1670 <LCD_Display+0x8>
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
	int page, column;
	for(page = 7;page >= 0;page--)
    1674:	87 e0       	ldi	r24, 0x07	; 7
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9c 83       	std	Y+4, r25	; 0x04
    167a:	8b 83       	std	Y+3, r24	; 0x03
    167c:	34 c0       	rjmp	.+104    	; 0x16e6 <LCD_Display+0x7e>
	{
		sendData(0xB0 | (7 - page), CMD); // Page address
    167e:	9b 81       	ldd	r25, Y+3	; 0x03
    1680:	87 e0       	ldi	r24, 0x07	; 7
    1682:	89 1b       	sub	r24, r25
    1684:	80 6b       	ori	r24, 0xB0	; 176
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>
		sendData(0x10, CMD); // Column addres MSB (0)
    168c:	80 e1       	ldi	r24, 0x10	; 16
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>
		sendData(0x04, CMD); // Column address LSB (4)
    1694:	84 e0       	ldi	r24, 0x04	; 4
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>
		for(column = 0;column < 128;column++)
    169c:	1a 82       	std	Y+2, r1	; 0x02
    169e:	19 82       	std	Y+1, r1	; 0x01
    16a0:	18 c0       	rjmp	.+48     	; 0x16d2 <LCD_Display+0x6a>
		{
			sendData(buffer[page * 128 + column], DATA); // Data
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	9c 01       	movw	r18, r24
    16a8:	36 95       	lsr	r19
    16aa:	32 2f       	mov	r19, r18
    16ac:	22 27       	eor	r18, r18
    16ae:	37 95       	ror	r19
    16b0:	27 95       	ror	r18
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	82 0f       	add	r24, r18
    16b8:	93 1f       	adc	r25, r19
    16ba:	fc 01       	movw	r30, r24
    16bc:	e8 56       	subi	r30, 0x68	; 104
    16be:	f9 4f       	sbci	r31, 0xF9	; 249
    16c0:	80 81       	ld	r24, Z
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	0e 94 13 06 	call	0xc26	; 0xc26 <sendData>
	for(page = 7;page >= 0;page--)
	{
		sendData(0xB0 | (7 - page), CMD); // Page address
		sendData(0x10, CMD); // Column addres MSB (0)
		sendData(0x04, CMD); // Column address LSB (4)
		for(column = 0;column < 128;column++)
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	9a 81       	ldd	r25, Y+2	; 0x02
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	80 38       	cpi	r24, 0x80	; 128
    16d8:	91 05       	cpc	r25, r1
    16da:	1c f3       	brlt	.-58     	; 0x16a2 <LCD_Display+0x3a>
}

void LCD_Display()
{
	int page, column;
	for(page = 7;page >= 0;page--)
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8b 83       	std	Y+3, r24	; 0x03
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	99 23       	and	r25, r25
    16ec:	44 f6       	brge	.-112    	; 0x167e <LCD_Display+0x16>
		for(column = 0;column < 128;column++)
		{
			sendData(buffer[page * 128 + column], DATA); // Data
		}
	}
	memcpy(pixels, buffer, sizeof(pixels));
    16ee:	88 e9       	ldi	r24, 0x98	; 152
    16f0:	92 e0       	ldi	r25, 0x02	; 2
    16f2:	28 e9       	ldi	r18, 0x98	; 152
    16f4:	36 e0       	ldi	r19, 0x06	; 6
    16f6:	b9 01       	movw	r22, r18
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	54 e0       	ldi	r21, 0x04	; 4
    16fc:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <memcpy>
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <LCD_GetWidth>:

int LCD_GetWidth()
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <LCD_GetWidth+0x6>
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
	return ((FLAGS & FLAG_LANDSCAPE) > 0 ? 128 : 64);
    1718:	80 91 90 02 	lds	r24, 0x0290
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	81 70       	andi	r24, 0x01	; 1
    1722:	90 70       	andi	r25, 0x00	; 0
    1724:	18 16       	cp	r1, r24
    1726:	19 06       	cpc	r1, r25
    1728:	2c f4       	brge	.+10     	; 0x1734 <LCD_GetWidth+0x26>
    172a:	80 e8       	ldi	r24, 0x80	; 128
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	04 c0       	rjmp	.+8      	; 0x173c <LCD_GetWidth+0x2e>
    1734:	80 e4       	ldi	r24, 0x40	; 64
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <LCD_GetHeight>:

int LCD_GetHeight()
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	00 d0       	rcall	.+0      	; 0x1750 <LCD_GetHeight+0x6>
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	return ((FLAGS & FLAG_LANDSCAPE) > 0 ? 64 : 128);
    1754:	80 91 90 02 	lds	r24, 0x0290
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	81 70       	andi	r24, 0x01	; 1
    175e:	90 70       	andi	r25, 0x00	; 0
    1760:	18 16       	cp	r1, r24
    1762:	19 06       	cpc	r1, r25
    1764:	2c f4       	brge	.+10     	; 0x1770 <LCD_GetHeight+0x26>
    1766:	80 e4       	ldi	r24, 0x40	; 64
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	04 c0       	rjmp	.+8      	; 0x1778 <LCD_GetHeight+0x2e>
    1770:	80 e8       	ldi	r24, 0x80	; 128
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <getChar>:

char * getChar(char c)
{
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <getChar+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <getChar+0x8>
    178e:	0f 92       	push	r0
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	89 83       	std	Y+1, r24	; 0x01
	switch(c)
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	3d 83       	std	Y+5, r19	; 0x05
    179e:	2c 83       	std	Y+4, r18	; 0x04
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	9d 81       	ldd	r25, Y+5	; 0x05
    17a4:	84 35       	cpi	r24, 0x54	; 84
    17a6:	91 05       	cpc	r25, r1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <getChar+0x26>
    17aa:	79 c2       	rjmp	.+1266   	; 0x1c9e <getChar+0x518>
    17ac:	2c 81       	ldd	r18, Y+4	; 0x04
    17ae:	3d 81       	ldd	r19, Y+5	; 0x05
    17b0:	25 35       	cpi	r18, 0x55	; 85
    17b2:	31 05       	cpc	r19, r1
    17b4:	0c f0       	brlt	.+2      	; 0x17b8 <getChar+0x32>
    17b6:	ed c0       	rjmp	.+474    	; 0x1992 <getChar+0x20c>
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	83 34       	cpi	r24, 0x43	; 67
    17be:	91 05       	cpc	r25, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <getChar+0x3e>
    17c2:	c3 c1       	rjmp	.+902    	; 0x1b4a <getChar+0x3c4>
    17c4:	2c 81       	ldd	r18, Y+4	; 0x04
    17c6:	3d 81       	ldd	r19, Y+5	; 0x05
    17c8:	24 34       	cpi	r18, 0x44	; 68
    17ca:	31 05       	cpc	r19, r1
    17cc:	0c f0       	brlt	.+2      	; 0x17d0 <getChar+0x4a>
    17ce:	80 c0       	rjmp	.+256    	; 0x18d0 <getChar+0x14a>
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	9d 81       	ldd	r25, Y+5	; 0x05
    17d4:	85 33       	cpi	r24, 0x35	; 53
    17d6:	91 05       	cpc	r25, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <getChar+0x56>
    17da:	c0 c2       	rjmp	.+1408   	; 0x1d5c <getChar+0x5d6>
    17dc:	2c 81       	ldd	r18, Y+4	; 0x04
    17de:	3d 81       	ldd	r19, Y+5	; 0x05
    17e0:	26 33       	cpi	r18, 0x36	; 54
    17e2:	31 05       	cpc	r19, r1
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <getChar+0x62>
    17e6:	43 c0       	rjmp	.+134    	; 0x186e <getChar+0xe8>
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	81 33       	cpi	r24, 0x31	; 49
    17ee:	91 05       	cpc	r25, r1
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <getChar+0x6e>
    17f2:	a0 c2       	rjmp	.+1344   	; 0x1d34 <getChar+0x5ae>
    17f4:	2c 81       	ldd	r18, Y+4	; 0x04
    17f6:	3d 81       	ldd	r19, Y+5	; 0x05
    17f8:	22 33       	cpi	r18, 0x32	; 50
    17fa:	31 05       	cpc	r19, r1
    17fc:	5c f5       	brge	.+86     	; 0x1854 <getChar+0xce>
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	8d 32       	cpi	r24, 0x2D	; 45
    1804:	91 05       	cpc	r25, r1
    1806:	09 f4       	brne	.+2      	; 0x180a <getChar+0x84>
    1808:	cc c2       	rjmp	.+1432   	; 0x1da2 <getChar+0x61c>
    180a:	2c 81       	ldd	r18, Y+4	; 0x04
    180c:	3d 81       	ldd	r19, Y+5	; 0x05
    180e:	2e 32       	cpi	r18, 0x2E	; 46
    1810:	31 05       	cpc	r19, r1
    1812:	9c f4       	brge	.+38     	; 0x183a <getChar+0xb4>
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	82 32       	cpi	r24, 0x22	; 34
    181a:	91 05       	cpc	r25, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <getChar+0x9a>
    181e:	c6 c2       	rjmp	.+1420   	; 0x1dac <getChar+0x626>
    1820:	2c 81       	ldd	r18, Y+4	; 0x04
    1822:	3d 81       	ldd	r19, Y+5	; 0x05
    1824:	2c 32       	cpi	r18, 0x2C	; 44
    1826:	31 05       	cpc	r19, r1
    1828:	09 f4       	brne	.+2      	; 0x182c <getChar+0xa6>
    182a:	b6 c2       	rjmp	.+1388   	; 0x1d98 <getChar+0x612>
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	9d 81       	ldd	r25, Y+5	; 0x05
    1830:	81 32       	cpi	r24, 0x21	; 33
    1832:	91 05       	cpc	r25, r1
    1834:	09 f4       	brne	.+2      	; 0x1838 <getChar+0xb2>
    1836:	bf c2       	rjmp	.+1406   	; 0x1db6 <getChar+0x630>
    1838:	cd c2       	rjmp	.+1434   	; 0x1dd4 <getChar+0x64e>
    183a:	2c 81       	ldd	r18, Y+4	; 0x04
    183c:	3d 81       	ldd	r19, Y+5	; 0x05
    183e:	2e 32       	cpi	r18, 0x2E	; 46
    1840:	31 05       	cpc	r19, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <getChar+0xc0>
    1844:	a4 c2       	rjmp	.+1352   	; 0x1d8e <getChar+0x608>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	80 33       	cpi	r24, 0x30	; 48
    184c:	91 05       	cpc	r25, r1
    184e:	09 f4       	brne	.+2      	; 0x1852 <getChar+0xcc>
    1850:	6c c2       	rjmp	.+1240   	; 0x1d2a <getChar+0x5a4>
    1852:	c0 c2       	rjmp	.+1408   	; 0x1dd4 <getChar+0x64e>
    1854:	2c 81       	ldd	r18, Y+4	; 0x04
    1856:	3d 81       	ldd	r19, Y+5	; 0x05
    1858:	23 33       	cpi	r18, 0x33	; 51
    185a:	31 05       	cpc	r19, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <getChar+0xda>
    185e:	74 c2       	rjmp	.+1256   	; 0x1d48 <getChar+0x5c2>
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	9d 81       	ldd	r25, Y+5	; 0x05
    1864:	84 33       	cpi	r24, 0x34	; 52
    1866:	91 05       	cpc	r25, r1
    1868:	0c f0       	brlt	.+2      	; 0x186c <getChar+0xe6>
    186a:	73 c2       	rjmp	.+1254   	; 0x1d52 <getChar+0x5cc>
    186c:	68 c2       	rjmp	.+1232   	; 0x1d3e <getChar+0x5b8>
    186e:	2c 81       	ldd	r18, Y+4	; 0x04
    1870:	3d 81       	ldd	r19, Y+5	; 0x05
    1872:	29 33       	cpi	r18, 0x39	; 57
    1874:	31 05       	cpc	r19, r1
    1876:	09 f4       	brne	.+2      	; 0x187a <getChar+0xf4>
    1878:	85 c2       	rjmp	.+1290   	; 0x1d84 <getChar+0x5fe>
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	8a 33       	cpi	r24, 0x3A	; 58
    1880:	91 05       	cpc	r25, r1
    1882:	6c f4       	brge	.+26     	; 0x189e <getChar+0x118>
    1884:	2c 81       	ldd	r18, Y+4	; 0x04
    1886:	3d 81       	ldd	r19, Y+5	; 0x05
    1888:	27 33       	cpi	r18, 0x37	; 55
    188a:	31 05       	cpc	r19, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <getChar+0x10a>
    188e:	70 c2       	rjmp	.+1248   	; 0x1d70 <getChar+0x5ea>
    1890:	8c 81       	ldd	r24, Y+4	; 0x04
    1892:	9d 81       	ldd	r25, Y+5	; 0x05
    1894:	88 33       	cpi	r24, 0x38	; 56
    1896:	91 05       	cpc	r25, r1
    1898:	0c f0       	brlt	.+2      	; 0x189c <getChar+0x116>
    189a:	6f c2       	rjmp	.+1246   	; 0x1d7a <getChar+0x5f4>
    189c:	64 c2       	rjmp	.+1224   	; 0x1d66 <getChar+0x5e0>
    189e:	2c 81       	ldd	r18, Y+4	; 0x04
    18a0:	3d 81       	ldd	r19, Y+5	; 0x05
    18a2:	21 34       	cpi	r18, 0x41	; 65
    18a4:	31 05       	cpc	r19, r1
    18a6:	09 f4       	brne	.+2      	; 0x18aa <getChar+0x124>
    18a8:	3c c1       	rjmp	.+632    	; 0x1b22 <getChar+0x39c>
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	9d 81       	ldd	r25, Y+5	; 0x05
    18ae:	82 34       	cpi	r24, 0x42	; 66
    18b0:	91 05       	cpc	r25, r1
    18b2:	0c f0       	brlt	.+2      	; 0x18b6 <getChar+0x130>
    18b4:	40 c1       	rjmp	.+640    	; 0x1b36 <getChar+0x3b0>
    18b6:	2c 81       	ldd	r18, Y+4	; 0x04
    18b8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ba:	2a 33       	cpi	r18, 0x3A	; 58
    18bc:	31 05       	cpc	r19, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <getChar+0x13c>
    18c0:	84 c2       	rjmp	.+1288   	; 0x1dca <getChar+0x644>
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	8f 33       	cpi	r24, 0x3F	; 63
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <getChar+0x148>
    18cc:	79 c2       	rjmp	.+1266   	; 0x1dc0 <getChar+0x63a>
    18ce:	82 c2       	rjmp	.+1284   	; 0x1dd4 <getChar+0x64e>
    18d0:	2c 81       	ldd	r18, Y+4	; 0x04
    18d2:	3d 81       	ldd	r19, Y+5	; 0x05
    18d4:	2b 34       	cpi	r18, 0x4B	; 75
    18d6:	31 05       	cpc	r19, r1
    18d8:	09 f4       	brne	.+2      	; 0x18dc <getChar+0x156>
    18da:	87 c1       	rjmp	.+782    	; 0x1bea <getChar+0x464>
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	9d 81       	ldd	r25, Y+5	; 0x05
    18e0:	8c 34       	cpi	r24, 0x4C	; 76
    18e2:	91 05       	cpc	r25, r1
    18e4:	2c f5       	brge	.+74     	; 0x1930 <getChar+0x1aa>
    18e6:	2c 81       	ldd	r18, Y+4	; 0x04
    18e8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ea:	27 34       	cpi	r18, 0x47	; 71
    18ec:	31 05       	cpc	r19, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <getChar+0x16c>
    18f0:	54 c1       	rjmp	.+680    	; 0x1b9a <getChar+0x414>
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	9d 81       	ldd	r25, Y+5	; 0x05
    18f6:	88 34       	cpi	r24, 0x48	; 72
    18f8:	91 05       	cpc	r25, r1
    18fa:	6c f4       	brge	.+26     	; 0x1916 <getChar+0x190>
    18fc:	2c 81       	ldd	r18, Y+4	; 0x04
    18fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1900:	25 34       	cpi	r18, 0x45	; 69
    1902:	31 05       	cpc	r19, r1
    1904:	09 f4       	brne	.+2      	; 0x1908 <getChar+0x182>
    1906:	35 c1       	rjmp	.+618    	; 0x1b72 <getChar+0x3ec>
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
    190a:	9d 81       	ldd	r25, Y+5	; 0x05
    190c:	86 34       	cpi	r24, 0x46	; 70
    190e:	91 05       	cpc	r25, r1
    1910:	0c f0       	brlt	.+2      	; 0x1914 <getChar+0x18e>
    1912:	39 c1       	rjmp	.+626    	; 0x1b86 <getChar+0x400>
    1914:	24 c1       	rjmp	.+584    	; 0x1b5e <getChar+0x3d8>
    1916:	2c 81       	ldd	r18, Y+4	; 0x04
    1918:	3d 81       	ldd	r19, Y+5	; 0x05
    191a:	29 34       	cpi	r18, 0x49	; 73
    191c:	31 05       	cpc	r19, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <getChar+0x19c>
    1920:	50 c1       	rjmp	.+672    	; 0x1bc2 <getChar+0x43c>
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	9d 81       	ldd	r25, Y+5	; 0x05
    1926:	8a 34       	cpi	r24, 0x4A	; 74
    1928:	91 05       	cpc	r25, r1
    192a:	0c f0       	brlt	.+2      	; 0x192e <getChar+0x1a8>
    192c:	54 c1       	rjmp	.+680    	; 0x1bd6 <getChar+0x450>
    192e:	3f c1       	rjmp	.+638    	; 0x1bae <getChar+0x428>
    1930:	2c 81       	ldd	r18, Y+4	; 0x04
    1932:	3d 81       	ldd	r19, Y+5	; 0x05
    1934:	2f 34       	cpi	r18, 0x4F	; 79
    1936:	31 05       	cpc	r19, r1
    1938:	09 f4       	brne	.+2      	; 0x193c <getChar+0x1b6>
    193a:	7f c1       	rjmp	.+766    	; 0x1c3a <getChar+0x4b4>
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	9d 81       	ldd	r25, Y+5	; 0x05
    1940:	80 35       	cpi	r24, 0x50	; 80
    1942:	91 05       	cpc	r25, r1
    1944:	6c f4       	brge	.+26     	; 0x1960 <getChar+0x1da>
    1946:	2c 81       	ldd	r18, Y+4	; 0x04
    1948:	3d 81       	ldd	r19, Y+5	; 0x05
    194a:	2d 34       	cpi	r18, 0x4D	; 77
    194c:	31 05       	cpc	r19, r1
    194e:	09 f4       	brne	.+2      	; 0x1952 <getChar+0x1cc>
    1950:	60 c1       	rjmp	.+704    	; 0x1c12 <getChar+0x48c>
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	9d 81       	ldd	r25, Y+5	; 0x05
    1956:	8e 34       	cpi	r24, 0x4E	; 78
    1958:	91 05       	cpc	r25, r1
    195a:	0c f0       	brlt	.+2      	; 0x195e <getChar+0x1d8>
    195c:	64 c1       	rjmp	.+712    	; 0x1c26 <getChar+0x4a0>
    195e:	4f c1       	rjmp	.+670    	; 0x1bfe <getChar+0x478>
    1960:	2c 81       	ldd	r18, Y+4	; 0x04
    1962:	3d 81       	ldd	r19, Y+5	; 0x05
    1964:	21 35       	cpi	r18, 0x51	; 81
    1966:	31 05       	cpc	r19, r1
    1968:	09 f4       	brne	.+2      	; 0x196c <getChar+0x1e6>
    196a:	7b c1       	rjmp	.+758    	; 0x1c62 <getChar+0x4dc>
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	9d 81       	ldd	r25, Y+5	; 0x05
    1970:	81 35       	cpi	r24, 0x51	; 81
    1972:	91 05       	cpc	r25, r1
    1974:	0c f4       	brge	.+2      	; 0x1978 <getChar+0x1f2>
    1976:	6b c1       	rjmp	.+726    	; 0x1c4e <getChar+0x4c8>
    1978:	2c 81       	ldd	r18, Y+4	; 0x04
    197a:	3d 81       	ldd	r19, Y+5	; 0x05
    197c:	22 35       	cpi	r18, 0x52	; 82
    197e:	31 05       	cpc	r19, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <getChar+0x1fe>
    1982:	79 c1       	rjmp	.+754    	; 0x1c76 <getChar+0x4f0>
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	9d 81       	ldd	r25, Y+5	; 0x05
    1988:	83 35       	cpi	r24, 0x53	; 83
    198a:	91 05       	cpc	r25, r1
    198c:	09 f4       	brne	.+2      	; 0x1990 <getChar+0x20a>
    198e:	7d c1       	rjmp	.+762    	; 0x1c8a <getChar+0x504>
    1990:	21 c2       	rjmp	.+1090   	; 0x1dd4 <getChar+0x64e>
    1992:	2c 81       	ldd	r18, Y+4	; 0x04
    1994:	3d 81       	ldd	r19, Y+5	; 0x05
    1996:	2a 36       	cpi	r18, 0x6A	; 106
    1998:	31 05       	cpc	r19, r1
    199a:	09 f4       	brne	.+2      	; 0x199e <getChar+0x218>
    199c:	21 c1       	rjmp	.+578    	; 0x1be0 <getChar+0x45a>
    199e:	8c 81       	ldd	r24, Y+4	; 0x04
    19a0:	9d 81       	ldd	r25, Y+5	; 0x05
    19a2:	8b 36       	cpi	r24, 0x6B	; 107
    19a4:	91 05       	cpc	r25, r1
    19a6:	0c f0       	brlt	.+2      	; 0x19aa <getChar+0x224>
    19a8:	5b c0       	rjmp	.+182    	; 0x1a60 <getChar+0x2da>
    19aa:	2c 81       	ldd	r18, Y+4	; 0x04
    19ac:	3d 81       	ldd	r19, Y+5	; 0x05
    19ae:	22 36       	cpi	r18, 0x62	; 98
    19b0:	31 05       	cpc	r19, r1
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <getChar+0x230>
    19b4:	c5 c0       	rjmp	.+394    	; 0x1b40 <getChar+0x3ba>
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ba:	83 36       	cpi	r24, 0x63	; 99
    19bc:	91 05       	cpc	r25, r1
    19be:	5c f5       	brge	.+86     	; 0x1a16 <getChar+0x290>
    19c0:	2c 81       	ldd	r18, Y+4	; 0x04
    19c2:	3d 81       	ldd	r19, Y+5	; 0x05
    19c4:	28 35       	cpi	r18, 0x58	; 88
    19c6:	31 05       	cpc	r19, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <getChar+0x246>
    19ca:	91 c1       	rjmp	.+802    	; 0x1cee <getChar+0x568>
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
    19ce:	9d 81       	ldd	r25, Y+5	; 0x05
    19d0:	89 35       	cpi	r24, 0x59	; 89
    19d2:	91 05       	cpc	r25, r1
    19d4:	6c f4       	brge	.+26     	; 0x19f0 <getChar+0x26a>
    19d6:	2c 81       	ldd	r18, Y+4	; 0x04
    19d8:	3d 81       	ldd	r19, Y+5	; 0x05
    19da:	26 35       	cpi	r18, 0x56	; 86
    19dc:	31 05       	cpc	r19, r1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <getChar+0x25c>
    19e0:	72 c1       	rjmp	.+740    	; 0x1cc6 <getChar+0x540>
    19e2:	8c 81       	ldd	r24, Y+4	; 0x04
    19e4:	9d 81       	ldd	r25, Y+5	; 0x05
    19e6:	87 35       	cpi	r24, 0x57	; 87
    19e8:	91 05       	cpc	r25, r1
    19ea:	0c f0       	brlt	.+2      	; 0x19ee <getChar+0x268>
    19ec:	76 c1       	rjmp	.+748    	; 0x1cda <getChar+0x554>
    19ee:	61 c1       	rjmp	.+706    	; 0x1cb2 <getChar+0x52c>
    19f0:	2c 81       	ldd	r18, Y+4	; 0x04
    19f2:	3d 81       	ldd	r19, Y+5	; 0x05
    19f4:	2a 35       	cpi	r18, 0x5A	; 90
    19f6:	31 05       	cpc	r19, r1
    19f8:	09 f4       	brne	.+2      	; 0x19fc <getChar+0x276>
    19fa:	8d c1       	rjmp	.+794    	; 0x1d16 <getChar+0x590>
    19fc:	8c 81       	ldd	r24, Y+4	; 0x04
    19fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1a00:	8a 35       	cpi	r24, 0x5A	; 90
    1a02:	91 05       	cpc	r25, r1
    1a04:	0c f4       	brge	.+2      	; 0x1a08 <getChar+0x282>
    1a06:	7d c1       	rjmp	.+762    	; 0x1d02 <getChar+0x57c>
    1a08:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0c:	21 36       	cpi	r18, 0x61	; 97
    1a0e:	31 05       	cpc	r19, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <getChar+0x28e>
    1a12:	8c c0       	rjmp	.+280    	; 0x1b2c <getChar+0x3a6>
    1a14:	df c1       	rjmp	.+958    	; 0x1dd4 <getChar+0x64e>
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1a:	86 36       	cpi	r24, 0x66	; 102
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <getChar+0x29c>
    1a20:	b7 c0       	rjmp	.+366    	; 0x1b90 <getChar+0x40a>
    1a22:	2c 81       	ldd	r18, Y+4	; 0x04
    1a24:	3d 81       	ldd	r19, Y+5	; 0x05
    1a26:	27 36       	cpi	r18, 0x67	; 103
    1a28:	31 05       	cpc	r19, r1
    1a2a:	6c f4       	brge	.+26     	; 0x1a46 <getChar+0x2c0>
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a30:	84 36       	cpi	r24, 0x64	; 100
    1a32:	91 05       	cpc	r25, r1
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <getChar+0x2b2>
    1a36:	98 c0       	rjmp	.+304    	; 0x1b68 <getChar+0x3e2>
    1a38:	2c 81       	ldd	r18, Y+4	; 0x04
    1a3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3c:	25 36       	cpi	r18, 0x65	; 101
    1a3e:	31 05       	cpc	r19, r1
    1a40:	0c f0       	brlt	.+2      	; 0x1a44 <getChar+0x2be>
    1a42:	9c c0       	rjmp	.+312    	; 0x1b7c <getChar+0x3f6>
    1a44:	87 c0       	rjmp	.+270    	; 0x1b54 <getChar+0x3ce>
    1a46:	8c 81       	ldd	r24, Y+4	; 0x04
    1a48:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4a:	88 36       	cpi	r24, 0x68	; 104
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <getChar+0x2cc>
    1a50:	b3 c0       	rjmp	.+358    	; 0x1bb8 <getChar+0x432>
    1a52:	2c 81       	ldd	r18, Y+4	; 0x04
    1a54:	3d 81       	ldd	r19, Y+5	; 0x05
    1a56:	29 36       	cpi	r18, 0x69	; 105
    1a58:	31 05       	cpc	r19, r1
    1a5a:	0c f0       	brlt	.+2      	; 0x1a5e <getChar+0x2d8>
    1a5c:	b7 c0       	rjmp	.+366    	; 0x1bcc <getChar+0x446>
    1a5e:	a2 c0       	rjmp	.+324    	; 0x1ba4 <getChar+0x41e>
    1a60:	8c 81       	ldd	r24, Y+4	; 0x04
    1a62:	9d 81       	ldd	r25, Y+5	; 0x05
    1a64:	82 37       	cpi	r24, 0x72	; 114
    1a66:	91 05       	cpc	r25, r1
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <getChar+0x2e6>
    1a6a:	0a c1       	rjmp	.+532    	; 0x1c80 <getChar+0x4fa>
    1a6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a70:	23 37       	cpi	r18, 0x73	; 115
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f5       	brge	.+74     	; 0x1ac0 <getChar+0x33a>
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7a:	8e 36       	cpi	r24, 0x6E	; 110
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <getChar+0x2fc>
    1a80:	d7 c0       	rjmp	.+430    	; 0x1c30 <getChar+0x4aa>
    1a82:	2c 81       	ldd	r18, Y+4	; 0x04
    1a84:	3d 81       	ldd	r19, Y+5	; 0x05
    1a86:	2f 36       	cpi	r18, 0x6F	; 111
    1a88:	31 05       	cpc	r19, r1
    1a8a:	6c f4       	brge	.+26     	; 0x1aa6 <getChar+0x320>
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a90:	8c 36       	cpi	r24, 0x6C	; 108
    1a92:	91 05       	cpc	r25, r1
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <getChar+0x312>
    1a96:	b8 c0       	rjmp	.+368    	; 0x1c08 <getChar+0x482>
    1a98:	2c 81       	ldd	r18, Y+4	; 0x04
    1a9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a9c:	2d 36       	cpi	r18, 0x6D	; 109
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	0c f0       	brlt	.+2      	; 0x1aa4 <getChar+0x31e>
    1aa2:	bc c0       	rjmp	.+376    	; 0x1c1c <getChar+0x496>
    1aa4:	a7 c0       	rjmp	.+334    	; 0x1bf4 <getChar+0x46e>
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aaa:	80 37       	cpi	r24, 0x70	; 112
    1aac:	91 05       	cpc	r25, r1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <getChar+0x32c>
    1ab0:	d3 c0       	rjmp	.+422    	; 0x1c58 <getChar+0x4d2>
    1ab2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab6:	21 37       	cpi	r18, 0x71	; 113
    1ab8:	31 05       	cpc	r19, r1
    1aba:	0c f0       	brlt	.+2      	; 0x1abe <getChar+0x338>
    1abc:	d7 c0       	rjmp	.+430    	; 0x1c6c <getChar+0x4e6>
    1abe:	c2 c0       	rjmp	.+388    	; 0x1c44 <getChar+0x4be>
    1ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac4:	86 37       	cpi	r24, 0x76	; 118
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <getChar+0x346>
    1aca:	02 c1       	rjmp	.+516    	; 0x1cd0 <getChar+0x54a>
    1acc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ace:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad0:	27 37       	cpi	r18, 0x77	; 119
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	6c f4       	brge	.+26     	; 0x1af0 <getChar+0x36a>
    1ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ada:	84 37       	cpi	r24, 0x74	; 116
    1adc:	91 05       	cpc	r25, r1
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <getChar+0x35c>
    1ae0:	e3 c0       	rjmp	.+454    	; 0x1ca8 <getChar+0x522>
    1ae2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae6:	25 37       	cpi	r18, 0x75	; 117
    1ae8:	31 05       	cpc	r19, r1
    1aea:	0c f0       	brlt	.+2      	; 0x1aee <getChar+0x368>
    1aec:	e7 c0       	rjmp	.+462    	; 0x1cbc <getChar+0x536>
    1aee:	d2 c0       	rjmp	.+420    	; 0x1c94 <getChar+0x50e>
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	9d 81       	ldd	r25, Y+5	; 0x05
    1af4:	88 37       	cpi	r24, 0x78	; 120
    1af6:	91 05       	cpc	r25, r1
    1af8:	09 f4       	brne	.+2      	; 0x1afc <getChar+0x376>
    1afa:	fe c0       	rjmp	.+508    	; 0x1cf8 <getChar+0x572>
    1afc:	2c 81       	ldd	r18, Y+4	; 0x04
    1afe:	3d 81       	ldd	r19, Y+5	; 0x05
    1b00:	28 37       	cpi	r18, 0x78	; 120
    1b02:	31 05       	cpc	r19, r1
    1b04:	0c f4       	brge	.+2      	; 0x1b08 <getChar+0x382>
    1b06:	ee c0       	rjmp	.+476    	; 0x1ce4 <getChar+0x55e>
    1b08:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0c:	89 37       	cpi	r24, 0x79	; 121
    1b0e:	91 05       	cpc	r25, r1
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <getChar+0x38e>
    1b12:	fc c0       	rjmp	.+504    	; 0x1d0c <getChar+0x586>
    1b14:	2c 81       	ldd	r18, Y+4	; 0x04
    1b16:	3d 81       	ldd	r19, Y+5	; 0x05
    1b18:	2a 37       	cpi	r18, 0x7A	; 122
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <getChar+0x39a>
    1b1e:	00 c1       	rjmp	.+512    	; 0x1d20 <getChar+0x59a>
    1b20:	59 c1       	rjmp	.+690    	; 0x1dd4 <getChar+0x64e>
	{
		case 'A': return CHAR_A;
    1b22:	81 e2       	ldi	r24, 0x21	; 33
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	9b 83       	std	Y+3, r25	; 0x03
    1b28:	8a 83       	std	Y+2, r24	; 0x02
    1b2a:	58 c1       	rjmp	.+688    	; 0x1ddc <getChar+0x656>
		case 'a': return CHAR_a;
    1b2c:	26 e2       	ldi	r18, 0x26	; 38
    1b2e:	31 e0       	ldi	r19, 0x01	; 1
    1b30:	3b 83       	std	Y+3, r19	; 0x03
    1b32:	2a 83       	std	Y+2, r18	; 0x02
    1b34:	53 c1       	rjmp	.+678    	; 0x1ddc <getChar+0x656>
		case 'B': return CHAR_B;
    1b36:	8b e2       	ldi	r24, 0x2B	; 43
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	9b 83       	std	Y+3, r25	; 0x03
    1b3c:	8a 83       	std	Y+2, r24	; 0x02
    1b3e:	4e c1       	rjmp	.+668    	; 0x1ddc <getChar+0x656>
		case 'b': return CHAR_b;
    1b40:	20 e3       	ldi	r18, 0x30	; 48
    1b42:	31 e0       	ldi	r19, 0x01	; 1
    1b44:	3b 83       	std	Y+3, r19	; 0x03
    1b46:	2a 83       	std	Y+2, r18	; 0x02
    1b48:	49 c1       	rjmp	.+658    	; 0x1ddc <getChar+0x656>
		case 'C': return CHAR_C;
    1b4a:	85 e3       	ldi	r24, 0x35	; 53
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	9b 83       	std	Y+3, r25	; 0x03
    1b50:	8a 83       	std	Y+2, r24	; 0x02
    1b52:	44 c1       	rjmp	.+648    	; 0x1ddc <getChar+0x656>
		case 'c': return CHAR_c;
    1b54:	2a e3       	ldi	r18, 0x3A	; 58
    1b56:	31 e0       	ldi	r19, 0x01	; 1
    1b58:	3b 83       	std	Y+3, r19	; 0x03
    1b5a:	2a 83       	std	Y+2, r18	; 0x02
    1b5c:	3f c1       	rjmp	.+638    	; 0x1ddc <getChar+0x656>
		case 'D': return CHAR_D;
    1b5e:	8f e3       	ldi	r24, 0x3F	; 63
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	9b 83       	std	Y+3, r25	; 0x03
    1b64:	8a 83       	std	Y+2, r24	; 0x02
    1b66:	3a c1       	rjmp	.+628    	; 0x1ddc <getChar+0x656>
		case 'd': return CHAR_d;
    1b68:	24 e4       	ldi	r18, 0x44	; 68
    1b6a:	31 e0       	ldi	r19, 0x01	; 1
    1b6c:	3b 83       	std	Y+3, r19	; 0x03
    1b6e:	2a 83       	std	Y+2, r18	; 0x02
    1b70:	35 c1       	rjmp	.+618    	; 0x1ddc <getChar+0x656>
		case 'E': return CHAR_E;
    1b72:	89 e4       	ldi	r24, 0x49	; 73
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	9b 83       	std	Y+3, r25	; 0x03
    1b78:	8a 83       	std	Y+2, r24	; 0x02
    1b7a:	30 c1       	rjmp	.+608    	; 0x1ddc <getChar+0x656>
		case 'e': return CHAR_e;
    1b7c:	2e e4       	ldi	r18, 0x4E	; 78
    1b7e:	31 e0       	ldi	r19, 0x01	; 1
    1b80:	3b 83       	std	Y+3, r19	; 0x03
    1b82:	2a 83       	std	Y+2, r18	; 0x02
    1b84:	2b c1       	rjmp	.+598    	; 0x1ddc <getChar+0x656>
		case 'F': return CHAR_F;
    1b86:	83 e5       	ldi	r24, 0x53	; 83
    1b88:	91 e0       	ldi	r25, 0x01	; 1
    1b8a:	9b 83       	std	Y+3, r25	; 0x03
    1b8c:	8a 83       	std	Y+2, r24	; 0x02
    1b8e:	26 c1       	rjmp	.+588    	; 0x1ddc <getChar+0x656>
		case 'f': return CHAR_f;
    1b90:	28 e5       	ldi	r18, 0x58	; 88
    1b92:	31 e0       	ldi	r19, 0x01	; 1
    1b94:	3b 83       	std	Y+3, r19	; 0x03
    1b96:	2a 83       	std	Y+2, r18	; 0x02
    1b98:	21 c1       	rjmp	.+578    	; 0x1ddc <getChar+0x656>
		case 'G': return CHAR_G;
    1b9a:	8d e5       	ldi	r24, 0x5D	; 93
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	9b 83       	std	Y+3, r25	; 0x03
    1ba0:	8a 83       	std	Y+2, r24	; 0x02
    1ba2:	1c c1       	rjmp	.+568    	; 0x1ddc <getChar+0x656>
		case 'g': return CHAR_g;
    1ba4:	22 e6       	ldi	r18, 0x62	; 98
    1ba6:	31 e0       	ldi	r19, 0x01	; 1
    1ba8:	3b 83       	std	Y+3, r19	; 0x03
    1baa:	2a 83       	std	Y+2, r18	; 0x02
    1bac:	17 c1       	rjmp	.+558    	; 0x1ddc <getChar+0x656>
		case 'H': return CHAR_H;
    1bae:	87 e6       	ldi	r24, 0x67	; 103
    1bb0:	91 e0       	ldi	r25, 0x01	; 1
    1bb2:	9b 83       	std	Y+3, r25	; 0x03
    1bb4:	8a 83       	std	Y+2, r24	; 0x02
    1bb6:	12 c1       	rjmp	.+548    	; 0x1ddc <getChar+0x656>
		case 'h': return CHAR_h;
    1bb8:	2c e6       	ldi	r18, 0x6C	; 108
    1bba:	31 e0       	ldi	r19, 0x01	; 1
    1bbc:	3b 83       	std	Y+3, r19	; 0x03
    1bbe:	2a 83       	std	Y+2, r18	; 0x02
    1bc0:	0d c1       	rjmp	.+538    	; 0x1ddc <getChar+0x656>
		case 'I': return CHAR_I;
    1bc2:	81 e7       	ldi	r24, 0x71	; 113
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	9b 83       	std	Y+3, r25	; 0x03
    1bc8:	8a 83       	std	Y+2, r24	; 0x02
    1bca:	08 c1       	rjmp	.+528    	; 0x1ddc <getChar+0x656>
		case 'i': return CHAR_i;
    1bcc:	26 e7       	ldi	r18, 0x76	; 118
    1bce:	31 e0       	ldi	r19, 0x01	; 1
    1bd0:	3b 83       	std	Y+3, r19	; 0x03
    1bd2:	2a 83       	std	Y+2, r18	; 0x02
    1bd4:	03 c1       	rjmp	.+518    	; 0x1ddc <getChar+0x656>
		case 'J': return CHAR_J;
    1bd6:	8b e7       	ldi	r24, 0x7B	; 123
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	9b 83       	std	Y+3, r25	; 0x03
    1bdc:	8a 83       	std	Y+2, r24	; 0x02
    1bde:	fe c0       	rjmp	.+508    	; 0x1ddc <getChar+0x656>
		case 'j': return CHAR_j;
    1be0:	20 e8       	ldi	r18, 0x80	; 128
    1be2:	31 e0       	ldi	r19, 0x01	; 1
    1be4:	3b 83       	std	Y+3, r19	; 0x03
    1be6:	2a 83       	std	Y+2, r18	; 0x02
    1be8:	f9 c0       	rjmp	.+498    	; 0x1ddc <getChar+0x656>
		case 'K': return CHAR_K;
    1bea:	85 e8       	ldi	r24, 0x85	; 133
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	9b 83       	std	Y+3, r25	; 0x03
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	f4 c0       	rjmp	.+488    	; 0x1ddc <getChar+0x656>
		case 'k': return CHAR_k;
    1bf4:	2a e8       	ldi	r18, 0x8A	; 138
    1bf6:	31 e0       	ldi	r19, 0x01	; 1
    1bf8:	3b 83       	std	Y+3, r19	; 0x03
    1bfa:	2a 83       	std	Y+2, r18	; 0x02
    1bfc:	ef c0       	rjmp	.+478    	; 0x1ddc <getChar+0x656>
		case 'L': return CHAR_L;
    1bfe:	8f e8       	ldi	r24, 0x8F	; 143
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	9b 83       	std	Y+3, r25	; 0x03
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	ea c0       	rjmp	.+468    	; 0x1ddc <getChar+0x656>
		case 'l': return CHAR_l;
    1c08:	24 e9       	ldi	r18, 0x94	; 148
    1c0a:	31 e0       	ldi	r19, 0x01	; 1
    1c0c:	3b 83       	std	Y+3, r19	; 0x03
    1c0e:	2a 83       	std	Y+2, r18	; 0x02
    1c10:	e5 c0       	rjmp	.+458    	; 0x1ddc <getChar+0x656>
		case 'M': return CHAR_M;
    1c12:	89 e9       	ldi	r24, 0x99	; 153
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	9b 83       	std	Y+3, r25	; 0x03
    1c18:	8a 83       	std	Y+2, r24	; 0x02
    1c1a:	e0 c0       	rjmp	.+448    	; 0x1ddc <getChar+0x656>
		case 'm': return CHAR_m;
    1c1c:	2e e9       	ldi	r18, 0x9E	; 158
    1c1e:	31 e0       	ldi	r19, 0x01	; 1
    1c20:	3b 83       	std	Y+3, r19	; 0x03
    1c22:	2a 83       	std	Y+2, r18	; 0x02
    1c24:	db c0       	rjmp	.+438    	; 0x1ddc <getChar+0x656>
		case 'N': return CHAR_N;
    1c26:	83 ea       	ldi	r24, 0xA3	; 163
    1c28:	91 e0       	ldi	r25, 0x01	; 1
    1c2a:	9b 83       	std	Y+3, r25	; 0x03
    1c2c:	8a 83       	std	Y+2, r24	; 0x02
    1c2e:	d6 c0       	rjmp	.+428    	; 0x1ddc <getChar+0x656>
		case 'n': return CHAR_n;
    1c30:	28 ea       	ldi	r18, 0xA8	; 168
    1c32:	31 e0       	ldi	r19, 0x01	; 1
    1c34:	3b 83       	std	Y+3, r19	; 0x03
    1c36:	2a 83       	std	Y+2, r18	; 0x02
    1c38:	d1 c0       	rjmp	.+418    	; 0x1ddc <getChar+0x656>
		case 'O': return CHAR_O;
    1c3a:	8d ea       	ldi	r24, 0xAD	; 173
    1c3c:	91 e0       	ldi	r25, 0x01	; 1
    1c3e:	9b 83       	std	Y+3, r25	; 0x03
    1c40:	8a 83       	std	Y+2, r24	; 0x02
    1c42:	cc c0       	rjmp	.+408    	; 0x1ddc <getChar+0x656>
		case 'o': return CHAR_o;
    1c44:	22 eb       	ldi	r18, 0xB2	; 178
    1c46:	31 e0       	ldi	r19, 0x01	; 1
    1c48:	3b 83       	std	Y+3, r19	; 0x03
    1c4a:	2a 83       	std	Y+2, r18	; 0x02
    1c4c:	c7 c0       	rjmp	.+398    	; 0x1ddc <getChar+0x656>
		case 'P': return CHAR_P;
    1c4e:	87 eb       	ldi	r24, 0xB7	; 183
    1c50:	91 e0       	ldi	r25, 0x01	; 1
    1c52:	9b 83       	std	Y+3, r25	; 0x03
    1c54:	8a 83       	std	Y+2, r24	; 0x02
    1c56:	c2 c0       	rjmp	.+388    	; 0x1ddc <getChar+0x656>
		case 'p': return CHAR_p;
    1c58:	2c eb       	ldi	r18, 0xBC	; 188
    1c5a:	31 e0       	ldi	r19, 0x01	; 1
    1c5c:	3b 83       	std	Y+3, r19	; 0x03
    1c5e:	2a 83       	std	Y+2, r18	; 0x02
    1c60:	bd c0       	rjmp	.+378    	; 0x1ddc <getChar+0x656>
		case 'Q': return CHAR_Q;
    1c62:	81 ec       	ldi	r24, 0xC1	; 193
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	9b 83       	std	Y+3, r25	; 0x03
    1c68:	8a 83       	std	Y+2, r24	; 0x02
    1c6a:	b8 c0       	rjmp	.+368    	; 0x1ddc <getChar+0x656>
		case 'q': return CHAR_q;
    1c6c:	26 ec       	ldi	r18, 0xC6	; 198
    1c6e:	31 e0       	ldi	r19, 0x01	; 1
    1c70:	3b 83       	std	Y+3, r19	; 0x03
    1c72:	2a 83       	std	Y+2, r18	; 0x02
    1c74:	b3 c0       	rjmp	.+358    	; 0x1ddc <getChar+0x656>
		case 'R': return CHAR_R;
    1c76:	8b ec       	ldi	r24, 0xCB	; 203
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	9b 83       	std	Y+3, r25	; 0x03
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	ae c0       	rjmp	.+348    	; 0x1ddc <getChar+0x656>
		case 'r': return CHAR_r;
    1c80:	20 ed       	ldi	r18, 0xD0	; 208
    1c82:	31 e0       	ldi	r19, 0x01	; 1
    1c84:	3b 83       	std	Y+3, r19	; 0x03
    1c86:	2a 83       	std	Y+2, r18	; 0x02
    1c88:	a9 c0       	rjmp	.+338    	; 0x1ddc <getChar+0x656>
		case 'S': return CHAR_S;
    1c8a:	85 ed       	ldi	r24, 0xD5	; 213
    1c8c:	91 e0       	ldi	r25, 0x01	; 1
    1c8e:	9b 83       	std	Y+3, r25	; 0x03
    1c90:	8a 83       	std	Y+2, r24	; 0x02
    1c92:	a4 c0       	rjmp	.+328    	; 0x1ddc <getChar+0x656>
		case 's': return CHAR_s;
    1c94:	2a ed       	ldi	r18, 0xDA	; 218
    1c96:	31 e0       	ldi	r19, 0x01	; 1
    1c98:	3b 83       	std	Y+3, r19	; 0x03
    1c9a:	2a 83       	std	Y+2, r18	; 0x02
    1c9c:	9f c0       	rjmp	.+318    	; 0x1ddc <getChar+0x656>
		case 'T': return CHAR_T;
    1c9e:	8f ed       	ldi	r24, 0xDF	; 223
    1ca0:	91 e0       	ldi	r25, 0x01	; 1
    1ca2:	9b 83       	std	Y+3, r25	; 0x03
    1ca4:	8a 83       	std	Y+2, r24	; 0x02
    1ca6:	9a c0       	rjmp	.+308    	; 0x1ddc <getChar+0x656>
		case 't': return CHAR_t;
    1ca8:	24 ee       	ldi	r18, 0xE4	; 228
    1caa:	31 e0       	ldi	r19, 0x01	; 1
    1cac:	3b 83       	std	Y+3, r19	; 0x03
    1cae:	2a 83       	std	Y+2, r18	; 0x02
    1cb0:	95 c0       	rjmp	.+298    	; 0x1ddc <getChar+0x656>
		case 'U': return CHAR_U;
    1cb2:	89 ee       	ldi	r24, 0xE9	; 233
    1cb4:	91 e0       	ldi	r25, 0x01	; 1
    1cb6:	9b 83       	std	Y+3, r25	; 0x03
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
    1cba:	90 c0       	rjmp	.+288    	; 0x1ddc <getChar+0x656>
		case 'u': return CHAR_u;
    1cbc:	2e ee       	ldi	r18, 0xEE	; 238
    1cbe:	31 e0       	ldi	r19, 0x01	; 1
    1cc0:	3b 83       	std	Y+3, r19	; 0x03
    1cc2:	2a 83       	std	Y+2, r18	; 0x02
    1cc4:	8b c0       	rjmp	.+278    	; 0x1ddc <getChar+0x656>
		case 'V': return CHAR_V;
    1cc6:	83 ef       	ldi	r24, 0xF3	; 243
    1cc8:	91 e0       	ldi	r25, 0x01	; 1
    1cca:	9b 83       	std	Y+3, r25	; 0x03
    1ccc:	8a 83       	std	Y+2, r24	; 0x02
    1cce:	86 c0       	rjmp	.+268    	; 0x1ddc <getChar+0x656>
		case 'v': return CHAR_v;
    1cd0:	28 ef       	ldi	r18, 0xF8	; 248
    1cd2:	31 e0       	ldi	r19, 0x01	; 1
    1cd4:	3b 83       	std	Y+3, r19	; 0x03
    1cd6:	2a 83       	std	Y+2, r18	; 0x02
    1cd8:	81 c0       	rjmp	.+258    	; 0x1ddc <getChar+0x656>
		case 'W': return CHAR_W;
    1cda:	8d ef       	ldi	r24, 0xFD	; 253
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	9b 83       	std	Y+3, r25	; 0x03
    1ce0:	8a 83       	std	Y+2, r24	; 0x02
    1ce2:	7c c0       	rjmp	.+248    	; 0x1ddc <getChar+0x656>
		case 'w': return CHAR_w;
    1ce4:	22 e0       	ldi	r18, 0x02	; 2
    1ce6:	32 e0       	ldi	r19, 0x02	; 2
    1ce8:	3b 83       	std	Y+3, r19	; 0x03
    1cea:	2a 83       	std	Y+2, r18	; 0x02
    1cec:	77 c0       	rjmp	.+238    	; 0x1ddc <getChar+0x656>
		case 'X': return CHAR_X;
    1cee:	87 e0       	ldi	r24, 0x07	; 7
    1cf0:	92 e0       	ldi	r25, 0x02	; 2
    1cf2:	9b 83       	std	Y+3, r25	; 0x03
    1cf4:	8a 83       	std	Y+2, r24	; 0x02
    1cf6:	72 c0       	rjmp	.+228    	; 0x1ddc <getChar+0x656>
		case 'x': return CHAR_x;
    1cf8:	2c e0       	ldi	r18, 0x0C	; 12
    1cfa:	32 e0       	ldi	r19, 0x02	; 2
    1cfc:	3b 83       	std	Y+3, r19	; 0x03
    1cfe:	2a 83       	std	Y+2, r18	; 0x02
    1d00:	6d c0       	rjmp	.+218    	; 0x1ddc <getChar+0x656>
		case 'Y': return CHAR_Y;
    1d02:	81 e1       	ldi	r24, 0x11	; 17
    1d04:	92 e0       	ldi	r25, 0x02	; 2
    1d06:	9b 83       	std	Y+3, r25	; 0x03
    1d08:	8a 83       	std	Y+2, r24	; 0x02
    1d0a:	68 c0       	rjmp	.+208    	; 0x1ddc <getChar+0x656>
		case 'y': return CHAR_y;
    1d0c:	26 e1       	ldi	r18, 0x16	; 22
    1d0e:	32 e0       	ldi	r19, 0x02	; 2
    1d10:	3b 83       	std	Y+3, r19	; 0x03
    1d12:	2a 83       	std	Y+2, r18	; 0x02
    1d14:	63 c0       	rjmp	.+198    	; 0x1ddc <getChar+0x656>
		case 'Z': return CHAR_Z;
    1d16:	8b e1       	ldi	r24, 0x1B	; 27
    1d18:	92 e0       	ldi	r25, 0x02	; 2
    1d1a:	9b 83       	std	Y+3, r25	; 0x03
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
    1d1e:	5e c0       	rjmp	.+188    	; 0x1ddc <getChar+0x656>
		case 'z': return CHAR_z;
    1d20:	20 e2       	ldi	r18, 0x20	; 32
    1d22:	32 e0       	ldi	r19, 0x02	; 2
    1d24:	3b 83       	std	Y+3, r19	; 0x03
    1d26:	2a 83       	std	Y+2, r18	; 0x02
    1d28:	59 c0       	rjmp	.+178    	; 0x1ddc <getChar+0x656>

		case '0': return CHAR_0;
    1d2a:	85 e2       	ldi	r24, 0x25	; 37
    1d2c:	92 e0       	ldi	r25, 0x02	; 2
    1d2e:	9b 83       	std	Y+3, r25	; 0x03
    1d30:	8a 83       	std	Y+2, r24	; 0x02
    1d32:	54 c0       	rjmp	.+168    	; 0x1ddc <getChar+0x656>
		case '1': return CHAR_1;
    1d34:	2a e2       	ldi	r18, 0x2A	; 42
    1d36:	32 e0       	ldi	r19, 0x02	; 2
    1d38:	3b 83       	std	Y+3, r19	; 0x03
    1d3a:	2a 83       	std	Y+2, r18	; 0x02
    1d3c:	4f c0       	rjmp	.+158    	; 0x1ddc <getChar+0x656>
		case '2': return CHAR_2;
    1d3e:	8f e2       	ldi	r24, 0x2F	; 47
    1d40:	92 e0       	ldi	r25, 0x02	; 2
    1d42:	9b 83       	std	Y+3, r25	; 0x03
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	4a c0       	rjmp	.+148    	; 0x1ddc <getChar+0x656>
		case '3': return CHAR_3;
    1d48:	24 e3       	ldi	r18, 0x34	; 52
    1d4a:	32 e0       	ldi	r19, 0x02	; 2
    1d4c:	3b 83       	std	Y+3, r19	; 0x03
    1d4e:	2a 83       	std	Y+2, r18	; 0x02
    1d50:	45 c0       	rjmp	.+138    	; 0x1ddc <getChar+0x656>
		case '4': return CHAR_4;
    1d52:	89 e3       	ldi	r24, 0x39	; 57
    1d54:	92 e0       	ldi	r25, 0x02	; 2
    1d56:	9b 83       	std	Y+3, r25	; 0x03
    1d58:	8a 83       	std	Y+2, r24	; 0x02
    1d5a:	40 c0       	rjmp	.+128    	; 0x1ddc <getChar+0x656>
		case '5': return CHAR_5;
    1d5c:	2e e3       	ldi	r18, 0x3E	; 62
    1d5e:	32 e0       	ldi	r19, 0x02	; 2
    1d60:	3b 83       	std	Y+3, r19	; 0x03
    1d62:	2a 83       	std	Y+2, r18	; 0x02
    1d64:	3b c0       	rjmp	.+118    	; 0x1ddc <getChar+0x656>
		case '6': return CHAR_6;
    1d66:	83 e4       	ldi	r24, 0x43	; 67
    1d68:	92 e0       	ldi	r25, 0x02	; 2
    1d6a:	9b 83       	std	Y+3, r25	; 0x03
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
    1d6e:	36 c0       	rjmp	.+108    	; 0x1ddc <getChar+0x656>
		case '7': return CHAR_7;
    1d70:	28 e4       	ldi	r18, 0x48	; 72
    1d72:	32 e0       	ldi	r19, 0x02	; 2
    1d74:	3b 83       	std	Y+3, r19	; 0x03
    1d76:	2a 83       	std	Y+2, r18	; 0x02
    1d78:	31 c0       	rjmp	.+98     	; 0x1ddc <getChar+0x656>
		case '8': return CHAR_8;
    1d7a:	8d e4       	ldi	r24, 0x4D	; 77
    1d7c:	92 e0       	ldi	r25, 0x02	; 2
    1d7e:	9b 83       	std	Y+3, r25	; 0x03
    1d80:	8a 83       	std	Y+2, r24	; 0x02
    1d82:	2c c0       	rjmp	.+88     	; 0x1ddc <getChar+0x656>
		case '9': return CHAR_9;
    1d84:	22 e5       	ldi	r18, 0x52	; 82
    1d86:	32 e0       	ldi	r19, 0x02	; 2
    1d88:	3b 83       	std	Y+3, r19	; 0x03
    1d8a:	2a 83       	std	Y+2, r18	; 0x02
    1d8c:	27 c0       	rjmp	.+78     	; 0x1ddc <getChar+0x656>

		case '.': return CHAR_DOT;
    1d8e:	87 e5       	ldi	r24, 0x57	; 87
    1d90:	92 e0       	ldi	r25, 0x02	; 2
    1d92:	9b 83       	std	Y+3, r25	; 0x03
    1d94:	8a 83       	std	Y+2, r24	; 0x02
    1d96:	22 c0       	rjmp	.+68     	; 0x1ddc <getChar+0x656>
		case ',': return CHAR_COMMA;
    1d98:	2c e5       	ldi	r18, 0x5C	; 92
    1d9a:	32 e0       	ldi	r19, 0x02	; 2
    1d9c:	3b 83       	std	Y+3, r19	; 0x03
    1d9e:	2a 83       	std	Y+2, r18	; 0x02
    1da0:	1d c0       	rjmp	.+58     	; 0x1ddc <getChar+0x656>
		case '-': return CHAR_DASH;
    1da2:	81 e6       	ldi	r24, 0x61	; 97
    1da4:	92 e0       	ldi	r25, 0x02	; 2
    1da6:	9b 83       	std	Y+3, r25	; 0x03
    1da8:	8a 83       	std	Y+2, r24	; 0x02
    1daa:	18 c0       	rjmp	.+48     	; 0x1ddc <getChar+0x656>
		case '"': return CHAR_CITATION;
    1dac:	26 e6       	ldi	r18, 0x66	; 102
    1dae:	32 e0       	ldi	r19, 0x02	; 2
    1db0:	3b 83       	std	Y+3, r19	; 0x03
    1db2:	2a 83       	std	Y+2, r18	; 0x02
    1db4:	13 c0       	rjmp	.+38     	; 0x1ddc <getChar+0x656>
		case '!': return CHAR_EXCLAMATION;
    1db6:	80 e7       	ldi	r24, 0x70	; 112
    1db8:	92 e0       	ldi	r25, 0x02	; 2
    1dba:	9b 83       	std	Y+3, r25	; 0x03
    1dbc:	8a 83       	std	Y+2, r24	; 0x02
    1dbe:	0e c0       	rjmp	.+28     	; 0x1ddc <getChar+0x656>
		case '?': return CHAR_QUESTION;
    1dc0:	25 e7       	ldi	r18, 0x75	; 117
    1dc2:	32 e0       	ldi	r19, 0x02	; 2
    1dc4:	3b 83       	std	Y+3, r19	; 0x03
    1dc6:	2a 83       	std	Y+2, r18	; 0x02
    1dc8:	09 c0       	rjmp	.+18     	; 0x1ddc <getChar+0x656>
		case ':': return CHAR_COLON;
    1dca:	8a e7       	ldi	r24, 0x7A	; 122
    1dcc:	92 e0       	ldi	r25, 0x02	; 2
    1dce:	9b 83       	std	Y+3, r25	; 0x03
    1dd0:	8a 83       	std	Y+2, r24	; 0x02
    1dd2:	04 c0       	rjmp	.+8      	; 0x1ddc <getChar+0x656>
		default: return CHAR_SPACE;
    1dd4:	21 e9       	ldi	r18, 0x91	; 145
    1dd6:	32 e0       	ldi	r19, 0x02	; 2
    1dd8:	3b 83       	std	Y+3, r19	; 0x03
    1dda:	2a 83       	std	Y+2, r18	; 0x02
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <flip>:

void flip(unsigned char* c1, unsigned char* c2)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <flip+0x6>
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <flip+0x8>
    1df8:	0f 92       	push	r0
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	9b 83       	std	Y+3, r25	; 0x03
    1e00:	8a 83       	std	Y+2, r24	; 0x02
    1e02:	7d 83       	std	Y+5, r23	; 0x05
    1e04:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char temp = *c1;
    1e06:	ea 81       	ldd	r30, Y+2	; 0x02
    1e08:	fb 81       	ldd	r31, Y+3	; 0x03
    1e0a:	80 81       	ld	r24, Z
    1e0c:	89 83       	std	Y+1, r24	; 0x01
	*c1 = *c2;
    1e0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e10:	fd 81       	ldd	r31, Y+5	; 0x05
    1e12:	80 81       	ld	r24, Z
    1e14:	ea 81       	ldd	r30, Y+2	; 0x02
    1e16:	fb 81       	ldd	r31, Y+3	; 0x03
    1e18:	80 83       	st	Z, r24
	*c2 = temp;
    1e1a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e1c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	80 83       	st	Z, r24
	temp = 0;
    1e22:	19 82       	std	Y+1, r1	; 0x01
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <__fixunssfsi>:
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	7b 01       	movw	r14, r22
    1e3e:	8c 01       	movw	r16, r24
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	5f e4       	ldi	r21, 0x4F	; 79
    1e48:	0e 94 1a 12 	call	0x2434	; 0x2434 <__gesf2>
    1e4c:	88 23       	and	r24, r24
    1e4e:	8c f0       	brlt	.+34     	; 0x1e72 <__fixunssfsi+0x3e>
    1e50:	c8 01       	movw	r24, r16
    1e52:	b7 01       	movw	r22, r14
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	5f e4       	ldi	r21, 0x4F	; 79
    1e5c:	0e 94 92 10 	call	0x2124	; 0x2124 <__subsf3>
    1e60:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__fixsfsi>
    1e64:	9b 01       	movw	r18, r22
    1e66:	ac 01       	movw	r20, r24
    1e68:	20 50       	subi	r18, 0x00	; 0
    1e6a:	30 40       	sbci	r19, 0x00	; 0
    1e6c:	40 40       	sbci	r20, 0x00	; 0
    1e6e:	50 48       	sbci	r21, 0x80	; 128
    1e70:	06 c0       	rjmp	.+12     	; 0x1e7e <__fixunssfsi+0x4a>
    1e72:	c8 01       	movw	r24, r16
    1e74:	b7 01       	movw	r22, r14
    1e76:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__fixsfsi>
    1e7a:	9b 01       	movw	r18, r22
    1e7c:	ac 01       	movw	r20, r24
    1e7e:	b9 01       	movw	r22, r18
    1e80:	ca 01       	movw	r24, r20
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	ff 90       	pop	r15
    1e88:	ef 90       	pop	r14
    1e8a:	08 95       	ret

00001e8c <_fpadd_parts>:
    1e8c:	a0 e0       	ldi	r26, 0x00	; 0
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	ec e4       	ldi	r30, 0x4C	; 76
    1e92:	ff e0       	ldi	r31, 0x0F	; 15
    1e94:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	2b 01       	movw	r4, r22
    1e9c:	fa 01       	movw	r30, r20
    1e9e:	9c 91       	ld	r25, X
    1ea0:	92 30       	cpi	r25, 0x02	; 2
    1ea2:	08 f4       	brcc	.+2      	; 0x1ea6 <_fpadd_parts+0x1a>
    1ea4:	39 c1       	rjmp	.+626    	; 0x2118 <_fpadd_parts+0x28c>
    1ea6:	eb 01       	movw	r28, r22
    1ea8:	88 81       	ld	r24, Y
    1eaa:	82 30       	cpi	r24, 0x02	; 2
    1eac:	08 f4       	brcc	.+2      	; 0x1eb0 <_fpadd_parts+0x24>
    1eae:	33 c1       	rjmp	.+614    	; 0x2116 <_fpadd_parts+0x28a>
    1eb0:	94 30       	cpi	r25, 0x04	; 4
    1eb2:	69 f4       	brne	.+26     	; 0x1ece <_fpadd_parts+0x42>
    1eb4:	84 30       	cpi	r24, 0x04	; 4
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <_fpadd_parts+0x2e>
    1eb8:	2f c1       	rjmp	.+606    	; 0x2118 <_fpadd_parts+0x28c>
    1eba:	11 96       	adiw	r26, 0x01	; 1
    1ebc:	9c 91       	ld	r25, X
    1ebe:	11 97       	sbiw	r26, 0x01	; 1
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	98 17       	cp	r25, r24
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <_fpadd_parts+0x3c>
    1ec6:	28 c1       	rjmp	.+592    	; 0x2118 <_fpadd_parts+0x28c>
    1ec8:	af e7       	ldi	r26, 0x7F	; 127
    1eca:	b2 e0       	ldi	r27, 0x02	; 2
    1ecc:	25 c1       	rjmp	.+586    	; 0x2118 <_fpadd_parts+0x28c>
    1ece:	84 30       	cpi	r24, 0x04	; 4
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <_fpadd_parts+0x48>
    1ed2:	21 c1       	rjmp	.+578    	; 0x2116 <_fpadd_parts+0x28a>
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	a9 f4       	brne	.+42     	; 0x1f02 <_fpadd_parts+0x76>
    1ed8:	92 30       	cpi	r25, 0x02	; 2
    1eda:	09 f0       	breq	.+2      	; 0x1ede <_fpadd_parts+0x52>
    1edc:	1d c1       	rjmp	.+570    	; 0x2118 <_fpadd_parts+0x28c>
    1ede:	9a 01       	movw	r18, r20
    1ee0:	ad 01       	movw	r20, r26
    1ee2:	88 e0       	ldi	r24, 0x08	; 8
    1ee4:	ea 01       	movw	r28, r20
    1ee6:	09 90       	ld	r0, Y+
    1ee8:	ae 01       	movw	r20, r28
    1eea:	e9 01       	movw	r28, r18
    1eec:	09 92       	st	Y+, r0
    1eee:	9e 01       	movw	r18, r28
    1ef0:	81 50       	subi	r24, 0x01	; 1
    1ef2:	c1 f7       	brne	.-16     	; 0x1ee4 <_fpadd_parts+0x58>
    1ef4:	e2 01       	movw	r28, r4
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	11 96       	adiw	r26, 0x01	; 1
    1efa:	9c 91       	ld	r25, X
    1efc:	89 23       	and	r24, r25
    1efe:	81 83       	std	Z+1, r24	; 0x01
    1f00:	08 c1       	rjmp	.+528    	; 0x2112 <_fpadd_parts+0x286>
    1f02:	92 30       	cpi	r25, 0x02	; 2
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <_fpadd_parts+0x7c>
    1f06:	07 c1       	rjmp	.+526    	; 0x2116 <_fpadd_parts+0x28a>
    1f08:	12 96       	adiw	r26, 0x02	; 2
    1f0a:	2d 90       	ld	r2, X+
    1f0c:	3c 90       	ld	r3, X
    1f0e:	13 97       	sbiw	r26, 0x03	; 3
    1f10:	eb 01       	movw	r28, r22
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	9b 81       	ldd	r25, Y+3	; 0x03
    1f16:	14 96       	adiw	r26, 0x04	; 4
    1f18:	ad 90       	ld	r10, X+
    1f1a:	bd 90       	ld	r11, X+
    1f1c:	cd 90       	ld	r12, X+
    1f1e:	dc 90       	ld	r13, X
    1f20:	17 97       	sbiw	r26, 0x07	; 7
    1f22:	ec 80       	ldd	r14, Y+4	; 0x04
    1f24:	fd 80       	ldd	r15, Y+5	; 0x05
    1f26:	0e 81       	ldd	r16, Y+6	; 0x06
    1f28:	1f 81       	ldd	r17, Y+7	; 0x07
    1f2a:	91 01       	movw	r18, r2
    1f2c:	28 1b       	sub	r18, r24
    1f2e:	39 0b       	sbc	r19, r25
    1f30:	b9 01       	movw	r22, r18
    1f32:	37 ff       	sbrs	r19, 7
    1f34:	04 c0       	rjmp	.+8      	; 0x1f3e <_fpadd_parts+0xb2>
    1f36:	66 27       	eor	r22, r22
    1f38:	77 27       	eor	r23, r23
    1f3a:	62 1b       	sub	r22, r18
    1f3c:	73 0b       	sbc	r23, r19
    1f3e:	60 32       	cpi	r22, 0x20	; 32
    1f40:	71 05       	cpc	r23, r1
    1f42:	0c f0       	brlt	.+2      	; 0x1f46 <_fpadd_parts+0xba>
    1f44:	61 c0       	rjmp	.+194    	; 0x2008 <_fpadd_parts+0x17c>
    1f46:	12 16       	cp	r1, r18
    1f48:	13 06       	cpc	r1, r19
    1f4a:	6c f5       	brge	.+90     	; 0x1fa6 <_fpadd_parts+0x11a>
    1f4c:	37 01       	movw	r6, r14
    1f4e:	48 01       	movw	r8, r16
    1f50:	06 2e       	mov	r0, r22
    1f52:	04 c0       	rjmp	.+8      	; 0x1f5c <_fpadd_parts+0xd0>
    1f54:	96 94       	lsr	r9
    1f56:	87 94       	ror	r8
    1f58:	77 94       	ror	r7
    1f5a:	67 94       	ror	r6
    1f5c:	0a 94       	dec	r0
    1f5e:	d2 f7       	brpl	.-12     	; 0x1f54 <_fpadd_parts+0xc8>
    1f60:	21 e0       	ldi	r18, 0x01	; 1
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	50 e0       	ldi	r21, 0x00	; 0
    1f68:	04 c0       	rjmp	.+8      	; 0x1f72 <_fpadd_parts+0xe6>
    1f6a:	22 0f       	add	r18, r18
    1f6c:	33 1f       	adc	r19, r19
    1f6e:	44 1f       	adc	r20, r20
    1f70:	55 1f       	adc	r21, r21
    1f72:	6a 95       	dec	r22
    1f74:	d2 f7       	brpl	.-12     	; 0x1f6a <_fpadd_parts+0xde>
    1f76:	21 50       	subi	r18, 0x01	; 1
    1f78:	30 40       	sbci	r19, 0x00	; 0
    1f7a:	40 40       	sbci	r20, 0x00	; 0
    1f7c:	50 40       	sbci	r21, 0x00	; 0
    1f7e:	2e 21       	and	r18, r14
    1f80:	3f 21       	and	r19, r15
    1f82:	40 23       	and	r20, r16
    1f84:	51 23       	and	r21, r17
    1f86:	21 15       	cp	r18, r1
    1f88:	31 05       	cpc	r19, r1
    1f8a:	41 05       	cpc	r20, r1
    1f8c:	51 05       	cpc	r21, r1
    1f8e:	21 f0       	breq	.+8      	; 0x1f98 <_fpadd_parts+0x10c>
    1f90:	21 e0       	ldi	r18, 0x01	; 1
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	79 01       	movw	r14, r18
    1f9a:	8a 01       	movw	r16, r20
    1f9c:	e6 28       	or	r14, r6
    1f9e:	f7 28       	or	r15, r7
    1fa0:	08 29       	or	r16, r8
    1fa2:	19 29       	or	r17, r9
    1fa4:	3c c0       	rjmp	.+120    	; 0x201e <_fpadd_parts+0x192>
    1fa6:	23 2b       	or	r18, r19
    1fa8:	d1 f1       	breq	.+116    	; 0x201e <_fpadd_parts+0x192>
    1faa:	26 0e       	add	r2, r22
    1fac:	37 1e       	adc	r3, r23
    1fae:	35 01       	movw	r6, r10
    1fb0:	46 01       	movw	r8, r12
    1fb2:	06 2e       	mov	r0, r22
    1fb4:	04 c0       	rjmp	.+8      	; 0x1fbe <_fpadd_parts+0x132>
    1fb6:	96 94       	lsr	r9
    1fb8:	87 94       	ror	r8
    1fba:	77 94       	ror	r7
    1fbc:	67 94       	ror	r6
    1fbe:	0a 94       	dec	r0
    1fc0:	d2 f7       	brpl	.-12     	; 0x1fb6 <_fpadd_parts+0x12a>
    1fc2:	21 e0       	ldi	r18, 0x01	; 1
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	50 e0       	ldi	r21, 0x00	; 0
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <_fpadd_parts+0x148>
    1fcc:	22 0f       	add	r18, r18
    1fce:	33 1f       	adc	r19, r19
    1fd0:	44 1f       	adc	r20, r20
    1fd2:	55 1f       	adc	r21, r21
    1fd4:	6a 95       	dec	r22
    1fd6:	d2 f7       	brpl	.-12     	; 0x1fcc <_fpadd_parts+0x140>
    1fd8:	21 50       	subi	r18, 0x01	; 1
    1fda:	30 40       	sbci	r19, 0x00	; 0
    1fdc:	40 40       	sbci	r20, 0x00	; 0
    1fde:	50 40       	sbci	r21, 0x00	; 0
    1fe0:	2a 21       	and	r18, r10
    1fe2:	3b 21       	and	r19, r11
    1fe4:	4c 21       	and	r20, r12
    1fe6:	5d 21       	and	r21, r13
    1fe8:	21 15       	cp	r18, r1
    1fea:	31 05       	cpc	r19, r1
    1fec:	41 05       	cpc	r20, r1
    1fee:	51 05       	cpc	r21, r1
    1ff0:	21 f0       	breq	.+8      	; 0x1ffa <_fpadd_parts+0x16e>
    1ff2:	21 e0       	ldi	r18, 0x01	; 1
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	50 e0       	ldi	r21, 0x00	; 0
    1ffa:	59 01       	movw	r10, r18
    1ffc:	6a 01       	movw	r12, r20
    1ffe:	a6 28       	or	r10, r6
    2000:	b7 28       	or	r11, r7
    2002:	c8 28       	or	r12, r8
    2004:	d9 28       	or	r13, r9
    2006:	0b c0       	rjmp	.+22     	; 0x201e <_fpadd_parts+0x192>
    2008:	82 15       	cp	r24, r2
    200a:	93 05       	cpc	r25, r3
    200c:	2c f0       	brlt	.+10     	; 0x2018 <_fpadd_parts+0x18c>
    200e:	1c 01       	movw	r2, r24
    2010:	aa 24       	eor	r10, r10
    2012:	bb 24       	eor	r11, r11
    2014:	65 01       	movw	r12, r10
    2016:	03 c0       	rjmp	.+6      	; 0x201e <_fpadd_parts+0x192>
    2018:	ee 24       	eor	r14, r14
    201a:	ff 24       	eor	r15, r15
    201c:	87 01       	movw	r16, r14
    201e:	11 96       	adiw	r26, 0x01	; 1
    2020:	9c 91       	ld	r25, X
    2022:	d2 01       	movw	r26, r4
    2024:	11 96       	adiw	r26, 0x01	; 1
    2026:	8c 91       	ld	r24, X
    2028:	98 17       	cp	r25, r24
    202a:	09 f4       	brne	.+2      	; 0x202e <_fpadd_parts+0x1a2>
    202c:	45 c0       	rjmp	.+138    	; 0x20b8 <_fpadd_parts+0x22c>
    202e:	99 23       	and	r25, r25
    2030:	39 f0       	breq	.+14     	; 0x2040 <_fpadd_parts+0x1b4>
    2032:	a8 01       	movw	r20, r16
    2034:	97 01       	movw	r18, r14
    2036:	2a 19       	sub	r18, r10
    2038:	3b 09       	sbc	r19, r11
    203a:	4c 09       	sbc	r20, r12
    203c:	5d 09       	sbc	r21, r13
    203e:	06 c0       	rjmp	.+12     	; 0x204c <_fpadd_parts+0x1c0>
    2040:	a6 01       	movw	r20, r12
    2042:	95 01       	movw	r18, r10
    2044:	2e 19       	sub	r18, r14
    2046:	3f 09       	sbc	r19, r15
    2048:	40 0b       	sbc	r20, r16
    204a:	51 0b       	sbc	r21, r17
    204c:	57 fd       	sbrc	r21, 7
    204e:	08 c0       	rjmp	.+16     	; 0x2060 <_fpadd_parts+0x1d4>
    2050:	11 82       	std	Z+1, r1	; 0x01
    2052:	33 82       	std	Z+3, r3	; 0x03
    2054:	22 82       	std	Z+2, r2	; 0x02
    2056:	24 83       	std	Z+4, r18	; 0x04
    2058:	35 83       	std	Z+5, r19	; 0x05
    205a:	46 83       	std	Z+6, r20	; 0x06
    205c:	57 83       	std	Z+7, r21	; 0x07
    205e:	1d c0       	rjmp	.+58     	; 0x209a <_fpadd_parts+0x20e>
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	81 83       	std	Z+1, r24	; 0x01
    2064:	33 82       	std	Z+3, r3	; 0x03
    2066:	22 82       	std	Z+2, r2	; 0x02
    2068:	88 27       	eor	r24, r24
    206a:	99 27       	eor	r25, r25
    206c:	dc 01       	movw	r26, r24
    206e:	82 1b       	sub	r24, r18
    2070:	93 0b       	sbc	r25, r19
    2072:	a4 0b       	sbc	r26, r20
    2074:	b5 0b       	sbc	r27, r21
    2076:	84 83       	std	Z+4, r24	; 0x04
    2078:	95 83       	std	Z+5, r25	; 0x05
    207a:	a6 83       	std	Z+6, r26	; 0x06
    207c:	b7 83       	std	Z+7, r27	; 0x07
    207e:	0d c0       	rjmp	.+26     	; 0x209a <_fpadd_parts+0x20e>
    2080:	22 0f       	add	r18, r18
    2082:	33 1f       	adc	r19, r19
    2084:	44 1f       	adc	r20, r20
    2086:	55 1f       	adc	r21, r21
    2088:	24 83       	std	Z+4, r18	; 0x04
    208a:	35 83       	std	Z+5, r19	; 0x05
    208c:	46 83       	std	Z+6, r20	; 0x06
    208e:	57 83       	std	Z+7, r21	; 0x07
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	93 83       	std	Z+3, r25	; 0x03
    2098:	82 83       	std	Z+2, r24	; 0x02
    209a:	24 81       	ldd	r18, Z+4	; 0x04
    209c:	35 81       	ldd	r19, Z+5	; 0x05
    209e:	46 81       	ldd	r20, Z+6	; 0x06
    20a0:	57 81       	ldd	r21, Z+7	; 0x07
    20a2:	da 01       	movw	r26, r20
    20a4:	c9 01       	movw	r24, r18
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	a1 09       	sbc	r26, r1
    20aa:	b1 09       	sbc	r27, r1
    20ac:	8f 5f       	subi	r24, 0xFF	; 255
    20ae:	9f 4f       	sbci	r25, 0xFF	; 255
    20b0:	af 4f       	sbci	r26, 0xFF	; 255
    20b2:	bf 43       	sbci	r27, 0x3F	; 63
    20b4:	28 f3       	brcs	.-54     	; 0x2080 <_fpadd_parts+0x1f4>
    20b6:	0b c0       	rjmp	.+22     	; 0x20ce <_fpadd_parts+0x242>
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	33 82       	std	Z+3, r3	; 0x03
    20bc:	22 82       	std	Z+2, r2	; 0x02
    20be:	ea 0c       	add	r14, r10
    20c0:	fb 1c       	adc	r15, r11
    20c2:	0c 1d       	adc	r16, r12
    20c4:	1d 1d       	adc	r17, r13
    20c6:	e4 82       	std	Z+4, r14	; 0x04
    20c8:	f5 82       	std	Z+5, r15	; 0x05
    20ca:	06 83       	std	Z+6, r16	; 0x06
    20cc:	17 83       	std	Z+7, r17	; 0x07
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	80 83       	st	Z, r24
    20d2:	24 81       	ldd	r18, Z+4	; 0x04
    20d4:	35 81       	ldd	r19, Z+5	; 0x05
    20d6:	46 81       	ldd	r20, Z+6	; 0x06
    20d8:	57 81       	ldd	r21, Z+7	; 0x07
    20da:	57 ff       	sbrs	r21, 7
    20dc:	1a c0       	rjmp	.+52     	; 0x2112 <_fpadd_parts+0x286>
    20de:	c9 01       	movw	r24, r18
    20e0:	aa 27       	eor	r26, r26
    20e2:	97 fd       	sbrc	r25, 7
    20e4:	a0 95       	com	r26
    20e6:	ba 2f       	mov	r27, r26
    20e8:	81 70       	andi	r24, 0x01	; 1
    20ea:	90 70       	andi	r25, 0x00	; 0
    20ec:	a0 70       	andi	r26, 0x00	; 0
    20ee:	b0 70       	andi	r27, 0x00	; 0
    20f0:	56 95       	lsr	r21
    20f2:	47 95       	ror	r20
    20f4:	37 95       	ror	r19
    20f6:	27 95       	ror	r18
    20f8:	82 2b       	or	r24, r18
    20fa:	93 2b       	or	r25, r19
    20fc:	a4 2b       	or	r26, r20
    20fe:	b5 2b       	or	r27, r21
    2100:	84 83       	std	Z+4, r24	; 0x04
    2102:	95 83       	std	Z+5, r25	; 0x05
    2104:	a6 83       	std	Z+6, r26	; 0x06
    2106:	b7 83       	std	Z+7, r27	; 0x07
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	93 83       	std	Z+3, r25	; 0x03
    2110:	82 83       	std	Z+2, r24	; 0x02
    2112:	df 01       	movw	r26, r30
    2114:	01 c0       	rjmp	.+2      	; 0x2118 <_fpadd_parts+0x28c>
    2116:	d2 01       	movw	r26, r4
    2118:	cd 01       	movw	r24, r26
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	e2 e1       	ldi	r30, 0x12	; 18
    2120:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__>

00002124 <__subsf3>:
    2124:	a0 e2       	ldi	r26, 0x20	; 32
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e8 e9       	ldi	r30, 0x98	; 152
    212a:	f0 e1       	ldi	r31, 0x10	; 16
    212c:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__+0x18>
    2130:	69 83       	std	Y+1, r22	; 0x01
    2132:	7a 83       	std	Y+2, r23	; 0x02
    2134:	8b 83       	std	Y+3, r24	; 0x03
    2136:	9c 83       	std	Y+4, r25	; 0x04
    2138:	2d 83       	std	Y+5, r18	; 0x05
    213a:	3e 83       	std	Y+6, r19	; 0x06
    213c:	4f 83       	std	Y+7, r20	; 0x07
    213e:	58 87       	std	Y+8, r21	; 0x08
    2140:	e9 e0       	ldi	r30, 0x09	; 9
    2142:	ee 2e       	mov	r14, r30
    2144:	f1 2c       	mov	r15, r1
    2146:	ec 0e       	add	r14, r28
    2148:	fd 1e       	adc	r15, r29
    214a:	ce 01       	movw	r24, r28
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	b7 01       	movw	r22, r14
    2150:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    2154:	8e 01       	movw	r16, r28
    2156:	0f 5e       	subi	r16, 0xEF	; 239
    2158:	1f 4f       	sbci	r17, 0xFF	; 255
    215a:	ce 01       	movw	r24, r28
    215c:	05 96       	adiw	r24, 0x05	; 5
    215e:	b8 01       	movw	r22, r16
    2160:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    2164:	8a 89       	ldd	r24, Y+18	; 0x12
    2166:	91 e0       	ldi	r25, 0x01	; 1
    2168:	89 27       	eor	r24, r25
    216a:	8a 8b       	std	Y+18, r24	; 0x12
    216c:	c7 01       	movw	r24, r14
    216e:	b8 01       	movw	r22, r16
    2170:	ae 01       	movw	r20, r28
    2172:	47 5e       	subi	r20, 0xE7	; 231
    2174:	5f 4f       	sbci	r21, 0xFF	; 255
    2176:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <_fpadd_parts>
    217a:	0e 94 ce 12 	call	0x259c	; 0x259c <__pack_f>
    217e:	a0 96       	adiw	r28, 0x20	; 32
    2180:	e6 e0       	ldi	r30, 0x06	; 6
    2182:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__+0x18>

00002186 <__addsf3>:
    2186:	a0 e2       	ldi	r26, 0x20	; 32
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e9 ec       	ldi	r30, 0xC9	; 201
    218c:	f0 e1       	ldi	r31, 0x10	; 16
    218e:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__+0x18>
    2192:	69 83       	std	Y+1, r22	; 0x01
    2194:	7a 83       	std	Y+2, r23	; 0x02
    2196:	8b 83       	std	Y+3, r24	; 0x03
    2198:	9c 83       	std	Y+4, r25	; 0x04
    219a:	2d 83       	std	Y+5, r18	; 0x05
    219c:	3e 83       	std	Y+6, r19	; 0x06
    219e:	4f 83       	std	Y+7, r20	; 0x07
    21a0:	58 87       	std	Y+8, r21	; 0x08
    21a2:	f9 e0       	ldi	r31, 0x09	; 9
    21a4:	ef 2e       	mov	r14, r31
    21a6:	f1 2c       	mov	r15, r1
    21a8:	ec 0e       	add	r14, r28
    21aa:	fd 1e       	adc	r15, r29
    21ac:	ce 01       	movw	r24, r28
    21ae:	01 96       	adiw	r24, 0x01	; 1
    21b0:	b7 01       	movw	r22, r14
    21b2:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    21b6:	8e 01       	movw	r16, r28
    21b8:	0f 5e       	subi	r16, 0xEF	; 239
    21ba:	1f 4f       	sbci	r17, 0xFF	; 255
    21bc:	ce 01       	movw	r24, r28
    21be:	05 96       	adiw	r24, 0x05	; 5
    21c0:	b8 01       	movw	r22, r16
    21c2:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    21c6:	c7 01       	movw	r24, r14
    21c8:	b8 01       	movw	r22, r16
    21ca:	ae 01       	movw	r20, r28
    21cc:	47 5e       	subi	r20, 0xE7	; 231
    21ce:	5f 4f       	sbci	r21, 0xFF	; 255
    21d0:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <_fpadd_parts>
    21d4:	0e 94 ce 12 	call	0x259c	; 0x259c <__pack_f>
    21d8:	a0 96       	adiw	r28, 0x20	; 32
    21da:	e6 e0       	ldi	r30, 0x06	; 6
    21dc:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__+0x18>

000021e0 <__mulsf3>:
    21e0:	a0 e2       	ldi	r26, 0x20	; 32
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e6 ef       	ldi	r30, 0xF6	; 246
    21e6:	f0 e1       	ldi	r31, 0x10	; 16
    21e8:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__>
    21ec:	69 83       	std	Y+1, r22	; 0x01
    21ee:	7a 83       	std	Y+2, r23	; 0x02
    21f0:	8b 83       	std	Y+3, r24	; 0x03
    21f2:	9c 83       	std	Y+4, r25	; 0x04
    21f4:	2d 83       	std	Y+5, r18	; 0x05
    21f6:	3e 83       	std	Y+6, r19	; 0x06
    21f8:	4f 83       	std	Y+7, r20	; 0x07
    21fa:	58 87       	std	Y+8, r21	; 0x08
    21fc:	ce 01       	movw	r24, r28
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	be 01       	movw	r22, r28
    2202:	67 5f       	subi	r22, 0xF7	; 247
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    220a:	ce 01       	movw	r24, r28
    220c:	05 96       	adiw	r24, 0x05	; 5
    220e:	be 01       	movw	r22, r28
    2210:	6f 5e       	subi	r22, 0xEF	; 239
    2212:	7f 4f       	sbci	r23, 0xFF	; 255
    2214:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    2218:	99 85       	ldd	r25, Y+9	; 0x09
    221a:	92 30       	cpi	r25, 0x02	; 2
    221c:	88 f0       	brcs	.+34     	; 0x2240 <__mulsf3+0x60>
    221e:	89 89       	ldd	r24, Y+17	; 0x11
    2220:	82 30       	cpi	r24, 0x02	; 2
    2222:	c8 f0       	brcs	.+50     	; 0x2256 <__mulsf3+0x76>
    2224:	94 30       	cpi	r25, 0x04	; 4
    2226:	19 f4       	brne	.+6      	; 0x222e <__mulsf3+0x4e>
    2228:	82 30       	cpi	r24, 0x02	; 2
    222a:	51 f4       	brne	.+20     	; 0x2240 <__mulsf3+0x60>
    222c:	04 c0       	rjmp	.+8      	; 0x2236 <__mulsf3+0x56>
    222e:	84 30       	cpi	r24, 0x04	; 4
    2230:	29 f4       	brne	.+10     	; 0x223c <__mulsf3+0x5c>
    2232:	92 30       	cpi	r25, 0x02	; 2
    2234:	81 f4       	brne	.+32     	; 0x2256 <__mulsf3+0x76>
    2236:	8f e7       	ldi	r24, 0x7F	; 127
    2238:	92 e0       	ldi	r25, 0x02	; 2
    223a:	c6 c0       	rjmp	.+396    	; 0x23c8 <__mulsf3+0x1e8>
    223c:	92 30       	cpi	r25, 0x02	; 2
    223e:	49 f4       	brne	.+18     	; 0x2252 <__mulsf3+0x72>
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	9a 85       	ldd	r25, Y+10	; 0x0a
    2244:	8a 89       	ldd	r24, Y+18	; 0x12
    2246:	98 13       	cpse	r25, r24
    2248:	21 e0       	ldi	r18, 0x01	; 1
    224a:	2a 87       	std	Y+10, r18	; 0x0a
    224c:	ce 01       	movw	r24, r28
    224e:	09 96       	adiw	r24, 0x09	; 9
    2250:	bb c0       	rjmp	.+374    	; 0x23c8 <__mulsf3+0x1e8>
    2252:	82 30       	cpi	r24, 0x02	; 2
    2254:	49 f4       	brne	.+18     	; 0x2268 <__mulsf3+0x88>
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	8a 89       	ldd	r24, Y+18	; 0x12
    225c:	98 13       	cpse	r25, r24
    225e:	21 e0       	ldi	r18, 0x01	; 1
    2260:	2a 8b       	std	Y+18, r18	; 0x12
    2262:	ce 01       	movw	r24, r28
    2264:	41 96       	adiw	r24, 0x11	; 17
    2266:	b0 c0       	rjmp	.+352    	; 0x23c8 <__mulsf3+0x1e8>
    2268:	2d 84       	ldd	r2, Y+13	; 0x0d
    226a:	3e 84       	ldd	r3, Y+14	; 0x0e
    226c:	4f 84       	ldd	r4, Y+15	; 0x0f
    226e:	58 88       	ldd	r5, Y+16	; 0x10
    2270:	6d 88       	ldd	r6, Y+21	; 0x15
    2272:	7e 88       	ldd	r7, Y+22	; 0x16
    2274:	8f 88       	ldd	r8, Y+23	; 0x17
    2276:	98 8c       	ldd	r9, Y+24	; 0x18
    2278:	ee 24       	eor	r14, r14
    227a:	ff 24       	eor	r15, r15
    227c:	87 01       	movw	r16, r14
    227e:	aa 24       	eor	r10, r10
    2280:	bb 24       	eor	r11, r11
    2282:	65 01       	movw	r12, r10
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	50 e0       	ldi	r21, 0x00	; 0
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	70 e0       	ldi	r23, 0x00	; 0
    228c:	e0 e0       	ldi	r30, 0x00	; 0
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	c1 01       	movw	r24, r2
    2292:	81 70       	andi	r24, 0x01	; 1
    2294:	90 70       	andi	r25, 0x00	; 0
    2296:	89 2b       	or	r24, r25
    2298:	e9 f0       	breq	.+58     	; 0x22d4 <__mulsf3+0xf4>
    229a:	e6 0c       	add	r14, r6
    229c:	f7 1c       	adc	r15, r7
    229e:	08 1d       	adc	r16, r8
    22a0:	19 1d       	adc	r17, r9
    22a2:	9a 01       	movw	r18, r20
    22a4:	ab 01       	movw	r20, r22
    22a6:	2a 0d       	add	r18, r10
    22a8:	3b 1d       	adc	r19, r11
    22aa:	4c 1d       	adc	r20, r12
    22ac:	5d 1d       	adc	r21, r13
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e0       	ldi	r26, 0x00	; 0
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e6 14       	cp	r14, r6
    22b8:	f7 04       	cpc	r15, r7
    22ba:	08 05       	cpc	r16, r8
    22bc:	19 05       	cpc	r17, r9
    22be:	20 f4       	brcc	.+8      	; 0x22c8 <__mulsf3+0xe8>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a0 e0       	ldi	r26, 0x00	; 0
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	ba 01       	movw	r22, r20
    22ca:	a9 01       	movw	r20, r18
    22cc:	48 0f       	add	r20, r24
    22ce:	59 1f       	adc	r21, r25
    22d0:	6a 1f       	adc	r22, r26
    22d2:	7b 1f       	adc	r23, r27
    22d4:	aa 0c       	add	r10, r10
    22d6:	bb 1c       	adc	r11, r11
    22d8:	cc 1c       	adc	r12, r12
    22da:	dd 1c       	adc	r13, r13
    22dc:	97 fe       	sbrs	r9, 7
    22de:	08 c0       	rjmp	.+16     	; 0x22f0 <__mulsf3+0x110>
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a0 e0       	ldi	r26, 0x00	; 0
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	a8 2a       	or	r10, r24
    22ea:	b9 2a       	or	r11, r25
    22ec:	ca 2a       	or	r12, r26
    22ee:	db 2a       	or	r13, r27
    22f0:	31 96       	adiw	r30, 0x01	; 1
    22f2:	e0 32       	cpi	r30, 0x20	; 32
    22f4:	f1 05       	cpc	r31, r1
    22f6:	49 f0       	breq	.+18     	; 0x230a <__mulsf3+0x12a>
    22f8:	66 0c       	add	r6, r6
    22fa:	77 1c       	adc	r7, r7
    22fc:	88 1c       	adc	r8, r8
    22fe:	99 1c       	adc	r9, r9
    2300:	56 94       	lsr	r5
    2302:	47 94       	ror	r4
    2304:	37 94       	ror	r3
    2306:	27 94       	ror	r2
    2308:	c3 cf       	rjmp	.-122    	; 0x2290 <__mulsf3+0xb0>
    230a:	fa 85       	ldd	r31, Y+10	; 0x0a
    230c:	ea 89       	ldd	r30, Y+18	; 0x12
    230e:	2b 89       	ldd	r18, Y+19	; 0x13
    2310:	3c 89       	ldd	r19, Y+20	; 0x14
    2312:	8b 85       	ldd	r24, Y+11	; 0x0b
    2314:	9c 85       	ldd	r25, Y+12	; 0x0c
    2316:	28 0f       	add	r18, r24
    2318:	39 1f       	adc	r19, r25
    231a:	2e 5f       	subi	r18, 0xFE	; 254
    231c:	3f 4f       	sbci	r19, 0xFF	; 255
    231e:	17 c0       	rjmp	.+46     	; 0x234e <__mulsf3+0x16e>
    2320:	ca 01       	movw	r24, r20
    2322:	81 70       	andi	r24, 0x01	; 1
    2324:	90 70       	andi	r25, 0x00	; 0
    2326:	89 2b       	or	r24, r25
    2328:	61 f0       	breq	.+24     	; 0x2342 <__mulsf3+0x162>
    232a:	16 95       	lsr	r17
    232c:	07 95       	ror	r16
    232e:	f7 94       	ror	r15
    2330:	e7 94       	ror	r14
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	a0 e0       	ldi	r26, 0x00	; 0
    2338:	b0 e8       	ldi	r27, 0x80	; 128
    233a:	e8 2a       	or	r14, r24
    233c:	f9 2a       	or	r15, r25
    233e:	0a 2b       	or	r16, r26
    2340:	1b 2b       	or	r17, r27
    2342:	76 95       	lsr	r23
    2344:	67 95       	ror	r22
    2346:	57 95       	ror	r21
    2348:	47 95       	ror	r20
    234a:	2f 5f       	subi	r18, 0xFF	; 255
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	77 fd       	sbrc	r23, 7
    2350:	e7 cf       	rjmp	.-50     	; 0x2320 <__mulsf3+0x140>
    2352:	0c c0       	rjmp	.+24     	; 0x236c <__mulsf3+0x18c>
    2354:	44 0f       	add	r20, r20
    2356:	55 1f       	adc	r21, r21
    2358:	66 1f       	adc	r22, r22
    235a:	77 1f       	adc	r23, r23
    235c:	17 fd       	sbrc	r17, 7
    235e:	41 60       	ori	r20, 0x01	; 1
    2360:	ee 0c       	add	r14, r14
    2362:	ff 1c       	adc	r15, r15
    2364:	00 1f       	adc	r16, r16
    2366:	11 1f       	adc	r17, r17
    2368:	21 50       	subi	r18, 0x01	; 1
    236a:	30 40       	sbci	r19, 0x00	; 0
    236c:	40 30       	cpi	r20, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	59 07       	cpc	r21, r25
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	69 07       	cpc	r22, r25
    2376:	90 e4       	ldi	r25, 0x40	; 64
    2378:	79 07       	cpc	r23, r25
    237a:	60 f3       	brcs	.-40     	; 0x2354 <__mulsf3+0x174>
    237c:	2b 8f       	std	Y+27, r18	; 0x1b
    237e:	3c 8f       	std	Y+28, r19	; 0x1c
    2380:	db 01       	movw	r26, r22
    2382:	ca 01       	movw	r24, r20
    2384:	8f 77       	andi	r24, 0x7F	; 127
    2386:	90 70       	andi	r25, 0x00	; 0
    2388:	a0 70       	andi	r26, 0x00	; 0
    238a:	b0 70       	andi	r27, 0x00	; 0
    238c:	80 34       	cpi	r24, 0x40	; 64
    238e:	91 05       	cpc	r25, r1
    2390:	a1 05       	cpc	r26, r1
    2392:	b1 05       	cpc	r27, r1
    2394:	61 f4       	brne	.+24     	; 0x23ae <__mulsf3+0x1ce>
    2396:	47 fd       	sbrc	r20, 7
    2398:	0a c0       	rjmp	.+20     	; 0x23ae <__mulsf3+0x1ce>
    239a:	e1 14       	cp	r14, r1
    239c:	f1 04       	cpc	r15, r1
    239e:	01 05       	cpc	r16, r1
    23a0:	11 05       	cpc	r17, r1
    23a2:	29 f0       	breq	.+10     	; 0x23ae <__mulsf3+0x1ce>
    23a4:	40 5c       	subi	r20, 0xC0	; 192
    23a6:	5f 4f       	sbci	r21, 0xFF	; 255
    23a8:	6f 4f       	sbci	r22, 0xFF	; 255
    23aa:	7f 4f       	sbci	r23, 0xFF	; 255
    23ac:	40 78       	andi	r20, 0x80	; 128
    23ae:	1a 8e       	std	Y+26, r1	; 0x1a
    23b0:	fe 17       	cp	r31, r30
    23b2:	11 f0       	breq	.+4      	; 0x23b8 <__mulsf3+0x1d8>
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	8a 8f       	std	Y+26, r24	; 0x1a
    23b8:	4d 8f       	std	Y+29, r20	; 0x1d
    23ba:	5e 8f       	std	Y+30, r21	; 0x1e
    23bc:	6f 8f       	std	Y+31, r22	; 0x1f
    23be:	78 a3       	std	Y+32, r23	; 0x20
    23c0:	83 e0       	ldi	r24, 0x03	; 3
    23c2:	89 8f       	std	Y+25, r24	; 0x19
    23c4:	ce 01       	movw	r24, r28
    23c6:	49 96       	adiw	r24, 0x19	; 25
    23c8:	0e 94 ce 12 	call	0x259c	; 0x259c <__pack_f>
    23cc:	a0 96       	adiw	r28, 0x20	; 32
    23ce:	e2 e1       	ldi	r30, 0x12	; 18
    23d0:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__>

000023d4 <__gtsf2>:
    23d4:	a8 e1       	ldi	r26, 0x18	; 24
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e0 ef       	ldi	r30, 0xF0	; 240
    23da:	f1 e1       	ldi	r31, 0x11	; 17
    23dc:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__+0x18>
    23e0:	69 83       	std	Y+1, r22	; 0x01
    23e2:	7a 83       	std	Y+2, r23	; 0x02
    23e4:	8b 83       	std	Y+3, r24	; 0x03
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	2d 83       	std	Y+5, r18	; 0x05
    23ea:	3e 83       	std	Y+6, r19	; 0x06
    23ec:	4f 83       	std	Y+7, r20	; 0x07
    23ee:	58 87       	std	Y+8, r21	; 0x08
    23f0:	89 e0       	ldi	r24, 0x09	; 9
    23f2:	e8 2e       	mov	r14, r24
    23f4:	f1 2c       	mov	r15, r1
    23f6:	ec 0e       	add	r14, r28
    23f8:	fd 1e       	adc	r15, r29
    23fa:	ce 01       	movw	r24, r28
    23fc:	01 96       	adiw	r24, 0x01	; 1
    23fe:	b7 01       	movw	r22, r14
    2400:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    2404:	8e 01       	movw	r16, r28
    2406:	0f 5e       	subi	r16, 0xEF	; 239
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	ce 01       	movw	r24, r28
    240c:	05 96       	adiw	r24, 0x05	; 5
    240e:	b8 01       	movw	r22, r16
    2410:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    2414:	89 85       	ldd	r24, Y+9	; 0x09
    2416:	82 30       	cpi	r24, 0x02	; 2
    2418:	40 f0       	brcs	.+16     	; 0x242a <__gtsf2+0x56>
    241a:	89 89       	ldd	r24, Y+17	; 0x11
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	28 f0       	brcs	.+10     	; 0x242a <__gtsf2+0x56>
    2420:	c7 01       	movw	r24, r14
    2422:	b8 01       	movw	r22, r16
    2424:	0e 94 1b 14 	call	0x2836	; 0x2836 <__fpcmp_parts_f>
    2428:	01 c0       	rjmp	.+2      	; 0x242c <__gtsf2+0x58>
    242a:	8f ef       	ldi	r24, 0xFF	; 255
    242c:	68 96       	adiw	r28, 0x18	; 24
    242e:	e6 e0       	ldi	r30, 0x06	; 6
    2430:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__+0x18>

00002434 <__gesf2>:
    2434:	a8 e1       	ldi	r26, 0x18	; 24
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e0 e2       	ldi	r30, 0x20	; 32
    243a:	f2 e1       	ldi	r31, 0x12	; 18
    243c:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__+0x18>
    2440:	69 83       	std	Y+1, r22	; 0x01
    2442:	7a 83       	std	Y+2, r23	; 0x02
    2444:	8b 83       	std	Y+3, r24	; 0x03
    2446:	9c 83       	std	Y+4, r25	; 0x04
    2448:	2d 83       	std	Y+5, r18	; 0x05
    244a:	3e 83       	std	Y+6, r19	; 0x06
    244c:	4f 83       	std	Y+7, r20	; 0x07
    244e:	58 87       	std	Y+8, r21	; 0x08
    2450:	89 e0       	ldi	r24, 0x09	; 9
    2452:	e8 2e       	mov	r14, r24
    2454:	f1 2c       	mov	r15, r1
    2456:	ec 0e       	add	r14, r28
    2458:	fd 1e       	adc	r15, r29
    245a:	ce 01       	movw	r24, r28
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	b7 01       	movw	r22, r14
    2460:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    2464:	8e 01       	movw	r16, r28
    2466:	0f 5e       	subi	r16, 0xEF	; 239
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	ce 01       	movw	r24, r28
    246c:	05 96       	adiw	r24, 0x05	; 5
    246e:	b8 01       	movw	r22, r16
    2470:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    2474:	89 85       	ldd	r24, Y+9	; 0x09
    2476:	82 30       	cpi	r24, 0x02	; 2
    2478:	40 f0       	brcs	.+16     	; 0x248a <__gesf2+0x56>
    247a:	89 89       	ldd	r24, Y+17	; 0x11
    247c:	82 30       	cpi	r24, 0x02	; 2
    247e:	28 f0       	brcs	.+10     	; 0x248a <__gesf2+0x56>
    2480:	c7 01       	movw	r24, r14
    2482:	b8 01       	movw	r22, r16
    2484:	0e 94 1b 14 	call	0x2836	; 0x2836 <__fpcmp_parts_f>
    2488:	01 c0       	rjmp	.+2      	; 0x248c <__gesf2+0x58>
    248a:	8f ef       	ldi	r24, 0xFF	; 255
    248c:	68 96       	adiw	r28, 0x18	; 24
    248e:	e6 e0       	ldi	r30, 0x06	; 6
    2490:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__+0x18>

00002494 <__ltsf2>:
    2494:	a8 e1       	ldi	r26, 0x18	; 24
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e0 e5       	ldi	r30, 0x50	; 80
    249a:	f2 e1       	ldi	r31, 0x12	; 18
    249c:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__+0x18>
    24a0:	69 83       	std	Y+1, r22	; 0x01
    24a2:	7a 83       	std	Y+2, r23	; 0x02
    24a4:	8b 83       	std	Y+3, r24	; 0x03
    24a6:	9c 83       	std	Y+4, r25	; 0x04
    24a8:	2d 83       	std	Y+5, r18	; 0x05
    24aa:	3e 83       	std	Y+6, r19	; 0x06
    24ac:	4f 83       	std	Y+7, r20	; 0x07
    24ae:	58 87       	std	Y+8, r21	; 0x08
    24b0:	89 e0       	ldi	r24, 0x09	; 9
    24b2:	e8 2e       	mov	r14, r24
    24b4:	f1 2c       	mov	r15, r1
    24b6:	ec 0e       	add	r14, r28
    24b8:	fd 1e       	adc	r15, r29
    24ba:	ce 01       	movw	r24, r28
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	b7 01       	movw	r22, r14
    24c0:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    24c4:	8e 01       	movw	r16, r28
    24c6:	0f 5e       	subi	r16, 0xEF	; 239
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	ce 01       	movw	r24, r28
    24cc:	05 96       	adiw	r24, 0x05	; 5
    24ce:	b8 01       	movw	r22, r16
    24d0:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    24d4:	89 85       	ldd	r24, Y+9	; 0x09
    24d6:	82 30       	cpi	r24, 0x02	; 2
    24d8:	40 f0       	brcs	.+16     	; 0x24ea <__ltsf2+0x56>
    24da:	89 89       	ldd	r24, Y+17	; 0x11
    24dc:	82 30       	cpi	r24, 0x02	; 2
    24de:	28 f0       	brcs	.+10     	; 0x24ea <__ltsf2+0x56>
    24e0:	c7 01       	movw	r24, r14
    24e2:	b8 01       	movw	r22, r16
    24e4:	0e 94 1b 14 	call	0x2836	; 0x2836 <__fpcmp_parts_f>
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <__ltsf2+0x58>
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	68 96       	adiw	r28, 0x18	; 24
    24ee:	e6 e0       	ldi	r30, 0x06	; 6
    24f0:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__+0x18>

000024f4 <__fixsfsi>:
    24f4:	ac e0       	ldi	r26, 0x0C	; 12
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e0 e8       	ldi	r30, 0x80	; 128
    24fa:	f2 e1       	ldi	r31, 0x12	; 18
    24fc:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__prologue_saves__+0x20>
    2500:	69 83       	std	Y+1, r22	; 0x01
    2502:	7a 83       	std	Y+2, r23	; 0x02
    2504:	8b 83       	std	Y+3, r24	; 0x03
    2506:	9c 83       	std	Y+4, r25	; 0x04
    2508:	ce 01       	movw	r24, r28
    250a:	01 96       	adiw	r24, 0x01	; 1
    250c:	be 01       	movw	r22, r28
    250e:	6b 5f       	subi	r22, 0xFB	; 251
    2510:	7f 4f       	sbci	r23, 0xFF	; 255
    2512:	0e 94 a3 13 	call	0x2746	; 0x2746 <__unpack_f>
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	82 30       	cpi	r24, 0x02	; 2
    251a:	61 f1       	breq	.+88     	; 0x2574 <__fixsfsi+0x80>
    251c:	82 30       	cpi	r24, 0x02	; 2
    251e:	50 f1       	brcs	.+84     	; 0x2574 <__fixsfsi+0x80>
    2520:	84 30       	cpi	r24, 0x04	; 4
    2522:	21 f4       	brne	.+8      	; 0x252c <__fixsfsi+0x38>
    2524:	8e 81       	ldd	r24, Y+6	; 0x06
    2526:	88 23       	and	r24, r24
    2528:	51 f1       	breq	.+84     	; 0x257e <__fixsfsi+0x8a>
    252a:	2e c0       	rjmp	.+92     	; 0x2588 <__fixsfsi+0x94>
    252c:	2f 81       	ldd	r18, Y+7	; 0x07
    252e:	38 85       	ldd	r19, Y+8	; 0x08
    2530:	37 fd       	sbrc	r19, 7
    2532:	20 c0       	rjmp	.+64     	; 0x2574 <__fixsfsi+0x80>
    2534:	6e 81       	ldd	r22, Y+6	; 0x06
    2536:	2f 31       	cpi	r18, 0x1F	; 31
    2538:	31 05       	cpc	r19, r1
    253a:	1c f0       	brlt	.+6      	; 0x2542 <__fixsfsi+0x4e>
    253c:	66 23       	and	r22, r22
    253e:	f9 f0       	breq	.+62     	; 0x257e <__fixsfsi+0x8a>
    2540:	23 c0       	rjmp	.+70     	; 0x2588 <__fixsfsi+0x94>
    2542:	8e e1       	ldi	r24, 0x1E	; 30
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	82 1b       	sub	r24, r18
    2548:	93 0b       	sbc	r25, r19
    254a:	29 85       	ldd	r18, Y+9	; 0x09
    254c:	3a 85       	ldd	r19, Y+10	; 0x0a
    254e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2550:	5c 85       	ldd	r21, Y+12	; 0x0c
    2552:	04 c0       	rjmp	.+8      	; 0x255c <__fixsfsi+0x68>
    2554:	56 95       	lsr	r21
    2556:	47 95       	ror	r20
    2558:	37 95       	ror	r19
    255a:	27 95       	ror	r18
    255c:	8a 95       	dec	r24
    255e:	d2 f7       	brpl	.-12     	; 0x2554 <__fixsfsi+0x60>
    2560:	66 23       	and	r22, r22
    2562:	b1 f0       	breq	.+44     	; 0x2590 <__fixsfsi+0x9c>
    2564:	50 95       	com	r21
    2566:	40 95       	com	r20
    2568:	30 95       	com	r19
    256a:	21 95       	neg	r18
    256c:	3f 4f       	sbci	r19, 0xFF	; 255
    256e:	4f 4f       	sbci	r20, 0xFF	; 255
    2570:	5f 4f       	sbci	r21, 0xFF	; 255
    2572:	0e c0       	rjmp	.+28     	; 0x2590 <__fixsfsi+0x9c>
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	09 c0       	rjmp	.+18     	; 0x2590 <__fixsfsi+0x9c>
    257e:	2f ef       	ldi	r18, 0xFF	; 255
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f ef       	ldi	r20, 0xFF	; 255
    2584:	5f e7       	ldi	r21, 0x7F	; 127
    2586:	04 c0       	rjmp	.+8      	; 0x2590 <__fixsfsi+0x9c>
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	50 e8       	ldi	r21, 0x80	; 128
    2590:	b9 01       	movw	r22, r18
    2592:	ca 01       	movw	r24, r20
    2594:	2c 96       	adiw	r28, 0x0c	; 12
    2596:	e2 e0       	ldi	r30, 0x02	; 2
    2598:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__epilogue_restores__+0x20>

0000259c <__pack_f>:
    259c:	df 92       	push	r13
    259e:	ef 92       	push	r14
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	fc 01       	movw	r30, r24
    25a8:	e4 80       	ldd	r14, Z+4	; 0x04
    25aa:	f5 80       	ldd	r15, Z+5	; 0x05
    25ac:	06 81       	ldd	r16, Z+6	; 0x06
    25ae:	17 81       	ldd	r17, Z+7	; 0x07
    25b0:	d1 80       	ldd	r13, Z+1	; 0x01
    25b2:	80 81       	ld	r24, Z
    25b4:	82 30       	cpi	r24, 0x02	; 2
    25b6:	48 f4       	brcc	.+18     	; 0x25ca <__pack_f+0x2e>
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	a0 e1       	ldi	r26, 0x10	; 16
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e8 2a       	or	r14, r24
    25c2:	f9 2a       	or	r15, r25
    25c4:	0a 2b       	or	r16, r26
    25c6:	1b 2b       	or	r17, r27
    25c8:	a5 c0       	rjmp	.+330    	; 0x2714 <__pack_f+0x178>
    25ca:	84 30       	cpi	r24, 0x04	; 4
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <__pack_f+0x34>
    25ce:	9f c0       	rjmp	.+318    	; 0x270e <__pack_f+0x172>
    25d0:	82 30       	cpi	r24, 0x02	; 2
    25d2:	21 f4       	brne	.+8      	; 0x25dc <__pack_f+0x40>
    25d4:	ee 24       	eor	r14, r14
    25d6:	ff 24       	eor	r15, r15
    25d8:	87 01       	movw	r16, r14
    25da:	05 c0       	rjmp	.+10     	; 0x25e6 <__pack_f+0x4a>
    25dc:	e1 14       	cp	r14, r1
    25de:	f1 04       	cpc	r15, r1
    25e0:	01 05       	cpc	r16, r1
    25e2:	11 05       	cpc	r17, r1
    25e4:	19 f4       	brne	.+6      	; 0x25ec <__pack_f+0x50>
    25e6:	e0 e0       	ldi	r30, 0x00	; 0
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	96 c0       	rjmp	.+300    	; 0x2718 <__pack_f+0x17c>
    25ec:	62 81       	ldd	r22, Z+2	; 0x02
    25ee:	73 81       	ldd	r23, Z+3	; 0x03
    25f0:	9f ef       	ldi	r25, 0xFF	; 255
    25f2:	62 38       	cpi	r22, 0x82	; 130
    25f4:	79 07       	cpc	r23, r25
    25f6:	0c f0       	brlt	.+2      	; 0x25fa <__pack_f+0x5e>
    25f8:	5b c0       	rjmp	.+182    	; 0x26b0 <__pack_f+0x114>
    25fa:	22 e8       	ldi	r18, 0x82	; 130
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	26 1b       	sub	r18, r22
    2600:	37 0b       	sbc	r19, r23
    2602:	2a 31       	cpi	r18, 0x1A	; 26
    2604:	31 05       	cpc	r19, r1
    2606:	2c f0       	brlt	.+10     	; 0x2612 <__pack_f+0x76>
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	50 e0       	ldi	r21, 0x00	; 0
    2610:	2a c0       	rjmp	.+84     	; 0x2666 <__pack_f+0xca>
    2612:	b8 01       	movw	r22, r16
    2614:	a7 01       	movw	r20, r14
    2616:	02 2e       	mov	r0, r18
    2618:	04 c0       	rjmp	.+8      	; 0x2622 <__pack_f+0x86>
    261a:	76 95       	lsr	r23
    261c:	67 95       	ror	r22
    261e:	57 95       	ror	r21
    2620:	47 95       	ror	r20
    2622:	0a 94       	dec	r0
    2624:	d2 f7       	brpl	.-12     	; 0x261a <__pack_f+0x7e>
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a0 e0       	ldi	r26, 0x00	; 0
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	04 c0       	rjmp	.+8      	; 0x2638 <__pack_f+0x9c>
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	aa 1f       	adc	r26, r26
    2636:	bb 1f       	adc	r27, r27
    2638:	2a 95       	dec	r18
    263a:	d2 f7       	brpl	.-12     	; 0x2630 <__pack_f+0x94>
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	a1 09       	sbc	r26, r1
    2640:	b1 09       	sbc	r27, r1
    2642:	8e 21       	and	r24, r14
    2644:	9f 21       	and	r25, r15
    2646:	a0 23       	and	r26, r16
    2648:	b1 23       	and	r27, r17
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	a1 05       	cpc	r26, r1
    264e:	b1 05       	cpc	r27, r1
    2650:	21 f0       	breq	.+8      	; 0x265a <__pack_f+0xbe>
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a0 e0       	ldi	r26, 0x00	; 0
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	9a 01       	movw	r18, r20
    265c:	ab 01       	movw	r20, r22
    265e:	28 2b       	or	r18, r24
    2660:	39 2b       	or	r19, r25
    2662:	4a 2b       	or	r20, r26
    2664:	5b 2b       	or	r21, r27
    2666:	da 01       	movw	r26, r20
    2668:	c9 01       	movw	r24, r18
    266a:	8f 77       	andi	r24, 0x7F	; 127
    266c:	90 70       	andi	r25, 0x00	; 0
    266e:	a0 70       	andi	r26, 0x00	; 0
    2670:	b0 70       	andi	r27, 0x00	; 0
    2672:	80 34       	cpi	r24, 0x40	; 64
    2674:	91 05       	cpc	r25, r1
    2676:	a1 05       	cpc	r26, r1
    2678:	b1 05       	cpc	r27, r1
    267a:	39 f4       	brne	.+14     	; 0x268a <__pack_f+0xee>
    267c:	27 ff       	sbrs	r18, 7
    267e:	09 c0       	rjmp	.+18     	; 0x2692 <__pack_f+0xf6>
    2680:	20 5c       	subi	r18, 0xC0	; 192
    2682:	3f 4f       	sbci	r19, 0xFF	; 255
    2684:	4f 4f       	sbci	r20, 0xFF	; 255
    2686:	5f 4f       	sbci	r21, 0xFF	; 255
    2688:	04 c0       	rjmp	.+8      	; 0x2692 <__pack_f+0xf6>
    268a:	21 5c       	subi	r18, 0xC1	; 193
    268c:	3f 4f       	sbci	r19, 0xFF	; 255
    268e:	4f 4f       	sbci	r20, 0xFF	; 255
    2690:	5f 4f       	sbci	r21, 0xFF	; 255
    2692:	e0 e0       	ldi	r30, 0x00	; 0
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	20 30       	cpi	r18, 0x00	; 0
    2698:	a0 e0       	ldi	r26, 0x00	; 0
    269a:	3a 07       	cpc	r19, r26
    269c:	a0 e0       	ldi	r26, 0x00	; 0
    269e:	4a 07       	cpc	r20, r26
    26a0:	a0 e4       	ldi	r26, 0x40	; 64
    26a2:	5a 07       	cpc	r21, r26
    26a4:	10 f0       	brcs	.+4      	; 0x26aa <__pack_f+0x10e>
    26a6:	e1 e0       	ldi	r30, 0x01	; 1
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	79 01       	movw	r14, r18
    26ac:	8a 01       	movw	r16, r20
    26ae:	27 c0       	rjmp	.+78     	; 0x26fe <__pack_f+0x162>
    26b0:	60 38       	cpi	r22, 0x80	; 128
    26b2:	71 05       	cpc	r23, r1
    26b4:	64 f5       	brge	.+88     	; 0x270e <__pack_f+0x172>
    26b6:	fb 01       	movw	r30, r22
    26b8:	e1 58       	subi	r30, 0x81	; 129
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	d8 01       	movw	r26, r16
    26be:	c7 01       	movw	r24, r14
    26c0:	8f 77       	andi	r24, 0x7F	; 127
    26c2:	90 70       	andi	r25, 0x00	; 0
    26c4:	a0 70       	andi	r26, 0x00	; 0
    26c6:	b0 70       	andi	r27, 0x00	; 0
    26c8:	80 34       	cpi	r24, 0x40	; 64
    26ca:	91 05       	cpc	r25, r1
    26cc:	a1 05       	cpc	r26, r1
    26ce:	b1 05       	cpc	r27, r1
    26d0:	39 f4       	brne	.+14     	; 0x26e0 <__pack_f+0x144>
    26d2:	e7 fe       	sbrs	r14, 7
    26d4:	0d c0       	rjmp	.+26     	; 0x26f0 <__pack_f+0x154>
    26d6:	80 e4       	ldi	r24, 0x40	; 64
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a0 e0       	ldi	r26, 0x00	; 0
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	04 c0       	rjmp	.+8      	; 0x26e8 <__pack_f+0x14c>
    26e0:	8f e3       	ldi	r24, 0x3F	; 63
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	a0 e0       	ldi	r26, 0x00	; 0
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e8 0e       	add	r14, r24
    26ea:	f9 1e       	adc	r15, r25
    26ec:	0a 1f       	adc	r16, r26
    26ee:	1b 1f       	adc	r17, r27
    26f0:	17 ff       	sbrs	r17, 7
    26f2:	05 c0       	rjmp	.+10     	; 0x26fe <__pack_f+0x162>
    26f4:	16 95       	lsr	r17
    26f6:	07 95       	ror	r16
    26f8:	f7 94       	ror	r15
    26fa:	e7 94       	ror	r14
    26fc:	31 96       	adiw	r30, 0x01	; 1
    26fe:	87 e0       	ldi	r24, 0x07	; 7
    2700:	16 95       	lsr	r17
    2702:	07 95       	ror	r16
    2704:	f7 94       	ror	r15
    2706:	e7 94       	ror	r14
    2708:	8a 95       	dec	r24
    270a:	d1 f7       	brne	.-12     	; 0x2700 <__pack_f+0x164>
    270c:	05 c0       	rjmp	.+10     	; 0x2718 <__pack_f+0x17c>
    270e:	ee 24       	eor	r14, r14
    2710:	ff 24       	eor	r15, r15
    2712:	87 01       	movw	r16, r14
    2714:	ef ef       	ldi	r30, 0xFF	; 255
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	6e 2f       	mov	r22, r30
    271a:	67 95       	ror	r22
    271c:	66 27       	eor	r22, r22
    271e:	67 95       	ror	r22
    2720:	90 2f       	mov	r25, r16
    2722:	9f 77       	andi	r25, 0x7F	; 127
    2724:	d7 94       	ror	r13
    2726:	dd 24       	eor	r13, r13
    2728:	d7 94       	ror	r13
    272a:	8e 2f       	mov	r24, r30
    272c:	86 95       	lsr	r24
    272e:	49 2f       	mov	r20, r25
    2730:	46 2b       	or	r20, r22
    2732:	58 2f       	mov	r21, r24
    2734:	5d 29       	or	r21, r13
    2736:	b7 01       	movw	r22, r14
    2738:	ca 01       	movw	r24, r20
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	ff 90       	pop	r15
    2740:	ef 90       	pop	r14
    2742:	df 90       	pop	r13
    2744:	08 95       	ret

00002746 <__unpack_f>:
    2746:	fc 01       	movw	r30, r24
    2748:	db 01       	movw	r26, r22
    274a:	40 81       	ld	r20, Z
    274c:	51 81       	ldd	r21, Z+1	; 0x01
    274e:	22 81       	ldd	r18, Z+2	; 0x02
    2750:	62 2f       	mov	r22, r18
    2752:	6f 77       	andi	r22, 0x7F	; 127
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	22 1f       	adc	r18, r18
    2758:	22 27       	eor	r18, r18
    275a:	22 1f       	adc	r18, r18
    275c:	93 81       	ldd	r25, Z+3	; 0x03
    275e:	89 2f       	mov	r24, r25
    2760:	88 0f       	add	r24, r24
    2762:	82 2b       	or	r24, r18
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	99 1f       	adc	r25, r25
    276a:	99 27       	eor	r25, r25
    276c:	99 1f       	adc	r25, r25
    276e:	11 96       	adiw	r26, 0x01	; 1
    2770:	9c 93       	st	X, r25
    2772:	11 97       	sbiw	r26, 0x01	; 1
    2774:	21 15       	cp	r18, r1
    2776:	31 05       	cpc	r19, r1
    2778:	a9 f5       	brne	.+106    	; 0x27e4 <__unpack_f+0x9e>
    277a:	41 15       	cp	r20, r1
    277c:	51 05       	cpc	r21, r1
    277e:	61 05       	cpc	r22, r1
    2780:	71 05       	cpc	r23, r1
    2782:	11 f4       	brne	.+4      	; 0x2788 <__unpack_f+0x42>
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	37 c0       	rjmp	.+110    	; 0x27f6 <__unpack_f+0xb0>
    2788:	82 e8       	ldi	r24, 0x82	; 130
    278a:	9f ef       	ldi	r25, 0xFF	; 255
    278c:	13 96       	adiw	r26, 0x03	; 3
    278e:	9c 93       	st	X, r25
    2790:	8e 93       	st	-X, r24
    2792:	12 97       	sbiw	r26, 0x02	; 2
    2794:	9a 01       	movw	r18, r20
    2796:	ab 01       	movw	r20, r22
    2798:	67 e0       	ldi	r22, 0x07	; 7
    279a:	22 0f       	add	r18, r18
    279c:	33 1f       	adc	r19, r19
    279e:	44 1f       	adc	r20, r20
    27a0:	55 1f       	adc	r21, r21
    27a2:	6a 95       	dec	r22
    27a4:	d1 f7       	brne	.-12     	; 0x279a <__unpack_f+0x54>
    27a6:	83 e0       	ldi	r24, 0x03	; 3
    27a8:	8c 93       	st	X, r24
    27aa:	0d c0       	rjmp	.+26     	; 0x27c6 <__unpack_f+0x80>
    27ac:	22 0f       	add	r18, r18
    27ae:	33 1f       	adc	r19, r19
    27b0:	44 1f       	adc	r20, r20
    27b2:	55 1f       	adc	r21, r21
    27b4:	12 96       	adiw	r26, 0x02	; 2
    27b6:	8d 91       	ld	r24, X+
    27b8:	9c 91       	ld	r25, X
    27ba:	13 97       	sbiw	r26, 0x03	; 3
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	13 96       	adiw	r26, 0x03	; 3
    27c0:	9c 93       	st	X, r25
    27c2:	8e 93       	st	-X, r24
    27c4:	12 97       	sbiw	r26, 0x02	; 2
    27c6:	20 30       	cpi	r18, 0x00	; 0
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	38 07       	cpc	r19, r24
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	48 07       	cpc	r20, r24
    27d0:	80 e4       	ldi	r24, 0x40	; 64
    27d2:	58 07       	cpc	r21, r24
    27d4:	58 f3       	brcs	.-42     	; 0x27ac <__unpack_f+0x66>
    27d6:	14 96       	adiw	r26, 0x04	; 4
    27d8:	2d 93       	st	X+, r18
    27da:	3d 93       	st	X+, r19
    27dc:	4d 93       	st	X+, r20
    27de:	5c 93       	st	X, r21
    27e0:	17 97       	sbiw	r26, 0x07	; 7
    27e2:	08 95       	ret
    27e4:	2f 3f       	cpi	r18, 0xFF	; 255
    27e6:	31 05       	cpc	r19, r1
    27e8:	79 f4       	brne	.+30     	; 0x2808 <__unpack_f+0xc2>
    27ea:	41 15       	cp	r20, r1
    27ec:	51 05       	cpc	r21, r1
    27ee:	61 05       	cpc	r22, r1
    27f0:	71 05       	cpc	r23, r1
    27f2:	19 f4       	brne	.+6      	; 0x27fa <__unpack_f+0xb4>
    27f4:	84 e0       	ldi	r24, 0x04	; 4
    27f6:	8c 93       	st	X, r24
    27f8:	08 95       	ret
    27fa:	64 ff       	sbrs	r22, 4
    27fc:	03 c0       	rjmp	.+6      	; 0x2804 <__unpack_f+0xbe>
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	8c 93       	st	X, r24
    2802:	12 c0       	rjmp	.+36     	; 0x2828 <__unpack_f+0xe2>
    2804:	1c 92       	st	X, r1
    2806:	10 c0       	rjmp	.+32     	; 0x2828 <__unpack_f+0xe2>
    2808:	2f 57       	subi	r18, 0x7F	; 127
    280a:	30 40       	sbci	r19, 0x00	; 0
    280c:	13 96       	adiw	r26, 0x03	; 3
    280e:	3c 93       	st	X, r19
    2810:	2e 93       	st	-X, r18
    2812:	12 97       	sbiw	r26, 0x02	; 2
    2814:	83 e0       	ldi	r24, 0x03	; 3
    2816:	8c 93       	st	X, r24
    2818:	87 e0       	ldi	r24, 0x07	; 7
    281a:	44 0f       	add	r20, r20
    281c:	55 1f       	adc	r21, r21
    281e:	66 1f       	adc	r22, r22
    2820:	77 1f       	adc	r23, r23
    2822:	8a 95       	dec	r24
    2824:	d1 f7       	brne	.-12     	; 0x281a <__unpack_f+0xd4>
    2826:	70 64       	ori	r23, 0x40	; 64
    2828:	14 96       	adiw	r26, 0x04	; 4
    282a:	4d 93       	st	X+, r20
    282c:	5d 93       	st	X+, r21
    282e:	6d 93       	st	X+, r22
    2830:	7c 93       	st	X, r23
    2832:	17 97       	sbiw	r26, 0x07	; 7
    2834:	08 95       	ret

00002836 <__fpcmp_parts_f>:
    2836:	1f 93       	push	r17
    2838:	dc 01       	movw	r26, r24
    283a:	fb 01       	movw	r30, r22
    283c:	9c 91       	ld	r25, X
    283e:	92 30       	cpi	r25, 0x02	; 2
    2840:	08 f4       	brcc	.+2      	; 0x2844 <__fpcmp_parts_f+0xe>
    2842:	47 c0       	rjmp	.+142    	; 0x28d2 <__fpcmp_parts_f+0x9c>
    2844:	80 81       	ld	r24, Z
    2846:	82 30       	cpi	r24, 0x02	; 2
    2848:	08 f4       	brcc	.+2      	; 0x284c <__fpcmp_parts_f+0x16>
    284a:	43 c0       	rjmp	.+134    	; 0x28d2 <__fpcmp_parts_f+0x9c>
    284c:	94 30       	cpi	r25, 0x04	; 4
    284e:	51 f4       	brne	.+20     	; 0x2864 <__fpcmp_parts_f+0x2e>
    2850:	11 96       	adiw	r26, 0x01	; 1
    2852:	1c 91       	ld	r17, X
    2854:	84 30       	cpi	r24, 0x04	; 4
    2856:	99 f5       	brne	.+102    	; 0x28be <__fpcmp_parts_f+0x88>
    2858:	81 81       	ldd	r24, Z+1	; 0x01
    285a:	68 2f       	mov	r22, r24
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	61 1b       	sub	r22, r17
    2860:	71 09       	sbc	r23, r1
    2862:	3f c0       	rjmp	.+126    	; 0x28e2 <__fpcmp_parts_f+0xac>
    2864:	84 30       	cpi	r24, 0x04	; 4
    2866:	21 f0       	breq	.+8      	; 0x2870 <__fpcmp_parts_f+0x3a>
    2868:	92 30       	cpi	r25, 0x02	; 2
    286a:	31 f4       	brne	.+12     	; 0x2878 <__fpcmp_parts_f+0x42>
    286c:	82 30       	cpi	r24, 0x02	; 2
    286e:	b9 f1       	breq	.+110    	; 0x28de <__fpcmp_parts_f+0xa8>
    2870:	81 81       	ldd	r24, Z+1	; 0x01
    2872:	88 23       	and	r24, r24
    2874:	89 f1       	breq	.+98     	; 0x28d8 <__fpcmp_parts_f+0xa2>
    2876:	2d c0       	rjmp	.+90     	; 0x28d2 <__fpcmp_parts_f+0x9c>
    2878:	11 96       	adiw	r26, 0x01	; 1
    287a:	1c 91       	ld	r17, X
    287c:	11 97       	sbiw	r26, 0x01	; 1
    287e:	82 30       	cpi	r24, 0x02	; 2
    2880:	f1 f0       	breq	.+60     	; 0x28be <__fpcmp_parts_f+0x88>
    2882:	81 81       	ldd	r24, Z+1	; 0x01
    2884:	18 17       	cp	r17, r24
    2886:	d9 f4       	brne	.+54     	; 0x28be <__fpcmp_parts_f+0x88>
    2888:	12 96       	adiw	r26, 0x02	; 2
    288a:	2d 91       	ld	r18, X+
    288c:	3c 91       	ld	r19, X
    288e:	13 97       	sbiw	r26, 0x03	; 3
    2890:	82 81       	ldd	r24, Z+2	; 0x02
    2892:	93 81       	ldd	r25, Z+3	; 0x03
    2894:	82 17       	cp	r24, r18
    2896:	93 07       	cpc	r25, r19
    2898:	94 f0       	brlt	.+36     	; 0x28be <__fpcmp_parts_f+0x88>
    289a:	28 17       	cp	r18, r24
    289c:	39 07       	cpc	r19, r25
    289e:	bc f0       	brlt	.+46     	; 0x28ce <__fpcmp_parts_f+0x98>
    28a0:	14 96       	adiw	r26, 0x04	; 4
    28a2:	8d 91       	ld	r24, X+
    28a4:	9d 91       	ld	r25, X+
    28a6:	0d 90       	ld	r0, X+
    28a8:	bc 91       	ld	r27, X
    28aa:	a0 2d       	mov	r26, r0
    28ac:	24 81       	ldd	r18, Z+4	; 0x04
    28ae:	35 81       	ldd	r19, Z+5	; 0x05
    28b0:	46 81       	ldd	r20, Z+6	; 0x06
    28b2:	57 81       	ldd	r21, Z+7	; 0x07
    28b4:	28 17       	cp	r18, r24
    28b6:	39 07       	cpc	r19, r25
    28b8:	4a 07       	cpc	r20, r26
    28ba:	5b 07       	cpc	r21, r27
    28bc:	18 f4       	brcc	.+6      	; 0x28c4 <__fpcmp_parts_f+0x8e>
    28be:	11 23       	and	r17, r17
    28c0:	41 f0       	breq	.+16     	; 0x28d2 <__fpcmp_parts_f+0x9c>
    28c2:	0a c0       	rjmp	.+20     	; 0x28d8 <__fpcmp_parts_f+0xa2>
    28c4:	82 17       	cp	r24, r18
    28c6:	93 07       	cpc	r25, r19
    28c8:	a4 07       	cpc	r26, r20
    28ca:	b5 07       	cpc	r27, r21
    28cc:	40 f4       	brcc	.+16     	; 0x28de <__fpcmp_parts_f+0xa8>
    28ce:	11 23       	and	r17, r17
    28d0:	19 f0       	breq	.+6      	; 0x28d8 <__fpcmp_parts_f+0xa2>
    28d2:	61 e0       	ldi	r22, 0x01	; 1
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	05 c0       	rjmp	.+10     	; 0x28e2 <__fpcmp_parts_f+0xac>
    28d8:	6f ef       	ldi	r22, 0xFF	; 255
    28da:	7f ef       	ldi	r23, 0xFF	; 255
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <__fpcmp_parts_f+0xac>
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	70 e0       	ldi	r23, 0x00	; 0
    28e2:	cb 01       	movw	r24, r22
    28e4:	1f 91       	pop	r17
    28e6:	08 95       	ret

000028e8 <vfprintf>:
    28e8:	2f 92       	push	r2
    28ea:	3f 92       	push	r3
    28ec:	4f 92       	push	r4
    28ee:	5f 92       	push	r5
    28f0:	6f 92       	push	r6
    28f2:	7f 92       	push	r7
    28f4:	8f 92       	push	r8
    28f6:	9f 92       	push	r9
    28f8:	af 92       	push	r10
    28fa:	bf 92       	push	r11
    28fc:	cf 92       	push	r12
    28fe:	df 92       	push	r13
    2900:	ef 92       	push	r14
    2902:	ff 92       	push	r15
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	61 97       	sbiw	r28, 0x11	; 17
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	3c 01       	movw	r6, r24
    291e:	7f 87       	std	Y+15, r23	; 0x0f
    2920:	6e 87       	std	Y+14, r22	; 0x0e
    2922:	6a 01       	movw	r12, r20
    2924:	fc 01       	movw	r30, r24
    2926:	17 82       	std	Z+7, r1	; 0x07
    2928:	16 82       	std	Z+6, r1	; 0x06
    292a:	83 81       	ldd	r24, Z+3	; 0x03
    292c:	81 fd       	sbrc	r24, 1
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <vfprintf+0x4e>
    2930:	6f ef       	ldi	r22, 0xFF	; 255
    2932:	7f ef       	ldi	r23, 0xFF	; 255
    2934:	6f c3       	rjmp	.+1758   	; 0x3014 <vfprintf+0x72c>
    2936:	9e 01       	movw	r18, r28
    2938:	2f 5f       	subi	r18, 0xFF	; 255
    293a:	3f 4f       	sbci	r19, 0xFF	; 255
    293c:	39 8b       	std	Y+17, r19	; 0x11
    293e:	28 8b       	std	Y+16, r18	; 0x10
    2940:	f3 01       	movw	r30, r6
    2942:	23 81       	ldd	r18, Z+3	; 0x03
    2944:	ee 85       	ldd	r30, Y+14	; 0x0e
    2946:	ff 85       	ldd	r31, Y+15	; 0x0f
    2948:	23 fd       	sbrc	r18, 3
    294a:	85 91       	lpm	r24, Z+
    294c:	23 ff       	sbrs	r18, 3
    294e:	81 91       	ld	r24, Z+
    2950:	ff 87       	std	Y+15, r31	; 0x0f
    2952:	ee 87       	std	Y+14, r30	; 0x0e
    2954:	88 23       	and	r24, r24
    2956:	09 f4       	brne	.+2      	; 0x295a <vfprintf+0x72>
    2958:	5a c3       	rjmp	.+1716   	; 0x300e <vfprintf+0x726>
    295a:	85 32       	cpi	r24, 0x25	; 37
    295c:	51 f4       	brne	.+20     	; 0x2972 <vfprintf+0x8a>
    295e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2960:	ff 85       	ldd	r31, Y+15	; 0x0f
    2962:	23 fd       	sbrc	r18, 3
    2964:	85 91       	lpm	r24, Z+
    2966:	23 ff       	sbrs	r18, 3
    2968:	81 91       	ld	r24, Z+
    296a:	ff 87       	std	Y+15, r31	; 0x0f
    296c:	ee 87       	std	Y+14, r30	; 0x0e
    296e:	85 32       	cpi	r24, 0x25	; 37
    2970:	29 f4       	brne	.+10     	; 0x297c <vfprintf+0x94>
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	b3 01       	movw	r22, r6
    2976:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    297a:	e2 cf       	rjmp	.-60     	; 0x2940 <vfprintf+0x58>
    297c:	98 2f       	mov	r25, r24
    297e:	10 e0       	ldi	r17, 0x00	; 0
    2980:	88 24       	eor	r8, r8
    2982:	99 24       	eor	r9, r9
    2984:	10 32       	cpi	r17, 0x20	; 32
    2986:	b0 f4       	brcc	.+44     	; 0x29b4 <vfprintf+0xcc>
    2988:	9b 32       	cpi	r25, 0x2B	; 43
    298a:	69 f0       	breq	.+26     	; 0x29a6 <vfprintf+0xbe>
    298c:	9c 32       	cpi	r25, 0x2C	; 44
    298e:	28 f4       	brcc	.+10     	; 0x299a <vfprintf+0xb2>
    2990:	90 32       	cpi	r25, 0x20	; 32
    2992:	51 f0       	breq	.+20     	; 0x29a8 <vfprintf+0xc0>
    2994:	93 32       	cpi	r25, 0x23	; 35
    2996:	71 f4       	brne	.+28     	; 0x29b4 <vfprintf+0xcc>
    2998:	0b c0       	rjmp	.+22     	; 0x29b0 <vfprintf+0xc8>
    299a:	9d 32       	cpi	r25, 0x2D	; 45
    299c:	39 f0       	breq	.+14     	; 0x29ac <vfprintf+0xc4>
    299e:	90 33       	cpi	r25, 0x30	; 48
    29a0:	49 f4       	brne	.+18     	; 0x29b4 <vfprintf+0xcc>
    29a2:	11 60       	ori	r17, 0x01	; 1
    29a4:	28 c0       	rjmp	.+80     	; 0x29f6 <vfprintf+0x10e>
    29a6:	12 60       	ori	r17, 0x02	; 2
    29a8:	14 60       	ori	r17, 0x04	; 4
    29aa:	25 c0       	rjmp	.+74     	; 0x29f6 <vfprintf+0x10e>
    29ac:	18 60       	ori	r17, 0x08	; 8
    29ae:	23 c0       	rjmp	.+70     	; 0x29f6 <vfprintf+0x10e>
    29b0:	10 61       	ori	r17, 0x10	; 16
    29b2:	21 c0       	rjmp	.+66     	; 0x29f6 <vfprintf+0x10e>
    29b4:	17 fd       	sbrc	r17, 7
    29b6:	2a c0       	rjmp	.+84     	; 0x2a0c <vfprintf+0x124>
    29b8:	89 2f       	mov	r24, r25
    29ba:	80 53       	subi	r24, 0x30	; 48
    29bc:	8a 30       	cpi	r24, 0x0A	; 10
    29be:	78 f4       	brcc	.+30     	; 0x29de <vfprintf+0xf6>
    29c0:	16 ff       	sbrs	r17, 6
    29c2:	06 c0       	rjmp	.+12     	; 0x29d0 <vfprintf+0xe8>
    29c4:	fa e0       	ldi	r31, 0x0A	; 10
    29c6:	9f 9e       	mul	r9, r31
    29c8:	90 2c       	mov	r9, r0
    29ca:	11 24       	eor	r1, r1
    29cc:	98 0e       	add	r9, r24
    29ce:	13 c0       	rjmp	.+38     	; 0x29f6 <vfprintf+0x10e>
    29d0:	3a e0       	ldi	r19, 0x0A	; 10
    29d2:	83 9e       	mul	r8, r19
    29d4:	80 2c       	mov	r8, r0
    29d6:	11 24       	eor	r1, r1
    29d8:	88 0e       	add	r8, r24
    29da:	10 62       	ori	r17, 0x20	; 32
    29dc:	0c c0       	rjmp	.+24     	; 0x29f6 <vfprintf+0x10e>
    29de:	9e 32       	cpi	r25, 0x2E	; 46
    29e0:	21 f4       	brne	.+8      	; 0x29ea <vfprintf+0x102>
    29e2:	16 fd       	sbrc	r17, 6
    29e4:	14 c3       	rjmp	.+1576   	; 0x300e <vfprintf+0x726>
    29e6:	10 64       	ori	r17, 0x40	; 64
    29e8:	06 c0       	rjmp	.+12     	; 0x29f6 <vfprintf+0x10e>
    29ea:	9c 36       	cpi	r25, 0x6C	; 108
    29ec:	11 f4       	brne	.+4      	; 0x29f2 <vfprintf+0x10a>
    29ee:	10 68       	ori	r17, 0x80	; 128
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <vfprintf+0x10e>
    29f2:	98 36       	cpi	r25, 0x68	; 104
    29f4:	59 f4       	brne	.+22     	; 0x2a0c <vfprintf+0x124>
    29f6:	ee 85       	ldd	r30, Y+14	; 0x0e
    29f8:	ff 85       	ldd	r31, Y+15	; 0x0f
    29fa:	23 fd       	sbrc	r18, 3
    29fc:	95 91       	lpm	r25, Z+
    29fe:	23 ff       	sbrs	r18, 3
    2a00:	91 91       	ld	r25, Z+
    2a02:	ff 87       	std	Y+15, r31	; 0x0f
    2a04:	ee 87       	std	Y+14, r30	; 0x0e
    2a06:	99 23       	and	r25, r25
    2a08:	09 f0       	breq	.+2      	; 0x2a0c <vfprintf+0x124>
    2a0a:	bc cf       	rjmp	.-136    	; 0x2984 <vfprintf+0x9c>
    2a0c:	89 2f       	mov	r24, r25
    2a0e:	85 54       	subi	r24, 0x45	; 69
    2a10:	83 30       	cpi	r24, 0x03	; 3
    2a12:	20 f4       	brcc	.+8      	; 0x2a1c <vfprintf+0x134>
    2a14:	81 2f       	mov	r24, r17
    2a16:	80 61       	ori	r24, 0x10	; 16
    2a18:	90 5e       	subi	r25, 0xE0	; 224
    2a1a:	07 c0       	rjmp	.+14     	; 0x2a2a <vfprintf+0x142>
    2a1c:	89 2f       	mov	r24, r25
    2a1e:	85 56       	subi	r24, 0x65	; 101
    2a20:	83 30       	cpi	r24, 0x03	; 3
    2a22:	08 f0       	brcs	.+2      	; 0x2a26 <vfprintf+0x13e>
    2a24:	9f c1       	rjmp	.+830    	; 0x2d64 <vfprintf+0x47c>
    2a26:	81 2f       	mov	r24, r17
    2a28:	8f 7e       	andi	r24, 0xEF	; 239
    2a2a:	86 fd       	sbrc	r24, 6
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <vfprintf+0x14a>
    2a2e:	76 e0       	ldi	r23, 0x06	; 6
    2a30:	97 2e       	mov	r9, r23
    2a32:	6f e3       	ldi	r22, 0x3F	; 63
    2a34:	f6 2e       	mov	r15, r22
    2a36:	f8 22       	and	r15, r24
    2a38:	95 36       	cpi	r25, 0x65	; 101
    2a3a:	19 f4       	brne	.+6      	; 0x2a42 <vfprintf+0x15a>
    2a3c:	f0 e4       	ldi	r31, 0x40	; 64
    2a3e:	ff 2a       	or	r15, r31
    2a40:	07 c0       	rjmp	.+14     	; 0x2a50 <vfprintf+0x168>
    2a42:	96 36       	cpi	r25, 0x66	; 102
    2a44:	19 f4       	brne	.+6      	; 0x2a4c <vfprintf+0x164>
    2a46:	20 e8       	ldi	r18, 0x80	; 128
    2a48:	f2 2a       	or	r15, r18
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <vfprintf+0x168>
    2a4c:	91 10       	cpse	r9, r1
    2a4e:	9a 94       	dec	r9
    2a50:	f7 fe       	sbrs	r15, 7
    2a52:	0a c0       	rjmp	.+20     	; 0x2a68 <vfprintf+0x180>
    2a54:	3b e3       	ldi	r19, 0x3B	; 59
    2a56:	39 15       	cp	r19, r9
    2a58:	18 f4       	brcc	.+6      	; 0x2a60 <vfprintf+0x178>
    2a5a:	5c e3       	ldi	r21, 0x3C	; 60
    2a5c:	b5 2e       	mov	r11, r21
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <vfprintf+0x17c>
    2a60:	b9 2c       	mov	r11, r9
    2a62:	b3 94       	inc	r11
    2a64:	27 e0       	ldi	r18, 0x07	; 7
    2a66:	09 c0       	rjmp	.+18     	; 0x2a7a <vfprintf+0x192>
    2a68:	47 e0       	ldi	r20, 0x07	; 7
    2a6a:	49 15       	cp	r20, r9
    2a6c:	20 f4       	brcc	.+8      	; 0x2a76 <vfprintf+0x18e>
    2a6e:	bb 24       	eor	r11, r11
    2a70:	47 e0       	ldi	r20, 0x07	; 7
    2a72:	94 2e       	mov	r9, r20
    2a74:	f7 cf       	rjmp	.-18     	; 0x2a64 <vfprintf+0x17c>
    2a76:	29 2d       	mov	r18, r9
    2a78:	bb 24       	eor	r11, r11
    2a7a:	c6 01       	movw	r24, r12
    2a7c:	04 96       	adiw	r24, 0x04	; 4
    2a7e:	9d 87       	std	Y+13, r25	; 0x0d
    2a80:	8c 87       	std	Y+12, r24	; 0x0c
    2a82:	f6 01       	movw	r30, r12
    2a84:	60 81       	ld	r22, Z
    2a86:	71 81       	ldd	r23, Z+1	; 0x01
    2a88:	82 81       	ldd	r24, Z+2	; 0x02
    2a8a:	93 81       	ldd	r25, Z+3	; 0x03
    2a8c:	ae 01       	movw	r20, r28
    2a8e:	4f 5f       	subi	r20, 0xFF	; 255
    2a90:	5f 4f       	sbci	r21, 0xFF	; 255
    2a92:	0b 2d       	mov	r16, r11
    2a94:	0e 94 ed 18 	call	0x31da	; 0x31da <__ftoa_engine>
    2a98:	6c 01       	movw	r12, r24
    2a9a:	09 81       	ldd	r16, Y+1	; 0x01
    2a9c:	20 2e       	mov	r2, r16
    2a9e:	33 24       	eor	r3, r3
    2aa0:	00 ff       	sbrs	r16, 0
    2aa2:	04 c0       	rjmp	.+8      	; 0x2aac <vfprintf+0x1c4>
    2aa4:	03 fd       	sbrc	r16, 3
    2aa6:	02 c0       	rjmp	.+4      	; 0x2aac <vfprintf+0x1c4>
    2aa8:	1d e2       	ldi	r17, 0x2D	; 45
    2aaa:	09 c0       	rjmp	.+18     	; 0x2abe <vfprintf+0x1d6>
    2aac:	f1 fe       	sbrs	r15, 1
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <vfprintf+0x1cc>
    2ab0:	1b e2       	ldi	r17, 0x2B	; 43
    2ab2:	05 c0       	rjmp	.+10     	; 0x2abe <vfprintf+0x1d6>
    2ab4:	f2 fc       	sbrc	r15, 2
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <vfprintf+0x1d4>
    2ab8:	10 e0       	ldi	r17, 0x00	; 0
    2aba:	01 c0       	rjmp	.+2      	; 0x2abe <vfprintf+0x1d6>
    2abc:	10 e2       	ldi	r17, 0x20	; 32
    2abe:	c1 01       	movw	r24, r2
    2ac0:	8c 70       	andi	r24, 0x0C	; 12
    2ac2:	90 70       	andi	r25, 0x00	; 0
    2ac4:	89 2b       	or	r24, r25
    2ac6:	b9 f1       	breq	.+110    	; 0x2b36 <vfprintf+0x24e>
    2ac8:	11 23       	and	r17, r17
    2aca:	11 f4       	brne	.+4      	; 0x2ad0 <vfprintf+0x1e8>
    2acc:	83 e0       	ldi	r24, 0x03	; 3
    2ace:	01 c0       	rjmp	.+2      	; 0x2ad2 <vfprintf+0x1ea>
    2ad0:	84 e0       	ldi	r24, 0x04	; 4
    2ad2:	88 15       	cp	r24, r8
    2ad4:	10 f0       	brcs	.+4      	; 0x2ada <vfprintf+0x1f2>
    2ad6:	88 24       	eor	r8, r8
    2ad8:	0a c0       	rjmp	.+20     	; 0x2aee <vfprintf+0x206>
    2ada:	88 1a       	sub	r8, r24
    2adc:	f3 fc       	sbrc	r15, 3
    2ade:	07 c0       	rjmp	.+14     	; 0x2aee <vfprintf+0x206>
    2ae0:	80 e2       	ldi	r24, 0x20	; 32
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	b3 01       	movw	r22, r6
    2ae6:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2aea:	8a 94       	dec	r8
    2aec:	c9 f7       	brne	.-14     	; 0x2ae0 <vfprintf+0x1f8>
    2aee:	11 23       	and	r17, r17
    2af0:	29 f0       	breq	.+10     	; 0x2afc <vfprintf+0x214>
    2af2:	81 2f       	mov	r24, r17
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	b3 01       	movw	r22, r6
    2af8:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2afc:	23 fe       	sbrs	r2, 3
    2afe:	03 c0       	rjmp	.+6      	; 0x2b06 <vfprintf+0x21e>
    2b00:	0c e8       	ldi	r16, 0x8C	; 140
    2b02:	10 e0       	ldi	r17, 0x00	; 0
    2b04:	0e c0       	rjmp	.+28     	; 0x2b22 <vfprintf+0x23a>
    2b06:	00 e9       	ldi	r16, 0x90	; 144
    2b08:	10 e0       	ldi	r17, 0x00	; 0
    2b0a:	0b c0       	rjmp	.+22     	; 0x2b22 <vfprintf+0x23a>
    2b0c:	e1 14       	cp	r14, r1
    2b0e:	f1 04       	cpc	r15, r1
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <vfprintf+0x22c>
    2b12:	80 52       	subi	r24, 0x20	; 32
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	b3 01       	movw	r22, r6
    2b18:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2b1c:	0f 5f       	subi	r16, 0xFF	; 255
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	05 c0       	rjmp	.+10     	; 0x2b2c <vfprintf+0x244>
    2b22:	ef 2c       	mov	r14, r15
    2b24:	ff 24       	eor	r15, r15
    2b26:	f0 e1       	ldi	r31, 0x10	; 16
    2b28:	ef 22       	and	r14, r31
    2b2a:	ff 24       	eor	r15, r15
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	84 91       	lpm	r24, Z+
    2b30:	88 23       	and	r24, r24
    2b32:	61 f7       	brne	.-40     	; 0x2b0c <vfprintf+0x224>
    2b34:	14 c1       	rjmp	.+552    	; 0x2d5e <vfprintf+0x476>
    2b36:	f7 fe       	sbrs	r15, 7
    2b38:	12 c0       	rjmp	.+36     	; 0x2b5e <vfprintf+0x276>
    2b3a:	bc 0c       	add	r11, r12
    2b3c:	24 fe       	sbrs	r2, 4
    2b3e:	04 c0       	rjmp	.+8      	; 0x2b48 <vfprintf+0x260>
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	81 33       	cpi	r24, 0x31	; 49
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <vfprintf+0x260>
    2b46:	ba 94       	dec	r11
    2b48:	1b 14       	cp	r1, r11
    2b4a:	1c f0       	brlt	.+6      	; 0x2b52 <vfprintf+0x26a>
    2b4c:	bb 24       	eor	r11, r11
    2b4e:	b3 94       	inc	r11
    2b50:	2d c0       	rjmp	.+90     	; 0x2bac <vfprintf+0x2c4>
    2b52:	f8 e0       	ldi	r31, 0x08	; 8
    2b54:	fb 15       	cp	r31, r11
    2b56:	50 f5       	brcc	.+84     	; 0x2bac <vfprintf+0x2c4>
    2b58:	38 e0       	ldi	r19, 0x08	; 8
    2b5a:	b3 2e       	mov	r11, r19
    2b5c:	27 c0       	rjmp	.+78     	; 0x2bac <vfprintf+0x2c4>
    2b5e:	f6 fc       	sbrc	r15, 6
    2b60:	25 c0       	rjmp	.+74     	; 0x2bac <vfprintf+0x2c4>
    2b62:	89 2d       	mov	r24, r9
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	8c 15       	cp	r24, r12
    2b68:	9d 05       	cpc	r25, r13
    2b6a:	4c f0       	brlt	.+18     	; 0x2b7e <vfprintf+0x296>
    2b6c:	2c ef       	ldi	r18, 0xFC	; 252
    2b6e:	c2 16       	cp	r12, r18
    2b70:	2f ef       	ldi	r18, 0xFF	; 255
    2b72:	d2 06       	cpc	r13, r18
    2b74:	24 f0       	brlt	.+8      	; 0x2b7e <vfprintf+0x296>
    2b76:	30 e8       	ldi	r19, 0x80	; 128
    2b78:	f3 2a       	or	r15, r19
    2b7a:	01 c0       	rjmp	.+2      	; 0x2b7e <vfprintf+0x296>
    2b7c:	9a 94       	dec	r9
    2b7e:	99 20       	and	r9, r9
    2b80:	49 f0       	breq	.+18     	; 0x2b94 <vfprintf+0x2ac>
    2b82:	e2 e0       	ldi	r30, 0x02	; 2
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	ec 0f       	add	r30, r28
    2b88:	fd 1f       	adc	r31, r29
    2b8a:	e9 0d       	add	r30, r9
    2b8c:	f1 1d       	adc	r31, r1
    2b8e:	80 81       	ld	r24, Z
    2b90:	80 33       	cpi	r24, 0x30	; 48
    2b92:	a1 f3       	breq	.-24     	; 0x2b7c <vfprintf+0x294>
    2b94:	f7 fe       	sbrs	r15, 7
    2b96:	0a c0       	rjmp	.+20     	; 0x2bac <vfprintf+0x2c4>
    2b98:	b9 2c       	mov	r11, r9
    2b9a:	b3 94       	inc	r11
    2b9c:	89 2d       	mov	r24, r9
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	c8 16       	cp	r12, r24
    2ba2:	d9 06       	cpc	r13, r25
    2ba4:	14 f0       	brlt	.+4      	; 0x2baa <vfprintf+0x2c2>
    2ba6:	99 24       	eor	r9, r9
    2ba8:	01 c0       	rjmp	.+2      	; 0x2bac <vfprintf+0x2c4>
    2baa:	9c 18       	sub	r9, r12
    2bac:	f7 fc       	sbrc	r15, 7
    2bae:	03 c0       	rjmp	.+6      	; 0x2bb6 <vfprintf+0x2ce>
    2bb0:	25 e0       	ldi	r18, 0x05	; 5
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	09 c0       	rjmp	.+18     	; 0x2bc8 <vfprintf+0x2e0>
    2bb6:	1c 14       	cp	r1, r12
    2bb8:	1d 04       	cpc	r1, r13
    2bba:	1c f0       	brlt	.+6      	; 0x2bc2 <vfprintf+0x2da>
    2bbc:	21 e0       	ldi	r18, 0x01	; 1
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	03 c0       	rjmp	.+6      	; 0x2bc8 <vfprintf+0x2e0>
    2bc2:	96 01       	movw	r18, r12
    2bc4:	2f 5f       	subi	r18, 0xFF	; 255
    2bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc8:	11 23       	and	r17, r17
    2bca:	11 f0       	breq	.+4      	; 0x2bd0 <vfprintf+0x2e8>
    2bcc:	2f 5f       	subi	r18, 0xFF	; 255
    2bce:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd0:	99 20       	and	r9, r9
    2bd2:	29 f0       	breq	.+10     	; 0x2bde <vfprintf+0x2f6>
    2bd4:	89 2d       	mov	r24, r9
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	01 96       	adiw	r24, 0x01	; 1
    2bda:	28 0f       	add	r18, r24
    2bdc:	39 1f       	adc	r19, r25
    2bde:	88 2d       	mov	r24, r8
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	28 17       	cp	r18, r24
    2be4:	39 07       	cpc	r19, r25
    2be6:	14 f0       	brlt	.+4      	; 0x2bec <vfprintf+0x304>
    2be8:	88 24       	eor	r8, r8
    2bea:	01 c0       	rjmp	.+2      	; 0x2bee <vfprintf+0x306>
    2bec:	82 1a       	sub	r8, r18
    2bee:	4f 2c       	mov	r4, r15
    2bf0:	55 24       	eor	r5, r5
    2bf2:	c2 01       	movw	r24, r4
    2bf4:	89 70       	andi	r24, 0x09	; 9
    2bf6:	90 70       	andi	r25, 0x00	; 0
    2bf8:	89 2b       	or	r24, r25
    2bfa:	39 f0       	breq	.+14     	; 0x2c0a <vfprintf+0x322>
    2bfc:	08 c0       	rjmp	.+16     	; 0x2c0e <vfprintf+0x326>
    2bfe:	80 e2       	ldi	r24, 0x20	; 32
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	b3 01       	movw	r22, r6
    2c04:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2c08:	8a 94       	dec	r8
    2c0a:	88 20       	and	r8, r8
    2c0c:	c1 f7       	brne	.-16     	; 0x2bfe <vfprintf+0x316>
    2c0e:	11 23       	and	r17, r17
    2c10:	29 f0       	breq	.+10     	; 0x2c1c <vfprintf+0x334>
    2c12:	81 2f       	mov	r24, r17
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	b3 01       	movw	r22, r6
    2c18:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2c1c:	43 fe       	sbrs	r4, 3
    2c1e:	07 c0       	rjmp	.+14     	; 0x2c2e <vfprintf+0x346>
    2c20:	08 c0       	rjmp	.+16     	; 0x2c32 <vfprintf+0x34a>
    2c22:	80 e3       	ldi	r24, 0x30	; 48
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	b3 01       	movw	r22, r6
    2c28:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2c2c:	8a 94       	dec	r8
    2c2e:	88 20       	and	r8, r8
    2c30:	c1 f7       	brne	.-16     	; 0x2c22 <vfprintf+0x33a>
    2c32:	f7 fe       	sbrs	r15, 7
    2c34:	46 c0       	rjmp	.+140    	; 0x2cc2 <vfprintf+0x3da>
    2c36:	86 01       	movw	r16, r12
    2c38:	d7 fe       	sbrs	r13, 7
    2c3a:	02 c0       	rjmp	.+4      	; 0x2c40 <vfprintf+0x358>
    2c3c:	00 e0       	ldi	r16, 0x00	; 0
    2c3e:	10 e0       	ldi	r17, 0x00	; 0
    2c40:	76 01       	movw	r14, r12
    2c42:	08 94       	sec
    2c44:	e1 1c       	adc	r14, r1
    2c46:	f1 1c       	adc	r15, r1
    2c48:	e0 1a       	sub	r14, r16
    2c4a:	f1 0a       	sbc	r15, r17
    2c4c:	41 e0       	ldi	r20, 0x01	; 1
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	4c 0f       	add	r20, r28
    2c52:	5d 1f       	adc	r21, r29
    2c54:	e4 0e       	add	r14, r20
    2c56:	f5 1e       	adc	r15, r21
    2c58:	26 01       	movw	r4, r12
    2c5a:	4b 18       	sub	r4, r11
    2c5c:	51 08       	sbc	r5, r1
    2c5e:	89 2d       	mov	r24, r9
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	aa 24       	eor	r10, r10
    2c64:	bb 24       	eor	r11, r11
    2c66:	a8 1a       	sub	r10, r24
    2c68:	b9 0a       	sbc	r11, r25
    2c6a:	5f ef       	ldi	r21, 0xFF	; 255
    2c6c:	0f 3f       	cpi	r16, 0xFF	; 255
    2c6e:	15 07       	cpc	r17, r21
    2c70:	29 f4       	brne	.+10     	; 0x2c7c <vfprintf+0x394>
    2c72:	8e e2       	ldi	r24, 0x2E	; 46
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	b3 01       	movw	r22, r6
    2c78:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2c7c:	c0 16       	cp	r12, r16
    2c7e:	d1 06       	cpc	r13, r17
    2c80:	34 f0       	brlt	.+12     	; 0x2c8e <vfprintf+0x3a6>
    2c82:	40 16       	cp	r4, r16
    2c84:	51 06       	cpc	r5, r17
    2c86:	1c f4       	brge	.+6      	; 0x2c8e <vfprintf+0x3a6>
    2c88:	f7 01       	movw	r30, r14
    2c8a:	80 81       	ld	r24, Z
    2c8c:	01 c0       	rjmp	.+2      	; 0x2c90 <vfprintf+0x3a8>
    2c8e:	80 e3       	ldi	r24, 0x30	; 48
    2c90:	01 50       	subi	r16, 0x01	; 1
    2c92:	10 40       	sbci	r17, 0x00	; 0
    2c94:	08 94       	sec
    2c96:	e1 1c       	adc	r14, r1
    2c98:	f1 1c       	adc	r15, r1
    2c9a:	0a 15       	cp	r16, r10
    2c9c:	1b 05       	cpc	r17, r11
    2c9e:	2c f0       	brlt	.+10     	; 0x2caa <vfprintf+0x3c2>
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	b3 01       	movw	r22, r6
    2ca4:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2ca8:	e0 cf       	rjmp	.-64     	; 0x2c6a <vfprintf+0x382>
    2caa:	0c 15       	cp	r16, r12
    2cac:	1d 05       	cpc	r17, r13
    2cae:	39 f4       	brne	.+14     	; 0x2cbe <vfprintf+0x3d6>
    2cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb2:	96 33       	cpi	r25, 0x36	; 54
    2cb4:	18 f4       	brcc	.+6      	; 0x2cbc <vfprintf+0x3d4>
    2cb6:	95 33       	cpi	r25, 0x35	; 53
    2cb8:	11 f4       	brne	.+4      	; 0x2cbe <vfprintf+0x3d6>
    2cba:	24 fe       	sbrs	r2, 4
    2cbc:	81 e3       	ldi	r24, 0x31	; 49
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	4b c0       	rjmp	.+150    	; 0x2d58 <vfprintf+0x470>
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	81 33       	cpi	r24, 0x31	; 49
    2cc6:	09 f0       	breq	.+2      	; 0x2cca <vfprintf+0x3e2>
    2cc8:	0f 7e       	andi	r16, 0xEF	; 239
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	b3 01       	movw	r22, r6
    2cce:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2cd2:	99 20       	and	r9, r9
    2cd4:	a1 f0       	breq	.+40     	; 0x2cfe <vfprintf+0x416>
    2cd6:	8e e2       	ldi	r24, 0x2E	; 46
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	b3 01       	movw	r22, r6
    2cdc:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2ce0:	12 e0       	ldi	r17, 0x02	; 2
    2ce2:	e1 e0       	ldi	r30, 0x01	; 1
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	ec 0f       	add	r30, r28
    2ce8:	fd 1f       	adc	r31, r29
    2cea:	e1 0f       	add	r30, r17
    2cec:	f1 1d       	adc	r31, r1
    2cee:	1f 5f       	subi	r17, 0xFF	; 255
    2cf0:	80 81       	ld	r24, Z
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	b3 01       	movw	r22, r6
    2cf6:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2cfa:	9a 94       	dec	r9
    2cfc:	91 f7       	brne	.-28     	; 0x2ce2 <vfprintf+0x3fa>
    2cfe:	44 fc       	sbrc	r4, 4
    2d00:	03 c0       	rjmp	.+6      	; 0x2d08 <vfprintf+0x420>
    2d02:	85 e6       	ldi	r24, 0x65	; 101
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <vfprintf+0x424>
    2d08:	85 e4       	ldi	r24, 0x45	; 69
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	b3 01       	movw	r22, r6
    2d0e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2d12:	d7 fc       	sbrc	r13, 7
    2d14:	05 c0       	rjmp	.+10     	; 0x2d20 <vfprintf+0x438>
    2d16:	c1 14       	cp	r12, r1
    2d18:	d1 04       	cpc	r13, r1
    2d1a:	41 f4       	brne	.+16     	; 0x2d2c <vfprintf+0x444>
    2d1c:	04 ff       	sbrs	r16, 4
    2d1e:	06 c0       	rjmp	.+12     	; 0x2d2c <vfprintf+0x444>
    2d20:	d0 94       	com	r13
    2d22:	c1 94       	neg	r12
    2d24:	d1 08       	sbc	r13, r1
    2d26:	d3 94       	inc	r13
    2d28:	8d e2       	ldi	r24, 0x2D	; 45
    2d2a:	01 c0       	rjmp	.+2      	; 0x2d2e <vfprintf+0x446>
    2d2c:	8b e2       	ldi	r24, 0x2B	; 43
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	b3 01       	movw	r22, r6
    2d32:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2d36:	80 e3       	ldi	r24, 0x30	; 48
    2d38:	05 c0       	rjmp	.+10     	; 0x2d44 <vfprintf+0x45c>
    2d3a:	8f 5f       	subi	r24, 0xFF	; 255
    2d3c:	26 ef       	ldi	r18, 0xF6	; 246
    2d3e:	3f ef       	ldi	r19, 0xFF	; 255
    2d40:	c2 0e       	add	r12, r18
    2d42:	d3 1e       	adc	r13, r19
    2d44:	3a e0       	ldi	r19, 0x0A	; 10
    2d46:	c3 16       	cp	r12, r19
    2d48:	d1 04       	cpc	r13, r1
    2d4a:	bc f7       	brge	.-18     	; 0x2d3a <vfprintf+0x452>
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	b3 01       	movw	r22, r6
    2d50:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2d54:	c6 01       	movw	r24, r12
    2d56:	c0 96       	adiw	r24, 0x30	; 48
    2d58:	b3 01       	movw	r22, r6
    2d5a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2d5e:	cc 84       	ldd	r12, Y+12	; 0x0c
    2d60:	dd 84       	ldd	r13, Y+13	; 0x0d
    2d62:	52 c1       	rjmp	.+676    	; 0x3008 <vfprintf+0x720>
    2d64:	93 36       	cpi	r25, 0x63	; 99
    2d66:	31 f0       	breq	.+12     	; 0x2d74 <vfprintf+0x48c>
    2d68:	93 37       	cpi	r25, 0x73	; 115
    2d6a:	99 f0       	breq	.+38     	; 0x2d92 <vfprintf+0x4aa>
    2d6c:	93 35       	cpi	r25, 0x53	; 83
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <vfprintf+0x48a>
    2d70:	59 c0       	rjmp	.+178    	; 0x2e24 <vfprintf+0x53c>
    2d72:	23 c0       	rjmp	.+70     	; 0x2dba <vfprintf+0x4d2>
    2d74:	f6 01       	movw	r30, r12
    2d76:	80 81       	ld	r24, Z
    2d78:	89 83       	std	Y+1, r24	; 0x01
    2d7a:	5e 01       	movw	r10, r28
    2d7c:	08 94       	sec
    2d7e:	a1 1c       	adc	r10, r1
    2d80:	b1 1c       	adc	r11, r1
    2d82:	22 e0       	ldi	r18, 0x02	; 2
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	c2 0e       	add	r12, r18
    2d88:	d3 1e       	adc	r13, r19
    2d8a:	21 e0       	ldi	r18, 0x01	; 1
    2d8c:	e2 2e       	mov	r14, r18
    2d8e:	f1 2c       	mov	r15, r1
    2d90:	12 c0       	rjmp	.+36     	; 0x2db6 <vfprintf+0x4ce>
    2d92:	f6 01       	movw	r30, r12
    2d94:	a0 80       	ld	r10, Z
    2d96:	b1 80       	ldd	r11, Z+1	; 0x01
    2d98:	16 fd       	sbrc	r17, 6
    2d9a:	03 c0       	rjmp	.+6      	; 0x2da2 <vfprintf+0x4ba>
    2d9c:	6f ef       	ldi	r22, 0xFF	; 255
    2d9e:	7f ef       	ldi	r23, 0xFF	; 255
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <vfprintf+0x4be>
    2da2:	69 2d       	mov	r22, r9
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	22 e0       	ldi	r18, 0x02	; 2
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	c2 0e       	add	r12, r18
    2dac:	d3 1e       	adc	r13, r19
    2dae:	c5 01       	movw	r24, r10
    2db0:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <strnlen>
    2db4:	7c 01       	movw	r14, r24
    2db6:	1f 77       	andi	r17, 0x7F	; 127
    2db8:	13 c0       	rjmp	.+38     	; 0x2de0 <vfprintf+0x4f8>
    2dba:	f6 01       	movw	r30, r12
    2dbc:	a0 80       	ld	r10, Z
    2dbe:	b1 80       	ldd	r11, Z+1	; 0x01
    2dc0:	16 fd       	sbrc	r17, 6
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <vfprintf+0x4e2>
    2dc4:	6f ef       	ldi	r22, 0xFF	; 255
    2dc6:	7f ef       	ldi	r23, 0xFF	; 255
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <vfprintf+0x4e6>
    2dca:	69 2d       	mov	r22, r9
    2dcc:	70 e0       	ldi	r23, 0x00	; 0
    2dce:	22 e0       	ldi	r18, 0x02	; 2
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	c2 0e       	add	r12, r18
    2dd4:	d3 1e       	adc	r13, r19
    2dd6:	c5 01       	movw	r24, r10
    2dd8:	0e 94 c5 19 	call	0x338a	; 0x338a <strnlen_P>
    2ddc:	7c 01       	movw	r14, r24
    2dde:	10 68       	ori	r17, 0x80	; 128
    2de0:	13 ff       	sbrs	r17, 3
    2de2:	07 c0       	rjmp	.+14     	; 0x2df2 <vfprintf+0x50a>
    2de4:	1b c0       	rjmp	.+54     	; 0x2e1c <vfprintf+0x534>
    2de6:	80 e2       	ldi	r24, 0x20	; 32
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	b3 01       	movw	r22, r6
    2dec:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2df0:	8a 94       	dec	r8
    2df2:	88 2d       	mov	r24, r8
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	e8 16       	cp	r14, r24
    2df8:	f9 06       	cpc	r15, r25
    2dfa:	a8 f3       	brcs	.-22     	; 0x2de6 <vfprintf+0x4fe>
    2dfc:	0f c0       	rjmp	.+30     	; 0x2e1c <vfprintf+0x534>
    2dfe:	f5 01       	movw	r30, r10
    2e00:	17 fd       	sbrc	r17, 7
    2e02:	85 91       	lpm	r24, Z+
    2e04:	17 ff       	sbrs	r17, 7
    2e06:	81 91       	ld	r24, Z+
    2e08:	5f 01       	movw	r10, r30
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	b3 01       	movw	r22, r6
    2e0e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2e12:	81 10       	cpse	r8, r1
    2e14:	8a 94       	dec	r8
    2e16:	08 94       	sec
    2e18:	e1 08       	sbc	r14, r1
    2e1a:	f1 08       	sbc	r15, r1
    2e1c:	e1 14       	cp	r14, r1
    2e1e:	f1 04       	cpc	r15, r1
    2e20:	71 f7       	brne	.-36     	; 0x2dfe <vfprintf+0x516>
    2e22:	f2 c0       	rjmp	.+484    	; 0x3008 <vfprintf+0x720>
    2e24:	94 36       	cpi	r25, 0x64	; 100
    2e26:	11 f0       	breq	.+4      	; 0x2e2c <vfprintf+0x544>
    2e28:	99 36       	cpi	r25, 0x69	; 105
    2e2a:	89 f5       	brne	.+98     	; 0x2e8e <vfprintf+0x5a6>
    2e2c:	17 ff       	sbrs	r17, 7
    2e2e:	08 c0       	rjmp	.+16     	; 0x2e40 <vfprintf+0x558>
    2e30:	f6 01       	movw	r30, r12
    2e32:	20 81       	ld	r18, Z
    2e34:	31 81       	ldd	r19, Z+1	; 0x01
    2e36:	42 81       	ldd	r20, Z+2	; 0x02
    2e38:	53 81       	ldd	r21, Z+3	; 0x03
    2e3a:	84 e0       	ldi	r24, 0x04	; 4
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	0a c0       	rjmp	.+20     	; 0x2e54 <vfprintf+0x56c>
    2e40:	f6 01       	movw	r30, r12
    2e42:	80 81       	ld	r24, Z
    2e44:	91 81       	ldd	r25, Z+1	; 0x01
    2e46:	9c 01       	movw	r18, r24
    2e48:	44 27       	eor	r20, r20
    2e4a:	37 fd       	sbrc	r19, 7
    2e4c:	40 95       	com	r20
    2e4e:	54 2f       	mov	r21, r20
    2e50:	82 e0       	ldi	r24, 0x02	; 2
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	c8 0e       	add	r12, r24
    2e56:	d9 1e       	adc	r13, r25
    2e58:	9f e6       	ldi	r25, 0x6F	; 111
    2e5a:	f9 2e       	mov	r15, r25
    2e5c:	f1 22       	and	r15, r17
    2e5e:	57 ff       	sbrs	r21, 7
    2e60:	09 c0       	rjmp	.+18     	; 0x2e74 <vfprintf+0x58c>
    2e62:	50 95       	com	r21
    2e64:	40 95       	com	r20
    2e66:	30 95       	com	r19
    2e68:	21 95       	neg	r18
    2e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6c:	4f 4f       	sbci	r20, 0xFF	; 255
    2e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e70:	90 e8       	ldi	r25, 0x80	; 128
    2e72:	f9 2a       	or	r15, r25
    2e74:	ca 01       	movw	r24, r20
    2e76:	b9 01       	movw	r22, r18
    2e78:	ae 01       	movw	r20, r28
    2e7a:	4f 5f       	subi	r20, 0xFF	; 255
    2e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e7e:	2a e0       	ldi	r18, 0x0A	; 10
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	0e 94 17 1a 	call	0x342e	; 0x342e <__ultoa_invert>
    2e86:	e8 2e       	mov	r14, r24
    2e88:	e8 89       	ldd	r30, Y+16	; 0x10
    2e8a:	ee 1a       	sub	r14, r30
    2e8c:	41 c0       	rjmp	.+130    	; 0x2f10 <vfprintf+0x628>
    2e8e:	95 37       	cpi	r25, 0x75	; 117
    2e90:	21 f4       	brne	.+8      	; 0x2e9a <vfprintf+0x5b2>
    2e92:	1f 7e       	andi	r17, 0xEF	; 239
    2e94:	2a e0       	ldi	r18, 0x0A	; 10
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	1c c0       	rjmp	.+56     	; 0x2ed2 <vfprintf+0x5ea>
    2e9a:	19 7f       	andi	r17, 0xF9	; 249
    2e9c:	9f 36       	cpi	r25, 0x6F	; 111
    2e9e:	61 f0       	breq	.+24     	; 0x2eb8 <vfprintf+0x5d0>
    2ea0:	90 37       	cpi	r25, 0x70	; 112
    2ea2:	20 f4       	brcc	.+8      	; 0x2eac <vfprintf+0x5c4>
    2ea4:	98 35       	cpi	r25, 0x58	; 88
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <vfprintf+0x5c2>
    2ea8:	b2 c0       	rjmp	.+356    	; 0x300e <vfprintf+0x726>
    2eaa:	0f c0       	rjmp	.+30     	; 0x2eca <vfprintf+0x5e2>
    2eac:	90 37       	cpi	r25, 0x70	; 112
    2eae:	39 f0       	breq	.+14     	; 0x2ebe <vfprintf+0x5d6>
    2eb0:	98 37       	cpi	r25, 0x78	; 120
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <vfprintf+0x5ce>
    2eb4:	ac c0       	rjmp	.+344    	; 0x300e <vfprintf+0x726>
    2eb6:	04 c0       	rjmp	.+8      	; 0x2ec0 <vfprintf+0x5d8>
    2eb8:	28 e0       	ldi	r18, 0x08	; 8
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	0a c0       	rjmp	.+20     	; 0x2ed2 <vfprintf+0x5ea>
    2ebe:	10 61       	ori	r17, 0x10	; 16
    2ec0:	14 fd       	sbrc	r17, 4
    2ec2:	14 60       	ori	r17, 0x04	; 4
    2ec4:	20 e1       	ldi	r18, 0x10	; 16
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	04 c0       	rjmp	.+8      	; 0x2ed2 <vfprintf+0x5ea>
    2eca:	14 fd       	sbrc	r17, 4
    2ecc:	16 60       	ori	r17, 0x06	; 6
    2ece:	20 e1       	ldi	r18, 0x10	; 16
    2ed0:	32 e0       	ldi	r19, 0x02	; 2
    2ed2:	17 ff       	sbrs	r17, 7
    2ed4:	08 c0       	rjmp	.+16     	; 0x2ee6 <vfprintf+0x5fe>
    2ed6:	f6 01       	movw	r30, r12
    2ed8:	60 81       	ld	r22, Z
    2eda:	71 81       	ldd	r23, Z+1	; 0x01
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	44 e0       	ldi	r20, 0x04	; 4
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	08 c0       	rjmp	.+16     	; 0x2ef6 <vfprintf+0x60e>
    2ee6:	f6 01       	movw	r30, r12
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	bc 01       	movw	r22, r24
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	42 e0       	ldi	r20, 0x02	; 2
    2ef4:	50 e0       	ldi	r21, 0x00	; 0
    2ef6:	c4 0e       	add	r12, r20
    2ef8:	d5 1e       	adc	r13, r21
    2efa:	ae 01       	movw	r20, r28
    2efc:	4f 5f       	subi	r20, 0xFF	; 255
    2efe:	5f 4f       	sbci	r21, 0xFF	; 255
    2f00:	0e 94 17 1a 	call	0x342e	; 0x342e <__ultoa_invert>
    2f04:	e8 2e       	mov	r14, r24
    2f06:	58 89       	ldd	r21, Y+16	; 0x10
    2f08:	e5 1a       	sub	r14, r21
    2f0a:	8f e7       	ldi	r24, 0x7F	; 127
    2f0c:	f8 2e       	mov	r15, r24
    2f0e:	f1 22       	and	r15, r17
    2f10:	f6 fe       	sbrs	r15, 6
    2f12:	0b c0       	rjmp	.+22     	; 0x2f2a <vfprintf+0x642>
    2f14:	8e ef       	ldi	r24, 0xFE	; 254
    2f16:	f8 22       	and	r15, r24
    2f18:	e9 14       	cp	r14, r9
    2f1a:	38 f4       	brcc	.+14     	; 0x2f2a <vfprintf+0x642>
    2f1c:	f4 fe       	sbrs	r15, 4
    2f1e:	07 c0       	rjmp	.+14     	; 0x2f2e <vfprintf+0x646>
    2f20:	f2 fc       	sbrc	r15, 2
    2f22:	05 c0       	rjmp	.+10     	; 0x2f2e <vfprintf+0x646>
    2f24:	9f ee       	ldi	r25, 0xEF	; 239
    2f26:	f9 22       	and	r15, r25
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <vfprintf+0x646>
    2f2a:	1e 2d       	mov	r17, r14
    2f2c:	01 c0       	rjmp	.+2      	; 0x2f30 <vfprintf+0x648>
    2f2e:	19 2d       	mov	r17, r9
    2f30:	f4 fe       	sbrs	r15, 4
    2f32:	0d c0       	rjmp	.+26     	; 0x2f4e <vfprintf+0x666>
    2f34:	fe 01       	movw	r30, r28
    2f36:	ee 0d       	add	r30, r14
    2f38:	f1 1d       	adc	r31, r1
    2f3a:	80 81       	ld	r24, Z
    2f3c:	80 33       	cpi	r24, 0x30	; 48
    2f3e:	19 f4       	brne	.+6      	; 0x2f46 <vfprintf+0x65e>
    2f40:	e9 ee       	ldi	r30, 0xE9	; 233
    2f42:	fe 22       	and	r15, r30
    2f44:	08 c0       	rjmp	.+16     	; 0x2f56 <vfprintf+0x66e>
    2f46:	1f 5f       	subi	r17, 0xFF	; 255
    2f48:	f2 fe       	sbrs	r15, 2
    2f4a:	05 c0       	rjmp	.+10     	; 0x2f56 <vfprintf+0x66e>
    2f4c:	03 c0       	rjmp	.+6      	; 0x2f54 <vfprintf+0x66c>
    2f4e:	8f 2d       	mov	r24, r15
    2f50:	86 78       	andi	r24, 0x86	; 134
    2f52:	09 f0       	breq	.+2      	; 0x2f56 <vfprintf+0x66e>
    2f54:	1f 5f       	subi	r17, 0xFF	; 255
    2f56:	0f 2d       	mov	r16, r15
    2f58:	f3 fc       	sbrc	r15, 3
    2f5a:	14 c0       	rjmp	.+40     	; 0x2f84 <vfprintf+0x69c>
    2f5c:	f0 fe       	sbrs	r15, 0
    2f5e:	0f c0       	rjmp	.+30     	; 0x2f7e <vfprintf+0x696>
    2f60:	18 15       	cp	r17, r8
    2f62:	10 f0       	brcs	.+4      	; 0x2f68 <vfprintf+0x680>
    2f64:	9e 2c       	mov	r9, r14
    2f66:	0b c0       	rjmp	.+22     	; 0x2f7e <vfprintf+0x696>
    2f68:	9e 2c       	mov	r9, r14
    2f6a:	98 0c       	add	r9, r8
    2f6c:	91 1a       	sub	r9, r17
    2f6e:	18 2d       	mov	r17, r8
    2f70:	06 c0       	rjmp	.+12     	; 0x2f7e <vfprintf+0x696>
    2f72:	80 e2       	ldi	r24, 0x20	; 32
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	b3 01       	movw	r22, r6
    2f78:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2f7c:	1f 5f       	subi	r17, 0xFF	; 255
    2f7e:	18 15       	cp	r17, r8
    2f80:	c0 f3       	brcs	.-16     	; 0x2f72 <vfprintf+0x68a>
    2f82:	04 c0       	rjmp	.+8      	; 0x2f8c <vfprintf+0x6a4>
    2f84:	18 15       	cp	r17, r8
    2f86:	10 f4       	brcc	.+4      	; 0x2f8c <vfprintf+0x6a4>
    2f88:	81 1a       	sub	r8, r17
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <vfprintf+0x6a6>
    2f8c:	88 24       	eor	r8, r8
    2f8e:	04 ff       	sbrs	r16, 4
    2f90:	0f c0       	rjmp	.+30     	; 0x2fb0 <vfprintf+0x6c8>
    2f92:	80 e3       	ldi	r24, 0x30	; 48
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	b3 01       	movw	r22, r6
    2f98:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2f9c:	02 ff       	sbrs	r16, 2
    2f9e:	1d c0       	rjmp	.+58     	; 0x2fda <vfprintf+0x6f2>
    2fa0:	01 fd       	sbrc	r16, 1
    2fa2:	03 c0       	rjmp	.+6      	; 0x2faa <vfprintf+0x6c2>
    2fa4:	88 e7       	ldi	r24, 0x78	; 120
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	0e c0       	rjmp	.+28     	; 0x2fc6 <vfprintf+0x6de>
    2faa:	88 e5       	ldi	r24, 0x58	; 88
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	0b c0       	rjmp	.+22     	; 0x2fc6 <vfprintf+0x6de>
    2fb0:	80 2f       	mov	r24, r16
    2fb2:	86 78       	andi	r24, 0x86	; 134
    2fb4:	91 f0       	breq	.+36     	; 0x2fda <vfprintf+0x6f2>
    2fb6:	01 ff       	sbrs	r16, 1
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <vfprintf+0x6d6>
    2fba:	8b e2       	ldi	r24, 0x2B	; 43
    2fbc:	01 c0       	rjmp	.+2      	; 0x2fc0 <vfprintf+0x6d8>
    2fbe:	80 e2       	ldi	r24, 0x20	; 32
    2fc0:	f7 fc       	sbrc	r15, 7
    2fc2:	8d e2       	ldi	r24, 0x2D	; 45
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	b3 01       	movw	r22, r6
    2fc8:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2fcc:	06 c0       	rjmp	.+12     	; 0x2fda <vfprintf+0x6f2>
    2fce:	80 e3       	ldi	r24, 0x30	; 48
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	b3 01       	movw	r22, r6
    2fd4:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2fd8:	9a 94       	dec	r9
    2fda:	e9 14       	cp	r14, r9
    2fdc:	c0 f3       	brcs	.-16     	; 0x2fce <vfprintf+0x6e6>
    2fde:	ea 94       	dec	r14
    2fe0:	e1 e0       	ldi	r30, 0x01	; 1
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	ec 0f       	add	r30, r28
    2fe6:	fd 1f       	adc	r31, r29
    2fe8:	ee 0d       	add	r30, r14
    2fea:	f1 1d       	adc	r31, r1
    2fec:	80 81       	ld	r24, Z
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	b3 01       	movw	r22, r6
    2ff2:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    2ff6:	ee 20       	and	r14, r14
    2ff8:	91 f7       	brne	.-28     	; 0x2fde <vfprintf+0x6f6>
    2ffa:	06 c0       	rjmp	.+12     	; 0x3008 <vfprintf+0x720>
    2ffc:	80 e2       	ldi	r24, 0x20	; 32
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	b3 01       	movw	r22, r6
    3002:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <fputc>
    3006:	8a 94       	dec	r8
    3008:	88 20       	and	r8, r8
    300a:	c1 f7       	brne	.-16     	; 0x2ffc <vfprintf+0x714>
    300c:	99 cc       	rjmp	.-1742   	; 0x2940 <vfprintf+0x58>
    300e:	f3 01       	movw	r30, r6
    3010:	66 81       	ldd	r22, Z+6	; 0x06
    3012:	77 81       	ldd	r23, Z+7	; 0x07
    3014:	cb 01       	movw	r24, r22
    3016:	61 96       	adiw	r28, 0x11	; 17
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	f8 94       	cli
    301c:	de bf       	out	0x3e, r29	; 62
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	cd bf       	out	0x3d, r28	; 61
    3022:	cf 91       	pop	r28
    3024:	df 91       	pop	r29
    3026:	1f 91       	pop	r17
    3028:	0f 91       	pop	r16
    302a:	ff 90       	pop	r15
    302c:	ef 90       	pop	r14
    302e:	df 90       	pop	r13
    3030:	cf 90       	pop	r12
    3032:	bf 90       	pop	r11
    3034:	af 90       	pop	r10
    3036:	9f 90       	pop	r9
    3038:	8f 90       	pop	r8
    303a:	7f 90       	pop	r7
    303c:	6f 90       	pop	r6
    303e:	5f 90       	pop	r5
    3040:	4f 90       	pop	r4
    3042:	3f 90       	pop	r3
    3044:	2f 90       	pop	r2
    3046:	08 95       	ret

00003048 <__divmodhi4>:
    3048:	97 fb       	bst	r25, 7
    304a:	09 2e       	mov	r0, r25
    304c:	07 26       	eor	r0, r23
    304e:	0a d0       	rcall	.+20     	; 0x3064 <__divmodhi4_neg1>
    3050:	77 fd       	sbrc	r23, 7
    3052:	04 d0       	rcall	.+8      	; 0x305c <__divmodhi4_neg2>
    3054:	0c d0       	rcall	.+24     	; 0x306e <__udivmodhi4>
    3056:	06 d0       	rcall	.+12     	; 0x3064 <__divmodhi4_neg1>
    3058:	00 20       	and	r0, r0
    305a:	1a f4       	brpl	.+6      	; 0x3062 <__divmodhi4_exit>

0000305c <__divmodhi4_neg2>:
    305c:	70 95       	com	r23
    305e:	61 95       	neg	r22
    3060:	7f 4f       	sbci	r23, 0xFF	; 255

00003062 <__divmodhi4_exit>:
    3062:	08 95       	ret

00003064 <__divmodhi4_neg1>:
    3064:	f6 f7       	brtc	.-4      	; 0x3062 <__divmodhi4_exit>
    3066:	90 95       	com	r25
    3068:	81 95       	neg	r24
    306a:	9f 4f       	sbci	r25, 0xFF	; 255
    306c:	08 95       	ret

0000306e <__udivmodhi4>:
    306e:	aa 1b       	sub	r26, r26
    3070:	bb 1b       	sub	r27, r27
    3072:	51 e1       	ldi	r21, 0x11	; 17
    3074:	07 c0       	rjmp	.+14     	; 0x3084 <__udivmodhi4_ep>

00003076 <__udivmodhi4_loop>:
    3076:	aa 1f       	adc	r26, r26
    3078:	bb 1f       	adc	r27, r27
    307a:	a6 17       	cp	r26, r22
    307c:	b7 07       	cpc	r27, r23
    307e:	10 f0       	brcs	.+4      	; 0x3084 <__udivmodhi4_ep>
    3080:	a6 1b       	sub	r26, r22
    3082:	b7 0b       	sbc	r27, r23

00003084 <__udivmodhi4_ep>:
    3084:	88 1f       	adc	r24, r24
    3086:	99 1f       	adc	r25, r25
    3088:	5a 95       	dec	r21
    308a:	a9 f7       	brne	.-22     	; 0x3076 <__udivmodhi4_loop>
    308c:	80 95       	com	r24
    308e:	90 95       	com	r25
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	08 95       	ret

00003096 <__prologue_saves__>:
    3096:	2f 92       	push	r2
    3098:	3f 92       	push	r3
    309a:	4f 92       	push	r4
    309c:	5f 92       	push	r5
    309e:	6f 92       	push	r6
    30a0:	7f 92       	push	r7
    30a2:	8f 92       	push	r8
    30a4:	9f 92       	push	r9
    30a6:	af 92       	push	r10
    30a8:	bf 92       	push	r11
    30aa:	cf 92       	push	r12
    30ac:	df 92       	push	r13
    30ae:	ef 92       	push	r14
    30b0:	ff 92       	push	r15
    30b2:	0f 93       	push	r16
    30b4:	1f 93       	push	r17
    30b6:	cf 93       	push	r28
    30b8:	df 93       	push	r29
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
    30be:	ca 1b       	sub	r28, r26
    30c0:	db 0b       	sbc	r29, r27
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	09 94       	ijmp

000030ce <__epilogue_restores__>:
    30ce:	2a 88       	ldd	r2, Y+18	; 0x12
    30d0:	39 88       	ldd	r3, Y+17	; 0x11
    30d2:	48 88       	ldd	r4, Y+16	; 0x10
    30d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    30d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    30d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    30da:	8c 84       	ldd	r8, Y+12	; 0x0c
    30dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    30de:	aa 84       	ldd	r10, Y+10	; 0x0a
    30e0:	b9 84       	ldd	r11, Y+9	; 0x09
    30e2:	c8 84       	ldd	r12, Y+8	; 0x08
    30e4:	df 80       	ldd	r13, Y+7	; 0x07
    30e6:	ee 80       	ldd	r14, Y+6	; 0x06
    30e8:	fd 80       	ldd	r15, Y+5	; 0x05
    30ea:	0c 81       	ldd	r16, Y+4	; 0x04
    30ec:	1b 81       	ldd	r17, Y+3	; 0x03
    30ee:	aa 81       	ldd	r26, Y+2	; 0x02
    30f0:	b9 81       	ldd	r27, Y+1	; 0x01
    30f2:	ce 0f       	add	r28, r30
    30f4:	d1 1d       	adc	r29, r1
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	ed 01       	movw	r28, r26
    3102:	08 95       	ret

00003104 <do_rand>:
    3104:	af 92       	push	r10
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	ec 01       	movw	r28, r24
    311a:	a8 80       	ld	r10, Y
    311c:	b9 80       	ldd	r11, Y+1	; 0x01
    311e:	ca 80       	ldd	r12, Y+2	; 0x02
    3120:	db 80       	ldd	r13, Y+3	; 0x03
    3122:	a1 14       	cp	r10, r1
    3124:	b1 04       	cpc	r11, r1
    3126:	c1 04       	cpc	r12, r1
    3128:	d1 04       	cpc	r13, r1
    312a:	41 f4       	brne	.+16     	; 0x313c <do_rand+0x38>
    312c:	84 e2       	ldi	r24, 0x24	; 36
    312e:	a8 2e       	mov	r10, r24
    3130:	89 ed       	ldi	r24, 0xD9	; 217
    3132:	b8 2e       	mov	r11, r24
    3134:	8b e5       	ldi	r24, 0x5B	; 91
    3136:	c8 2e       	mov	r12, r24
    3138:	87 e0       	ldi	r24, 0x07	; 7
    313a:	d8 2e       	mov	r13, r24
    313c:	c6 01       	movw	r24, r12
    313e:	b5 01       	movw	r22, r10
    3140:	2d e1       	ldi	r18, 0x1D	; 29
    3142:	33 ef       	ldi	r19, 0xF3	; 243
    3144:	41 e0       	ldi	r20, 0x01	; 1
    3146:	50 e0       	ldi	r21, 0x00	; 0
    3148:	0e 94 94 1a 	call	0x3528	; 0x3528 <__divmodsi4>
    314c:	27 ea       	ldi	r18, 0xA7	; 167
    314e:	31 e4       	ldi	r19, 0x41	; 65
    3150:	40 e0       	ldi	r20, 0x00	; 0
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__mulsi3>
    3158:	7b 01       	movw	r14, r22
    315a:	8c 01       	movw	r16, r24
    315c:	c6 01       	movw	r24, r12
    315e:	b5 01       	movw	r22, r10
    3160:	2d e1       	ldi	r18, 0x1D	; 29
    3162:	33 ef       	ldi	r19, 0xF3	; 243
    3164:	41 e0       	ldi	r20, 0x01	; 1
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	0e 94 94 1a 	call	0x3528	; 0x3528 <__divmodsi4>
    316c:	ca 01       	movw	r24, r20
    316e:	b9 01       	movw	r22, r18
    3170:	2c ee       	ldi	r18, 0xEC	; 236
    3172:	34 ef       	ldi	r19, 0xF4	; 244
    3174:	4f ef       	ldi	r20, 0xFF	; 255
    3176:	5f ef       	ldi	r21, 0xFF	; 255
    3178:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__mulsi3>
    317c:	6e 0d       	add	r22, r14
    317e:	7f 1d       	adc	r23, r15
    3180:	80 1f       	adc	r24, r16
    3182:	91 1f       	adc	r25, r17
    3184:	97 ff       	sbrs	r25, 7
    3186:	04 c0       	rjmp	.+8      	; 0x3190 <do_rand+0x8c>
    3188:	61 50       	subi	r22, 0x01	; 1
    318a:	70 40       	sbci	r23, 0x00	; 0
    318c:	80 40       	sbci	r24, 0x00	; 0
    318e:	90 48       	sbci	r25, 0x80	; 128
    3190:	68 83       	st	Y, r22
    3192:	79 83       	std	Y+1, r23	; 0x01
    3194:	8a 83       	std	Y+2, r24	; 0x02
    3196:	9b 83       	std	Y+3, r25	; 0x03
    3198:	9b 01       	movw	r18, r22
    319a:	3f 77       	andi	r19, 0x7F	; 127
    319c:	c9 01       	movw	r24, r18
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	1f 91       	pop	r17
    31a4:	0f 91       	pop	r16
    31a6:	ff 90       	pop	r15
    31a8:	ef 90       	pop	r14
    31aa:	df 90       	pop	r13
    31ac:	cf 90       	pop	r12
    31ae:	bf 90       	pop	r11
    31b0:	af 90       	pop	r10
    31b2:	08 95       	ret

000031b4 <rand_r>:
    31b4:	0e 94 82 18 	call	0x3104	; 0x3104 <do_rand>
    31b8:	08 95       	ret

000031ba <rand>:
    31ba:	87 e8       	ldi	r24, 0x87	; 135
    31bc:	92 e0       	ldi	r25, 0x02	; 2
    31be:	0e 94 82 18 	call	0x3104	; 0x3104 <do_rand>
    31c2:	08 95       	ret

000031c4 <srand>:
    31c4:	a0 e0       	ldi	r26, 0x00	; 0
    31c6:	b0 e0       	ldi	r27, 0x00	; 0
    31c8:	80 93 87 02 	sts	0x0287, r24
    31cc:	90 93 88 02 	sts	0x0288, r25
    31d0:	a0 93 89 02 	sts	0x0289, r26
    31d4:	b0 93 8a 02 	sts	0x028A, r27
    31d8:	08 95       	ret

000031da <__ftoa_engine>:
    31da:	28 30       	cpi	r18, 0x08	; 8
    31dc:	08 f0       	brcs	.+2      	; 0x31e0 <__ftoa_engine+0x6>
    31de:	27 e0       	ldi	r18, 0x07	; 7
    31e0:	33 27       	eor	r19, r19
    31e2:	da 01       	movw	r26, r20
    31e4:	99 0f       	add	r25, r25
    31e6:	31 1d       	adc	r19, r1
    31e8:	87 fd       	sbrc	r24, 7
    31ea:	91 60       	ori	r25, 0x01	; 1
    31ec:	00 96       	adiw	r24, 0x00	; 0
    31ee:	61 05       	cpc	r22, r1
    31f0:	71 05       	cpc	r23, r1
    31f2:	39 f4       	brne	.+14     	; 0x3202 <__ftoa_engine+0x28>
    31f4:	32 60       	ori	r19, 0x02	; 2
    31f6:	2e 5f       	subi	r18, 0xFE	; 254
    31f8:	3d 93       	st	X+, r19
    31fa:	30 e3       	ldi	r19, 0x30	; 48
    31fc:	2a 95       	dec	r18
    31fe:	e1 f7       	brne	.-8      	; 0x31f8 <__ftoa_engine+0x1e>
    3200:	08 95       	ret
    3202:	9f 3f       	cpi	r25, 0xFF	; 255
    3204:	30 f0       	brcs	.+12     	; 0x3212 <__ftoa_engine+0x38>
    3206:	80 38       	cpi	r24, 0x80	; 128
    3208:	71 05       	cpc	r23, r1
    320a:	61 05       	cpc	r22, r1
    320c:	09 f0       	breq	.+2      	; 0x3210 <__ftoa_engine+0x36>
    320e:	3c 5f       	subi	r19, 0xFC	; 252
    3210:	3c 5f       	subi	r19, 0xFC	; 252
    3212:	3d 93       	st	X+, r19
    3214:	91 30       	cpi	r25, 0x01	; 1
    3216:	08 f0       	brcs	.+2      	; 0x321a <__ftoa_engine+0x40>
    3218:	80 68       	ori	r24, 0x80	; 128
    321a:	91 1d       	adc	r25, r1
    321c:	df 93       	push	r29
    321e:	cf 93       	push	r28
    3220:	1f 93       	push	r17
    3222:	0f 93       	push	r16
    3224:	ff 92       	push	r15
    3226:	ef 92       	push	r14
    3228:	19 2f       	mov	r17, r25
    322a:	98 7f       	andi	r25, 0xF8	; 248
    322c:	96 95       	lsr	r25
    322e:	e9 2f       	mov	r30, r25
    3230:	96 95       	lsr	r25
    3232:	96 95       	lsr	r25
    3234:	e9 0f       	add	r30, r25
    3236:	ff 27       	eor	r31, r31
    3238:	e2 51       	subi	r30, 0x12	; 18
    323a:	ff 4f       	sbci	r31, 0xFF	; 255
    323c:	99 27       	eor	r25, r25
    323e:	33 27       	eor	r19, r19
    3240:	ee 24       	eor	r14, r14
    3242:	ff 24       	eor	r15, r15
    3244:	a7 01       	movw	r20, r14
    3246:	e7 01       	movw	r28, r14
    3248:	05 90       	lpm	r0, Z+
    324a:	08 94       	sec
    324c:	07 94       	ror	r0
    324e:	28 f4       	brcc	.+10     	; 0x325a <__ftoa_engine+0x80>
    3250:	36 0f       	add	r19, r22
    3252:	e7 1e       	adc	r14, r23
    3254:	f8 1e       	adc	r15, r24
    3256:	49 1f       	adc	r20, r25
    3258:	51 1d       	adc	r21, r1
    325a:	66 0f       	add	r22, r22
    325c:	77 1f       	adc	r23, r23
    325e:	88 1f       	adc	r24, r24
    3260:	99 1f       	adc	r25, r25
    3262:	06 94       	lsr	r0
    3264:	a1 f7       	brne	.-24     	; 0x324e <__ftoa_engine+0x74>
    3266:	05 90       	lpm	r0, Z+
    3268:	07 94       	ror	r0
    326a:	28 f4       	brcc	.+10     	; 0x3276 <__ftoa_engine+0x9c>
    326c:	e7 0e       	add	r14, r23
    326e:	f8 1e       	adc	r15, r24
    3270:	49 1f       	adc	r20, r25
    3272:	56 1f       	adc	r21, r22
    3274:	c1 1d       	adc	r28, r1
    3276:	77 0f       	add	r23, r23
    3278:	88 1f       	adc	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	66 1f       	adc	r22, r22
    327e:	06 94       	lsr	r0
    3280:	a1 f7       	brne	.-24     	; 0x326a <__ftoa_engine+0x90>
    3282:	05 90       	lpm	r0, Z+
    3284:	07 94       	ror	r0
    3286:	28 f4       	brcc	.+10     	; 0x3292 <__ftoa_engine+0xb8>
    3288:	f8 0e       	add	r15, r24
    328a:	49 1f       	adc	r20, r25
    328c:	56 1f       	adc	r21, r22
    328e:	c7 1f       	adc	r28, r23
    3290:	d1 1d       	adc	r29, r1
    3292:	88 0f       	add	r24, r24
    3294:	99 1f       	adc	r25, r25
    3296:	66 1f       	adc	r22, r22
    3298:	77 1f       	adc	r23, r23
    329a:	06 94       	lsr	r0
    329c:	a1 f7       	brne	.-24     	; 0x3286 <__ftoa_engine+0xac>
    329e:	05 90       	lpm	r0, Z+
    32a0:	07 94       	ror	r0
    32a2:	20 f4       	brcc	.+8      	; 0x32ac <__ftoa_engine+0xd2>
    32a4:	49 0f       	add	r20, r25
    32a6:	56 1f       	adc	r21, r22
    32a8:	c7 1f       	adc	r28, r23
    32aa:	d8 1f       	adc	r29, r24
    32ac:	99 0f       	add	r25, r25
    32ae:	66 1f       	adc	r22, r22
    32b0:	77 1f       	adc	r23, r23
    32b2:	88 1f       	adc	r24, r24
    32b4:	06 94       	lsr	r0
    32b6:	a9 f7       	brne	.-22     	; 0x32a2 <__ftoa_engine+0xc8>
    32b8:	84 91       	lpm	r24, Z+
    32ba:	10 95       	com	r17
    32bc:	17 70       	andi	r17, 0x07	; 7
    32be:	41 f0       	breq	.+16     	; 0x32d0 <__ftoa_engine+0xf6>
    32c0:	d6 95       	lsr	r29
    32c2:	c7 95       	ror	r28
    32c4:	57 95       	ror	r21
    32c6:	47 95       	ror	r20
    32c8:	f7 94       	ror	r15
    32ca:	e7 94       	ror	r14
    32cc:	1a 95       	dec	r17
    32ce:	c1 f7       	brne	.-16     	; 0x32c0 <__ftoa_engine+0xe6>
    32d0:	e4 e9       	ldi	r30, 0x94	; 148
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	68 94       	set
    32d6:	15 90       	lpm	r1, Z+
    32d8:	15 91       	lpm	r17, Z+
    32da:	35 91       	lpm	r19, Z+
    32dc:	65 91       	lpm	r22, Z+
    32de:	95 91       	lpm	r25, Z+
    32e0:	05 90       	lpm	r0, Z+
    32e2:	7f e2       	ldi	r23, 0x2F	; 47
    32e4:	73 95       	inc	r23
    32e6:	e1 18       	sub	r14, r1
    32e8:	f1 0a       	sbc	r15, r17
    32ea:	43 0b       	sbc	r20, r19
    32ec:	56 0b       	sbc	r21, r22
    32ee:	c9 0b       	sbc	r28, r25
    32f0:	d0 09       	sbc	r29, r0
    32f2:	c0 f7       	brcc	.-16     	; 0x32e4 <__ftoa_engine+0x10a>
    32f4:	e1 0c       	add	r14, r1
    32f6:	f1 1e       	adc	r15, r17
    32f8:	43 1f       	adc	r20, r19
    32fa:	56 1f       	adc	r21, r22
    32fc:	c9 1f       	adc	r28, r25
    32fe:	d0 1d       	adc	r29, r0
    3300:	7e f4       	brtc	.+30     	; 0x3320 <__ftoa_engine+0x146>
    3302:	70 33       	cpi	r23, 0x30	; 48
    3304:	11 f4       	brne	.+4      	; 0x330a <__ftoa_engine+0x130>
    3306:	8a 95       	dec	r24
    3308:	e6 cf       	rjmp	.-52     	; 0x32d6 <__ftoa_engine+0xfc>
    330a:	e8 94       	clt
    330c:	01 50       	subi	r16, 0x01	; 1
    330e:	30 f0       	brcs	.+12     	; 0x331c <__ftoa_engine+0x142>
    3310:	08 0f       	add	r16, r24
    3312:	0a f4       	brpl	.+2      	; 0x3316 <__ftoa_engine+0x13c>
    3314:	00 27       	eor	r16, r16
    3316:	02 17       	cp	r16, r18
    3318:	08 f4       	brcc	.+2      	; 0x331c <__ftoa_engine+0x142>
    331a:	20 2f       	mov	r18, r16
    331c:	23 95       	inc	r18
    331e:	02 2f       	mov	r16, r18
    3320:	7a 33       	cpi	r23, 0x3A	; 58
    3322:	28 f0       	brcs	.+10     	; 0x332e <__ftoa_engine+0x154>
    3324:	79 e3       	ldi	r23, 0x39	; 57
    3326:	7d 93       	st	X+, r23
    3328:	2a 95       	dec	r18
    332a:	e9 f7       	brne	.-6      	; 0x3326 <__ftoa_engine+0x14c>
    332c:	10 c0       	rjmp	.+32     	; 0x334e <__ftoa_engine+0x174>
    332e:	7d 93       	st	X+, r23
    3330:	2a 95       	dec	r18
    3332:	89 f6       	brne	.-94     	; 0x32d6 <__ftoa_engine+0xfc>
    3334:	06 94       	lsr	r0
    3336:	97 95       	ror	r25
    3338:	67 95       	ror	r22
    333a:	37 95       	ror	r19
    333c:	17 95       	ror	r17
    333e:	17 94       	ror	r1
    3340:	e1 18       	sub	r14, r1
    3342:	f1 0a       	sbc	r15, r17
    3344:	43 0b       	sbc	r20, r19
    3346:	56 0b       	sbc	r21, r22
    3348:	c9 0b       	sbc	r28, r25
    334a:	d0 09       	sbc	r29, r0
    334c:	98 f0       	brcs	.+38     	; 0x3374 <__ftoa_engine+0x19a>
    334e:	23 95       	inc	r18
    3350:	7e 91       	ld	r23, -X
    3352:	73 95       	inc	r23
    3354:	7a 33       	cpi	r23, 0x3A	; 58
    3356:	08 f0       	brcs	.+2      	; 0x335a <__ftoa_engine+0x180>
    3358:	70 e3       	ldi	r23, 0x30	; 48
    335a:	7c 93       	st	X, r23
    335c:	20 13       	cpse	r18, r16
    335e:	b8 f7       	brcc	.-18     	; 0x334e <__ftoa_engine+0x174>
    3360:	7e 91       	ld	r23, -X
    3362:	70 61       	ori	r23, 0x10	; 16
    3364:	7d 93       	st	X+, r23
    3366:	30 f0       	brcs	.+12     	; 0x3374 <__ftoa_engine+0x19a>
    3368:	83 95       	inc	r24
    336a:	71 e3       	ldi	r23, 0x31	; 49
    336c:	7d 93       	st	X+, r23
    336e:	70 e3       	ldi	r23, 0x30	; 48
    3370:	2a 95       	dec	r18
    3372:	e1 f7       	brne	.-8      	; 0x336c <__ftoa_engine+0x192>
    3374:	11 24       	eor	r1, r1
    3376:	ef 90       	pop	r14
    3378:	ff 90       	pop	r15
    337a:	0f 91       	pop	r16
    337c:	1f 91       	pop	r17
    337e:	cf 91       	pop	r28
    3380:	df 91       	pop	r29
    3382:	99 27       	eor	r25, r25
    3384:	87 fd       	sbrc	r24, 7
    3386:	90 95       	com	r25
    3388:	08 95       	ret

0000338a <strnlen_P>:
    338a:	fc 01       	movw	r30, r24
    338c:	05 90       	lpm	r0, Z+
    338e:	61 50       	subi	r22, 0x01	; 1
    3390:	70 40       	sbci	r23, 0x00	; 0
    3392:	01 10       	cpse	r0, r1
    3394:	d8 f7       	brcc	.-10     	; 0x338c <strnlen_P+0x2>
    3396:	80 95       	com	r24
    3398:	90 95       	com	r25
    339a:	8e 0f       	add	r24, r30
    339c:	9f 1f       	adc	r25, r31
    339e:	08 95       	ret

000033a0 <memcpy>:
    33a0:	fb 01       	movw	r30, r22
    33a2:	dc 01       	movw	r26, r24
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <memcpy+0xa>
    33a6:	01 90       	ld	r0, Z+
    33a8:	0d 92       	st	X+, r0
    33aa:	41 50       	subi	r20, 0x01	; 1
    33ac:	50 40       	sbci	r21, 0x00	; 0
    33ae:	d8 f7       	brcc	.-10     	; 0x33a6 <memcpy+0x6>
    33b0:	08 95       	ret

000033b2 <memset>:
    33b2:	dc 01       	movw	r26, r24
    33b4:	01 c0       	rjmp	.+2      	; 0x33b8 <memset+0x6>
    33b6:	6d 93       	st	X+, r22
    33b8:	41 50       	subi	r20, 0x01	; 1
    33ba:	50 40       	sbci	r21, 0x00	; 0
    33bc:	e0 f7       	brcc	.-8      	; 0x33b6 <memset+0x4>
    33be:	08 95       	ret

000033c0 <strnlen>:
    33c0:	fc 01       	movw	r30, r24
    33c2:	61 50       	subi	r22, 0x01	; 1
    33c4:	70 40       	sbci	r23, 0x00	; 0
    33c6:	01 90       	ld	r0, Z+
    33c8:	01 10       	cpse	r0, r1
    33ca:	d8 f7       	brcc	.-10     	; 0x33c2 <strnlen+0x2>
    33cc:	80 95       	com	r24
    33ce:	90 95       	com	r25
    33d0:	8e 0f       	add	r24, r30
    33d2:	9f 1f       	adc	r25, r31
    33d4:	08 95       	ret

000033d6 <fputc>:
    33d6:	0f 93       	push	r16
    33d8:	1f 93       	push	r17
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	8c 01       	movw	r16, r24
    33e0:	eb 01       	movw	r28, r22
    33e2:	8b 81       	ldd	r24, Y+3	; 0x03
    33e4:	81 ff       	sbrs	r24, 1
    33e6:	1b c0       	rjmp	.+54     	; 0x341e <fputc+0x48>
    33e8:	82 ff       	sbrs	r24, 2
    33ea:	0d c0       	rjmp	.+26     	; 0x3406 <fputc+0x30>
    33ec:	2e 81       	ldd	r18, Y+6	; 0x06
    33ee:	3f 81       	ldd	r19, Y+7	; 0x07
    33f0:	8c 81       	ldd	r24, Y+4	; 0x04
    33f2:	9d 81       	ldd	r25, Y+5	; 0x05
    33f4:	28 17       	cp	r18, r24
    33f6:	39 07       	cpc	r19, r25
    33f8:	64 f4       	brge	.+24     	; 0x3412 <fputc+0x3c>
    33fa:	e8 81       	ld	r30, Y
    33fc:	f9 81       	ldd	r31, Y+1	; 0x01
    33fe:	01 93       	st	Z+, r16
    3400:	f9 83       	std	Y+1, r31	; 0x01
    3402:	e8 83       	st	Y, r30
    3404:	06 c0       	rjmp	.+12     	; 0x3412 <fputc+0x3c>
    3406:	e8 85       	ldd	r30, Y+8	; 0x08
    3408:	f9 85       	ldd	r31, Y+9	; 0x09
    340a:	80 2f       	mov	r24, r16
    340c:	09 95       	icall
    340e:	89 2b       	or	r24, r25
    3410:	31 f4       	brne	.+12     	; 0x341e <fputc+0x48>
    3412:	8e 81       	ldd	r24, Y+6	; 0x06
    3414:	9f 81       	ldd	r25, Y+7	; 0x07
    3416:	01 96       	adiw	r24, 0x01	; 1
    3418:	9f 83       	std	Y+7, r25	; 0x07
    341a:	8e 83       	std	Y+6, r24	; 0x06
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <fputc+0x4c>
    341e:	0f ef       	ldi	r16, 0xFF	; 255
    3420:	1f ef       	ldi	r17, 0xFF	; 255
    3422:	c8 01       	movw	r24, r16
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	08 95       	ret

0000342e <__ultoa_invert>:
    342e:	fa 01       	movw	r30, r20
    3430:	aa 27       	eor	r26, r26
    3432:	28 30       	cpi	r18, 0x08	; 8
    3434:	51 f1       	breq	.+84     	; 0x348a <__ultoa_invert+0x5c>
    3436:	20 31       	cpi	r18, 0x10	; 16
    3438:	81 f1       	breq	.+96     	; 0x349a <__ultoa_invert+0x6c>
    343a:	e8 94       	clt
    343c:	6f 93       	push	r22
    343e:	6e 7f       	andi	r22, 0xFE	; 254
    3440:	6e 5f       	subi	r22, 0xFE	; 254
    3442:	7f 4f       	sbci	r23, 0xFF	; 255
    3444:	8f 4f       	sbci	r24, 0xFF	; 255
    3446:	9f 4f       	sbci	r25, 0xFF	; 255
    3448:	af 4f       	sbci	r26, 0xFF	; 255
    344a:	b1 e0       	ldi	r27, 0x01	; 1
    344c:	3e d0       	rcall	.+124    	; 0x34ca <__ultoa_invert+0x9c>
    344e:	b4 e0       	ldi	r27, 0x04	; 4
    3450:	3c d0       	rcall	.+120    	; 0x34ca <__ultoa_invert+0x9c>
    3452:	67 0f       	add	r22, r23
    3454:	78 1f       	adc	r23, r24
    3456:	89 1f       	adc	r24, r25
    3458:	9a 1f       	adc	r25, r26
    345a:	a1 1d       	adc	r26, r1
    345c:	68 0f       	add	r22, r24
    345e:	79 1f       	adc	r23, r25
    3460:	8a 1f       	adc	r24, r26
    3462:	91 1d       	adc	r25, r1
    3464:	a1 1d       	adc	r26, r1
    3466:	6a 0f       	add	r22, r26
    3468:	71 1d       	adc	r23, r1
    346a:	81 1d       	adc	r24, r1
    346c:	91 1d       	adc	r25, r1
    346e:	a1 1d       	adc	r26, r1
    3470:	20 d0       	rcall	.+64     	; 0x34b2 <__ultoa_invert+0x84>
    3472:	09 f4       	brne	.+2      	; 0x3476 <__ultoa_invert+0x48>
    3474:	68 94       	set
    3476:	3f 91       	pop	r19
    3478:	2a e0       	ldi	r18, 0x0A	; 10
    347a:	26 9f       	mul	r18, r22
    347c:	11 24       	eor	r1, r1
    347e:	30 19       	sub	r19, r0
    3480:	30 5d       	subi	r19, 0xD0	; 208
    3482:	31 93       	st	Z+, r19
    3484:	de f6       	brtc	.-74     	; 0x343c <__ultoa_invert+0xe>
    3486:	cf 01       	movw	r24, r30
    3488:	08 95       	ret
    348a:	46 2f       	mov	r20, r22
    348c:	47 70       	andi	r20, 0x07	; 7
    348e:	40 5d       	subi	r20, 0xD0	; 208
    3490:	41 93       	st	Z+, r20
    3492:	b3 e0       	ldi	r27, 0x03	; 3
    3494:	0f d0       	rcall	.+30     	; 0x34b4 <__ultoa_invert+0x86>
    3496:	c9 f7       	brne	.-14     	; 0x348a <__ultoa_invert+0x5c>
    3498:	f6 cf       	rjmp	.-20     	; 0x3486 <__ultoa_invert+0x58>
    349a:	46 2f       	mov	r20, r22
    349c:	4f 70       	andi	r20, 0x0F	; 15
    349e:	40 5d       	subi	r20, 0xD0	; 208
    34a0:	4a 33       	cpi	r20, 0x3A	; 58
    34a2:	18 f0       	brcs	.+6      	; 0x34aa <__ultoa_invert+0x7c>
    34a4:	49 5d       	subi	r20, 0xD9	; 217
    34a6:	31 fd       	sbrc	r19, 1
    34a8:	40 52       	subi	r20, 0x20	; 32
    34aa:	41 93       	st	Z+, r20
    34ac:	02 d0       	rcall	.+4      	; 0x34b2 <__ultoa_invert+0x84>
    34ae:	a9 f7       	brne	.-22     	; 0x349a <__ultoa_invert+0x6c>
    34b0:	ea cf       	rjmp	.-44     	; 0x3486 <__ultoa_invert+0x58>
    34b2:	b4 e0       	ldi	r27, 0x04	; 4
    34b4:	a6 95       	lsr	r26
    34b6:	97 95       	ror	r25
    34b8:	87 95       	ror	r24
    34ba:	77 95       	ror	r23
    34bc:	67 95       	ror	r22
    34be:	ba 95       	dec	r27
    34c0:	c9 f7       	brne	.-14     	; 0x34b4 <__ultoa_invert+0x86>
    34c2:	00 97       	sbiw	r24, 0x00	; 0
    34c4:	61 05       	cpc	r22, r1
    34c6:	71 05       	cpc	r23, r1
    34c8:	08 95       	ret
    34ca:	9b 01       	movw	r18, r22
    34cc:	ac 01       	movw	r20, r24
    34ce:	0a 2e       	mov	r0, r26
    34d0:	06 94       	lsr	r0
    34d2:	57 95       	ror	r21
    34d4:	47 95       	ror	r20
    34d6:	37 95       	ror	r19
    34d8:	27 95       	ror	r18
    34da:	ba 95       	dec	r27
    34dc:	c9 f7       	brne	.-14     	; 0x34d0 <__ultoa_invert+0xa2>
    34de:	62 0f       	add	r22, r18
    34e0:	73 1f       	adc	r23, r19
    34e2:	84 1f       	adc	r24, r20
    34e4:	95 1f       	adc	r25, r21
    34e6:	a0 1d       	adc	r26, r0
    34e8:	08 95       	ret

000034ea <__mulsi3>:
    34ea:	62 9f       	mul	r22, r18
    34ec:	d0 01       	movw	r26, r0
    34ee:	73 9f       	mul	r23, r19
    34f0:	f0 01       	movw	r30, r0
    34f2:	82 9f       	mul	r24, r18
    34f4:	e0 0d       	add	r30, r0
    34f6:	f1 1d       	adc	r31, r1
    34f8:	64 9f       	mul	r22, r20
    34fa:	e0 0d       	add	r30, r0
    34fc:	f1 1d       	adc	r31, r1
    34fe:	92 9f       	mul	r25, r18
    3500:	f0 0d       	add	r31, r0
    3502:	83 9f       	mul	r24, r19
    3504:	f0 0d       	add	r31, r0
    3506:	74 9f       	mul	r23, r20
    3508:	f0 0d       	add	r31, r0
    350a:	65 9f       	mul	r22, r21
    350c:	f0 0d       	add	r31, r0
    350e:	99 27       	eor	r25, r25
    3510:	72 9f       	mul	r23, r18
    3512:	b0 0d       	add	r27, r0
    3514:	e1 1d       	adc	r30, r1
    3516:	f9 1f       	adc	r31, r25
    3518:	63 9f       	mul	r22, r19
    351a:	b0 0d       	add	r27, r0
    351c:	e1 1d       	adc	r30, r1
    351e:	f9 1f       	adc	r31, r25
    3520:	bd 01       	movw	r22, r26
    3522:	cf 01       	movw	r24, r30
    3524:	11 24       	eor	r1, r1
    3526:	08 95       	ret

00003528 <__divmodsi4>:
    3528:	97 fb       	bst	r25, 7
    352a:	09 2e       	mov	r0, r25
    352c:	05 26       	eor	r0, r21
    352e:	0e d0       	rcall	.+28     	; 0x354c <__divmodsi4_neg1>
    3530:	57 fd       	sbrc	r21, 7
    3532:	04 d0       	rcall	.+8      	; 0x353c <__divmodsi4_neg2>
    3534:	14 d0       	rcall	.+40     	; 0x355e <__udivmodsi4>
    3536:	0a d0       	rcall	.+20     	; 0x354c <__divmodsi4_neg1>
    3538:	00 1c       	adc	r0, r0
    353a:	38 f4       	brcc	.+14     	; 0x354a <__divmodsi4_exit>

0000353c <__divmodsi4_neg2>:
    353c:	50 95       	com	r21
    353e:	40 95       	com	r20
    3540:	30 95       	com	r19
    3542:	21 95       	neg	r18
    3544:	3f 4f       	sbci	r19, 0xFF	; 255
    3546:	4f 4f       	sbci	r20, 0xFF	; 255
    3548:	5f 4f       	sbci	r21, 0xFF	; 255

0000354a <__divmodsi4_exit>:
    354a:	08 95       	ret

0000354c <__divmodsi4_neg1>:
    354c:	f6 f7       	brtc	.-4      	; 0x354a <__divmodsi4_exit>
    354e:	90 95       	com	r25
    3550:	80 95       	com	r24
    3552:	70 95       	com	r23
    3554:	61 95       	neg	r22
    3556:	7f 4f       	sbci	r23, 0xFF	; 255
    3558:	8f 4f       	sbci	r24, 0xFF	; 255
    355a:	9f 4f       	sbci	r25, 0xFF	; 255
    355c:	08 95       	ret

0000355e <__udivmodsi4>:
    355e:	a1 e2       	ldi	r26, 0x21	; 33
    3560:	1a 2e       	mov	r1, r26
    3562:	aa 1b       	sub	r26, r26
    3564:	bb 1b       	sub	r27, r27
    3566:	fd 01       	movw	r30, r26
    3568:	0d c0       	rjmp	.+26     	; 0x3584 <__udivmodsi4_ep>

0000356a <__udivmodsi4_loop>:
    356a:	aa 1f       	adc	r26, r26
    356c:	bb 1f       	adc	r27, r27
    356e:	ee 1f       	adc	r30, r30
    3570:	ff 1f       	adc	r31, r31
    3572:	a2 17       	cp	r26, r18
    3574:	b3 07       	cpc	r27, r19
    3576:	e4 07       	cpc	r30, r20
    3578:	f5 07       	cpc	r31, r21
    357a:	20 f0       	brcs	.+8      	; 0x3584 <__udivmodsi4_ep>
    357c:	a2 1b       	sub	r26, r18
    357e:	b3 0b       	sbc	r27, r19
    3580:	e4 0b       	sbc	r30, r20
    3582:	f5 0b       	sbc	r31, r21

00003584 <__udivmodsi4_ep>:
    3584:	66 1f       	adc	r22, r22
    3586:	77 1f       	adc	r23, r23
    3588:	88 1f       	adc	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	1a 94       	dec	r1
    358e:	69 f7       	brne	.-38     	; 0x356a <__udivmodsi4_loop>
    3590:	60 95       	com	r22
    3592:	70 95       	com	r23
    3594:	80 95       	com	r24
    3596:	90 95       	com	r25
    3598:	9b 01       	movw	r18, r22
    359a:	ac 01       	movw	r20, r24
    359c:	bd 01       	movw	r22, r26
    359e:	cf 01       	movw	r24, r30
    35a0:	08 95       	ret

000035a2 <_exit>:
    35a2:	f8 94       	cli

000035a4 <__stop_program>:
    35a4:	ff cf       	rjmp	.-2      	; 0x35a4 <__stop_program>
